/*! For license information please see app.js.LICENSE.txt */
(()=>{var e,t,n={694:(e,t,n)=>{"use strict";var r=n(925);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},556:(e,t,n)=>{e.exports=n(694)()},925:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},551:(e,t,n)=>{"use strict";var r=n(540),a=n(982);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),S=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),O=Symbol.for("react.provider"),C=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),I=Symbol.for("react.memo"),z=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var j=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=j&&e[j]||e["@@iterator"])?e:null}var D,M=Object.assign;function U(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var F=!1;function W(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var u="\n"+a[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function A(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return W(e.type,!1);case 11:return W(e.type.render,!1);case 1:return W(e.type,!0);default:return""}}function V(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case S:return"Portal";case _:return"Profiler";case x:return"StrictMode";case T:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case I:return null!==(t=e.displayName||null)?t:V(e.type)||"Memo";case z:t=e._payload,e=e._init;try{return V(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return V(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function B(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Z(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=B(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function J(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Q(e,t){J(e,t);var n=B(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,B(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function q(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+B(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:B(n)}}function oe(e,t){var n=B(t.value),r=B(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Ee=null,xe=null;function _e(e){if(e=ba(e)){if("function"!=typeof Se)throw Error(o(280));var t=e.stateNode;t&&(t=ka(t),Se(e.stateNode,e.type,t))}}function Oe(e){Ee?xe?xe.push(e):xe=[e]:Ee=e}function Ce(){if(Ee){var e=Ee,t=xe;if(xe=Ee=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Pe(e,t){return e(t)}function Te(){}var Ne=!1;function Ie(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Pe(e,t,n)}finally{Ne=!1,(null!==Ee||null!==xe)&&(Te(),Ce())}}function ze(e,t){var n=e.stateNode;if(null===n)return null;var r=ka(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Re=!1;if(c)try{var je={};Object.defineProperty(je,"passive",{get:function(){Re=!0}}),window.addEventListener("test",je,je),window.removeEventListener("test",je,je)}catch(ce){Re=!1}function Le(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var De=!1,Me=null,Ue=!1,Fe=null,We={onError:function(e){De=!0,Me=e}};function Ae(e,t,n,r,a,o,i,l,u){De=!1,Me=null,Le.apply(We,arguments)}function Ve(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Be(e){if(Ve(e)!==e)throw Error(o(188))}function $e(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ve(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return Be(a),e;if(i===r)return Be(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Ke(e):null}function Ke(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ke(e);if(null!==t)return t;e=e.sibling}return null}var Ze=a.unstable_scheduleCallback,Xe=a.unstable_cancelCallback,Ge=a.unstable_shouldYield,Ye=a.unstable_requestPaint,Je=a.unstable_now,Qe=a.unstable_getCurrentPriorityLevel,qe=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=dt(l):0!=(o&=i)&&(r=dt(o))}else 0!=(i=n&~a)?r=dt(i):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&!(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&4194240&o))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var kt,St,Et,xt,_t,Ot=!1,Ct=[],Pt=null,Tt=null,Nt=null,It=new Map,zt=new Map,Rt=[],jt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":It.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":zt.delete(t.pointerId)}}function Dt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Mt(e){var t=ya(e.target);if(null!==t){var n=Ve(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void _t(e.priority,(function(){Et(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ut(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){Ut(e)&&n.delete(t)}function Wt(){Ot=!1,null!==Pt&&Ut(Pt)&&(Pt=null),null!==Tt&&Ut(Tt)&&(Tt=null),null!==Nt&&Ut(Nt)&&(Nt=null),It.forEach(Ft),zt.forEach(Ft)}function At(e,t){e.blockedOn===t&&(e.blockedOn=null,Ot||(Ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Wt)))}function Vt(e){function t(t){return At(t,e)}if(0<Ct.length){At(Ct[0],e);for(var n=1;n<Ct.length;n++){var r=Ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&At(Pt,e),null!==Tt&&At(Tt,e),null!==Nt&&At(Nt,e),It.forEach(t),zt.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Mt(n),null===n.blockedOn&&Rt.shift()}var Ht=w.ReactCurrentBatchConfig,Bt=!0;function $t(e,t,n,r){var a=bt,o=Ht.transition;Ht.transition=null;try{bt=1,Zt(e,t,n,r)}finally{bt=a,Ht.transition=o}}function Kt(e,t,n,r){var a=bt,o=Ht.transition;Ht.transition=null;try{bt=4,Zt(e,t,n,r)}finally{bt=a,Ht.transition=o}}function Zt(e,t,n,r){if(Bt){var a=Gt(e,t,n,r);if(null===a)Br(e,t,r,Xt,n),Lt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Pt=Dt(Pt,e,t,n,r,a),!0;case"dragenter":return Tt=Dt(Tt,e,t,n,r,a),!0;case"mouseover":return Nt=Dt(Nt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return It.set(o,Dt(It.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,zt.set(o,Dt(zt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<jt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&kt(o),null===(o=Gt(e,t,n,r))&&Br(e,t,r,Xt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Br(e,t,r,null,n)}}var Xt=null;function Gt(e,t,n,r){if(Xt=null,null!==(e=ya(e=ke(r))))if(null===(t=Ve(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Xt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Qe()){case qe:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Jt=null,Qt=null,qt=null;function en(){if(qt)return qt;var e,t,n=Qt,r=n.length,a="value"in Jt?Jt.value:Jt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return qt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),dn=M({},sn,{view:0,detail:0}),fn=an(dn),pn=M({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),mn=an(M({},pn,{dataTransfer:0})),gn=an(M({},dn,{relatedTarget:0})),vn=an(M({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=M({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),wn=an(M({},sn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function _n(){return xn}var On=M({},dn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=an(On),Pn=an(M({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(M({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),Nn=an(M({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),In=M({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),zn=an(In),Rn=[9,13,27,32],jn=c&&"CompositionEvent"in window,Ln=null;c&&"documentMode"in document&&(Ln=document.documentMode);var Dn=c&&"TextEvent"in window&&!Ln,Mn=c&&(!jn||Ln&&8<Ln&&11>=Ln),Un=String.fromCharCode(32),Fn=!1;function Wn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function An(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Bn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function $n(e,t,n,r){Oe(r),0<(t=Kr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Kn=null,Zn=null;function Xn(e){Ur(e,0)}function Gn(e){if(Z(wa(e)))return e}function Yn(e,t){if("change"===e)return t}var Jn=!1;if(c){var Qn;if(c){var qn="oninput"in document;if(!qn){var er=document.createElement("div");er.setAttribute("oninput","return;"),qn="function"==typeof er.oninput}Qn=qn}else Qn=!1;Jn=Qn&&(!document.documentMode||9<document.documentMode)}function tr(){Kn&&(Kn.detachEvent("onpropertychange",nr),Zn=Kn=null)}function nr(e){if("value"===e.propertyName&&Gn(Zn)){var t=[];$n(t,Zn,e,ke(e)),Ie(Xn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Zn=n,(Kn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Zn)}function or(e,t){if("click"===e)return Gn(t)}function ir(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==X(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=Kr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function kr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:kr("Animation","AnimationEnd"),animationiteration:kr("Animation","AnimationIteration"),animationstart:kr("Animation","AnimationStart"),transitionend:kr("Transition","TransitionEnd")},Er={},xr={};function _r(e){if(Er[e])return Er[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in xr)return Er[e]=n[t];return e}c&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var Or=_r("animationend"),Cr=_r("animationiteration"),Pr=_r("animationstart"),Tr=_r("transitionend"),Nr=new Map,Ir="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function zr(e,t){Nr.set(e,t),u(t,[e])}for(var Rr=0;Rr<Ir.length;Rr++){var jr=Ir[Rr];zr(jr.toLowerCase(),"on"+(jr[0].toUpperCase()+jr.slice(1)))}zr(Or,"onAnimationEnd"),zr(Cr,"onAnimationIteration"),zr(Pr,"onAnimationStart"),zr("dblclick","onDoubleClick"),zr("focusin","onFocus"),zr("focusout","onBlur"),zr(Tr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function Mr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,u,s){if(Ae.apply(this,arguments),De){if(!De)throw Error(o(198));var c=Me;De=!1,Me=null,Ue||(Ue=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Ur(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;Mr(a,l,s),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;Mr(a,l,s),o=u}}}if(Ue)throw e=Fe,Ue=!1,Fe=null,e}function Fr(e,t){var n=t[ma];void 0===n&&(n=t[ma]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Wr(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var Ar="_reactListening"+Math.random().toString(36).slice(2);function Vr(e){if(!e[Ar]){e[Ar]=!0,i.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||Wr(t,!1,e),Wr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ar]||(t[Ar]=!0,Wr("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Yt(t)){case 1:var a=$t;break;case 4:a=Kt;break;default:a=Zt}n=a.bind(null,t,n,e),a=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Br(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ya(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}Ie((function(){var r=o,a=ke(n),i=[];e:{var l=Nr.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Cn;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Tn;break;case Or:case Cr:case Pr:u=vn;break;case Tr:u=Nn;break;case"scroll":u=fn;break;case"wheel":u=zn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=!!(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=ze(h,f))&&c.push($r(h,m,p))),d)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,a),i.push({event:l,listeners:c}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!ya(s)&&!s[ha])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ya(s):null)&&(s!==(d=Ve(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==u?l:wa(u),p=null==s?l:wa(s),(l=new c(m,h+"leave",u,n,a)).target=d,l.relatedTarget=p,m=null,ya(a)===r&&((c=new c(f,h+"enter",s,n,a)).target=p,c.relatedTarget=d,m=c),d=m,u&&s)e:{for(f=s,h=0,p=c=u;p;p=Zr(p))h++;for(p=0,m=f;m;m=Zr(m))p++;for(;0<h-p;)c=Zr(c),h--;for(;0<p-h;)f=Zr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Zr(c),f=Zr(f)}c=null}else c=null;null!==u&&Xr(i,l,u,c,!1),null!==s&&null!==d&&Xr(i,d,s,c,!0)}if("select"===(u=(l=r?wa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Yn;else if(Bn(l))if(Jn)g=ir;else{g=ar;var v=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?$n(i,g,n,a):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?wa(r):window,e){case"focusin":(Bn(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,a)}var y;if(jn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vn?Wn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vn&&(y=en()):(Qt="value"in(Jt=a)?Jt.value:Jt.textContent,Vn=!0)),0<(v=Kr(r,b)).length&&(b=new wn(b,e,null,n,a),i.push({event:b,listeners:v}),(y||null!==(y=An(n)))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return An(t);case"keypress":return 32!==t.which?null:(Fn=!0,Un);case"textInput":return(e=t.data)===Un&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!jn&&Wn(e,t)?(e=en(),qt=Qt=Jt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Kr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Ur(i,t)}))}function $r(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Kr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=ze(e,n))&&r.unshift($r(e,o,a)),null!=(o=ze(e,t))&&r.push($r(e,o,a))),e=e.return}return r}function Zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Xr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(u=ze(n,o))&&i.unshift($r(n,u,l)):a||null!=(u=ze(n,o))&&i.push($r(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Gr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Jr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Yr,"")}function Qr(e,t,n){if(t=Jr(t),Jr(e)!==t&&n)throw Error(o(425))}function qr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Vt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Vt(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,pa="__reactProps$"+da,ha="__reactContainer$"+da,ma="__reactEvents$"+da,ga="__reactListeners$"+da,va="__reactHandles$"+da;function ya(e){var t=e[fa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[fa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[fa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[fa]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ka(e){return e[pa]||null}var Sa=[],Ea=-1;function xa(e){return{current:e}}function _a(e){0>Ea||(e.current=Sa[Ea],Sa[Ea]=null,Ea--)}function Oa(e,t){Ea++,Sa[Ea]=e.current,e.current=t}var Ca={},Pa=xa(Ca),Ta=xa(!1),Na=Ca;function Ia(e,t){var n=e.type.contextTypes;if(!n)return Ca;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function za(e){return null!=e.childContextTypes}function Ra(){_a(Ta),_a(Pa)}function ja(e,t,n){if(Pa.current!==Ca)throw Error(o(168));Oa(Pa,t),Oa(Ta,n)}function La(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,H(e)||"Unknown",a));return M({},n,r)}function Da(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ca,Na=Pa.current,Oa(Pa,e),Oa(Ta,Ta.current),!0}function Ma(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=La(e,t,Na),r.__reactInternalMemoizedMergedChildContext=e,_a(Ta),_a(Pa),Oa(Pa,e)):_a(Ta),Oa(Ta,n)}var Ua=null,Fa=!1,Wa=!1;function Aa(e){null===Ua?Ua=[e]:Ua.push(e)}function Va(){if(!Wa&&null!==Ua){Wa=!0;var e=0,t=bt;try{var n=Ua;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ua=null,Fa=!1}catch(t){throw null!==Ua&&(Ua=Ua.slice(e+1)),Ze(qe,Va),t}finally{bt=t,Wa=!1}}return null}var Ha=[],Ba=0,$a=null,Ka=0,Za=[],Xa=0,Ga=null,Ya=1,Ja="";function Qa(e,t){Ha[Ba++]=Ka,Ha[Ba++]=$a,$a=e,Ka=t}function qa(e,t,n){Za[Xa++]=Ya,Za[Xa++]=Ja,Za[Xa++]=Ga,Ga=e;var r=Ya;e=Ja;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ya=1<<32-it(t)+a|n<<a|r,Ja=o+e}else Ya=1<<o|n<<a|r,Ja=e}function eo(e){null!==e.return&&(Qa(e,1),qa(e,1,0))}function to(e){for(;e===$a;)$a=Ha[--Ba],Ha[Ba]=null,Ka=Ha[--Ba],Ha[Ba]=null;for(;e===Ga;)Ga=Za[--Xa],Za[Xa]=null,Ja=Za[--Xa],Za[Xa]=null,Ya=Za[--Xa],Za[Xa]=null}var no=null,ro=null,ao=!1,oo=null;function io(e,t){var n=Is(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ga?{id:Ya,overflow:Ja}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Is(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function uo(e){return!(!(1&e.mode)||128&e.flags)}function so(e){if(ao){var t=ro;if(t){var n=t;if(!lo(e,t)){if(uo(e))throw Error(o(418));t=sa(n.nextSibling);var r=no;t&&lo(e,t)?io(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(uo(e))throw po(),Error(o(418));for(;t;)io(e,t),t=sa(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?sa(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=sa(e.nextSibling)}function ho(){ro=no=null,ao=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var go=w.ReactCurrentBatchConfig;function vo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function yo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bo(e){return(0,e._init)(e._payload)}function wo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Rs(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Ms(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===E?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===z&&bo(o)===t.type)?((r=a(t,n.props)).ref=vo(e,t,n),r.return=e,r):((r=js(n.type,n.key,n.props,null,e.mode,r)).ref=vo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Us(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Ls(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ms(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=js(t.type,t.key,t.props,null,e.mode,n)).ref=vo(e,null,t),n.return=e,n;case S:return(t=Us(t,e.mode,n)).return=e,t;case z:return f(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=Ls(t,e.mode,n,null)).return=e,t;yo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?s(e,t,n,r):null;case S:return n.key===a?c(e,t,n,r):null;case z:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||L(n))return null!==a?null:d(e,t,n,r,null);yo(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case z:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||L(r))return d(t,e=e.get(n)||null,r,a,null);yo(t,r)}return null}function m(a,o,l,u){for(var s=null,c=null,d=o,m=o=0,g=null;null!==d&&m<l.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var v=p(a,d,l[m],u);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(a,d),o=i(v,o,m),null===c?s=v:c.sibling=v,c=v,d=g}if(m===l.length)return n(a,d),ao&&Qa(a,m),s;if(null===d){for(;m<l.length;m++)null!==(d=f(a,l[m],u))&&(o=i(d,o,m),null===c?s=d:c.sibling=d,c=d);return ao&&Qa(a,m),s}for(d=r(a,d);m<l.length;m++)null!==(g=h(d,a,m,l[m],u))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),o=i(g,o,m),null===c?s=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(a,e)})),ao&&Qa(a,m),s}function g(a,l,u,s){var c=L(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var d=c=null,m=l,g=l=0,v=null,y=u.next();null!==m&&!y.done;g++,y=u.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(a,m,y.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(a,m),l=i(b,l,g),null===d?c=b:d.sibling=b,d=b,m=v}if(y.done)return n(a,m),ao&&Qa(a,g),c;if(null===m){for(;!y.done;g++,y=u.next())null!==(y=f(a,y.value,s))&&(l=i(y,l,g),null===d?c=y:d.sibling=y,d=y);return ao&&Qa(a,g),c}for(m=r(a,m);!y.done;g++,y=u.next())null!==(y=h(m,a,g,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=i(y,l,g),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(a,e)})),ao&&Qa(a,g),c}return function e(r,o,i,u){if("object"==typeof i&&null!==i&&i.type===E&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case k:e:{for(var s=i.key,c=o;null!==c;){if(c.key===s){if((s=i.type)===E){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===z&&bo(s)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=vo(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===E?((o=Ls(i.props.children,r.mode,u,i.key)).return=r,r=o):((u=js(i.type,i.key,i.props,null,r.mode,u)).ref=vo(r,o,i),u.return=r,r=u)}return l(r);case S:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Us(i,r.mode,u)).return=r,r=o}return l(r);case z:return e(r,o,(c=i._init)(i._payload),u)}if(te(i))return m(r,o,i,u);if(L(i))return g(r,o,i,u);yo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=Ms(i,r.mode,u)).return=r,r=o),l(r)):n(r,o)}}var ko=wo(!0),So=wo(!1),Eo=xa(null),xo=null,_o=null,Oo=null;function Co(){Oo=_o=xo=null}function Po(e){var t=Eo.current;_a(Eo),e._currentValue=t}function To(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function No(e,t){xo=e,Oo=_o=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(bl=!0),e.firstContext=null)}function Io(e){var t=e._currentValue;if(Oo!==e)if(e={context:e,memoizedValue:t,next:null},null===_o){if(null===xo)throw Error(o(308));_o=e,xo.dependencies={lanes:0,firstContext:e}}else _o=_o.next=e;return t}var zo=null;function Ro(e){null===zo?zo=[e]:zo.push(e)}function jo(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Ro(t)):(n.next=a.next,a.next=n),t.interleaved=n,Lo(e,r)}function Lo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Do=!1;function Mo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Uo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Fo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Wo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Pu){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Lo(e,n)}return null===(a=r.interleaved)?(t.next=t,Ro(r)):(t.next=a.next,a.next=t),r.interleaved=t,Lo(e,n)}function Ao(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Vo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ho(e,t,n,r){var a=e.updateQueue;Do=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?o=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==o){var d=a.baseState;for(i=0,c=s=u=null,l=o;;){var f=l.lane,p=l.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(p,d,f):h))break e;d=M({},d,f);break e;case 2:Do=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[l]:f.push(l))}else p={eventTime:p,lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(f=l).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===c&&(u=d),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Du|=i,e.lanes=i,e.memoizedState=d}}function Bo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var $o={},Ko=xa($o),Zo=xa($o),Xo=xa($o);function Go(e){if(e===$o)throw Error(o(174));return e}function Yo(e,t){switch(Oa(Xo,t),Oa(Zo,e),Oa(Ko,$o),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}_a(Ko),Oa(Ko,t)}function Jo(){_a(Ko),_a(Zo),_a(Xo)}function Qo(e){Go(Xo.current);var t=Go(Ko.current),n=ue(t,e.type);t!==n&&(Oa(Zo,e),Oa(Ko,n))}function qo(e){Zo.current===e&&(_a(Ko),_a(Zo))}var ei=xa(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var ai=w.ReactCurrentDispatcher,oi=w.ReactCurrentBatchConfig,ii=0,li=null,ui=null,si=null,ci=!1,di=!1,fi=0,pi=0;function hi(){throw Error(o(321))}function mi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function gi(e,t,n,r,a,i){if(ii=i,li=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ai.current=null===e||null===e.memoizedState?qi:el,e=n(r,a),di){i=0;do{if(di=!1,fi=0,25<=i)throw Error(o(301));i+=1,si=ui=null,t.updateQueue=null,ai.current=tl,e=n(r,a)}while(di)}if(ai.current=Qi,t=null!==ui&&null!==ui.next,ii=0,si=ui=li=null,ci=!1,t)throw Error(o(300));return e}function vi(){var e=0!==fi;return fi=0,e}function yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===si?li.memoizedState=si=e:si=si.next=e,si}function bi(){if(null===ui){var e=li.alternate;e=null!==e?e.memoizedState:null}else e=ui.next;var t=null===si?li.memoizedState:si.next;if(null!==t)si=t,ui=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ui=e).memoizedState,baseState:ui.baseState,baseQueue:ui.baseQueue,queue:ui.queue,next:null},null===si?li.memoizedState=si=e:si=si.next=e}return si}function wi(e,t){return"function"==typeof t?t(e):t}function ki(e){var t=bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=ui,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var u=l=null,s=null,c=i;do{var d=c.lane;if((ii&d)===d)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=f,l=r):s=s.next=f,li.lanes|=d,Du|=d}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(bl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,li.lanes|=i,Du|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Si(e){var t=bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(bl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ei(){}function xi(e,t){var n=li,r=bi(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,bl=!0),r=r.queue,Di(Ci.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==si&&1&si.memoizedState.tag){if(n.flags|=2048,Ii(9,Oi.bind(null,n,r,a,t),void 0,null),null===Tu)throw Error(o(349));30&ii||_i(n,t,a)}return a}function _i(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Oi(e,t,n,r){t.value=n,t.getSnapshot=r,Pi(t)&&Ti(e)}function Ci(e,t,n){return n((function(){Pi(t)&&Ti(e)}))}function Pi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ti(e){var t=Lo(e,1);null!==t&&ns(t,e,1,-1)}function Ni(e){var t=yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:wi,lastRenderedState:e},t.queue=e,e=e.dispatch=Xi.bind(null,li,e),[t.memoizedState,e]}function Ii(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function zi(){return bi().memoizedState}function Ri(e,t,n,r){var a=yi();li.flags|=e,a.memoizedState=Ii(1|t,n,void 0,void 0===r?null:r)}function ji(e,t,n,r){var a=bi();r=void 0===r?null:r;var o=void 0;if(null!==ui){var i=ui.memoizedState;if(o=i.destroy,null!==r&&mi(r,i.deps))return void(a.memoizedState=Ii(t,n,o,r))}li.flags|=e,a.memoizedState=Ii(1|t,n,o,r)}function Li(e,t){return Ri(8390656,8,e,t)}function Di(e,t){return ji(2048,8,e,t)}function Mi(e,t){return ji(4,2,e,t)}function Ui(e,t){return ji(4,4,e,t)}function Fi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Wi(e,t,n){return n=null!=n?n.concat([e]):null,ji(4,4,Fi.bind(null,t,e),n)}function Ai(){}function Vi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Hi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Bi(e,t,n){return 21&ii?(lr(n,t)||(n=mt(),li.lanes|=n,Du|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bl=!0),e.memoizedState=n)}function $i(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=oi.transition;oi.transition={};try{e(!1),t()}finally{bt=n,oi.transition=r}}function Ki(){return bi().memoizedState}function Zi(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Gi(e)?Yi(t,n):null!==(n=jo(e,t,n,r))&&(ns(n,e,r,es()),Ji(n,t,r))}function Xi(e,t,n){var r=ts(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Gi(e))Yi(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(a.next=a,Ro(t)):(a.next=u.next,u.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=jo(e,t,a,r))&&(ns(n,e,r,a=es()),Ji(n,t,r))}}function Gi(e){var t=e.alternate;return e===li||null!==t&&t===li}function Yi(e,t){di=ci=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Ji(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var Qi={readContext:Io,useCallback:hi,useContext:hi,useEffect:hi,useImperativeHandle:hi,useInsertionEffect:hi,useLayoutEffect:hi,useMemo:hi,useReducer:hi,useRef:hi,useState:hi,useDebugValue:hi,useDeferredValue:hi,useTransition:hi,useMutableSource:hi,useSyncExternalStore:hi,useId:hi,unstable_isNewReconciler:!1},qi={readContext:Io,useCallback:function(e,t){return yi().memoizedState=[e,void 0===t?null:t],e},useContext:Io,useEffect:Li,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ri(4194308,4,Fi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ri(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ri(4,2,e,t)},useMemo:function(e,t){var n=yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Zi.bind(null,li,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yi().memoizedState=e},useState:Ni,useDebugValue:Ai,useDeferredValue:function(e){return yi().memoizedState=e},useTransition:function(){var e=Ni(!1),t=e[0];return e=$i.bind(null,e[1]),yi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=li,a=yi();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Tu)throw Error(o(349));30&ii||_i(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Li(Ci.bind(null,r,i,e),[e]),r.flags|=2048,Ii(9,Oi.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=yi(),t=Tu.identifierPrefix;if(ao){var n=Ja;t=":"+t+"R"+(n=(Ya&~(1<<32-it(Ya)-1)).toString(32)+n),0<(n=fi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},el={readContext:Io,useCallback:Vi,useContext:Io,useEffect:Di,useImperativeHandle:Wi,useInsertionEffect:Mi,useLayoutEffect:Ui,useMemo:Hi,useReducer:ki,useRef:zi,useState:function(){return ki(wi)},useDebugValue:Ai,useDeferredValue:function(e){return Bi(bi(),ui.memoizedState,e)},useTransition:function(){return[ki(wi)[0],bi().memoizedState]},useMutableSource:Ei,useSyncExternalStore:xi,useId:Ki,unstable_isNewReconciler:!1},tl={readContext:Io,useCallback:Vi,useContext:Io,useEffect:Di,useImperativeHandle:Wi,useInsertionEffect:Mi,useLayoutEffect:Ui,useMemo:Hi,useReducer:Si,useRef:zi,useState:function(){return Si(wi)},useDebugValue:Ai,useDeferredValue:function(e){var t=bi();return null===ui?t.memoizedState=e:Bi(t,ui.memoizedState,e)},useTransition:function(){return[Si(wi)[0],bi().memoizedState]},useMutableSource:Ei,useSyncExternalStore:xi,useId:Ki,unstable_isNewReconciler:!1};function nl(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var al={isMounted:function(e){return!!(e=e._reactInternals)&&Ve(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=Fo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=Wo(e,o,a))&&(ns(t,e,a,r),Ao(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=Fo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Wo(e,o,a))&&(ns(t,e,a,r),Ao(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),a=Fo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Wo(e,a,r))&&(ns(t,e,r,n),Ao(t,e,r))}};function ol(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function il(e,t,n){var r=!1,a=Ca,o=t.contextType;return"object"==typeof o&&null!==o?o=Io(o):(a=za(t)?Na:Pa.current,o=(r=null!=(r=t.contextTypes))?Ia(e,a):Ca),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=al,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function ll(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&al.enqueueReplaceState(t,t.state,null)}function ul(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},Mo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Io(o):(o=za(t)?Na:Pa.current,a.context=Ia(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(rl(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&al.enqueueReplaceState(a,a.state,null),Ho(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function sl(e,t){try{var n="",r=t;do{n+=A(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function cl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fl="function"==typeof WeakMap?WeakMap:Map;function pl(e,t,n){(n=Fo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bu||(Bu=!0,$u=r),dl(0,t)},n}function hl(e,t,n){(n=Fo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){dl(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Ku?Ku=new Set([this]):Ku.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ml(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=_s.bind(null,e,t,n),t.then(e,e))}function gl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vl(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Fo(-1,1)).tag=2,Wo(n,t,1))),n.lanes|=1),e)}var yl=w.ReactCurrentOwner,bl=!1;function wl(e,t,n,r){t.child=null===e?So(t,null,n,r):ko(t,e.child,n,r)}function kl(e,t,n,r,a){n=n.render;var o=t.ref;return No(t,a),r=gi(e,t,n,r,o,a),n=vi(),null===e||bl?(ao&&n&&eo(t),t.flags|=1,wl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Bl(e,t,a))}function Sl(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||zs(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=js(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,El(e,t,o,r,a))}if(o=e.child,!(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Bl(e,t,a)}return t.flags|=1,(e=Rs(o,r)).ref=t.ref,e.return=t,t.child=e}function El(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(bl=!1,t.pendingProps=r=o,!(e.lanes&a))return t.lanes=e.lanes,Bl(e,t,a);131072&e.flags&&(bl=!0)}}return Ol(e,t,n,r,a)}function xl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Oa(Ru,zu),zu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Oa(Ru,zu),zu|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Oa(Ru,zu),zu|=n;else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Oa(Ru,zu),zu|=r;return wl(e,t,a,n),t.child}function _l(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ol(e,t,n,r,a){var o=za(n)?Na:Pa.current;return o=Ia(t,o),No(t,a),n=gi(e,t,n,r,o,a),r=vi(),null===e||bl?(ao&&r&&eo(t),t.flags|=1,wl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Bl(e,t,a))}function Cl(e,t,n,r,a){if(za(n)){var o=!0;Da(t)}else o=!1;if(No(t,a),null===t.stateNode)Hl(e,t),il(t,n,r),ul(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Io(s):Ia(t,s=za(n)?Na:Pa.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&ll(t,i,r,s),Do=!1;var f=t.memoizedState;i.state=f,Ho(t,r,i,a),u=t.memoizedState,l!==r||f!==u||Ta.current||Do?("function"==typeof c&&(rl(t,n,c,r),u=t.memoizedState),(l=Do||ol(t,n,l,r,f,u,s))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Uo(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:nl(t.type,l),i.props=s,d=t.pendingProps,f=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Io(u):Ia(t,u=za(n)?Na:Pa.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==u)&&ll(t,i,r,u),Do=!1,f=t.memoizedState,i.state=f,Ho(t,r,i,a);var h=t.memoizedState;l!==d||f!==h||Ta.current||Do?("function"==typeof p&&(rl(t,n,p,r),h=t.memoizedState),(s=Do||ol(t,n,s,r,f,h,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Pl(e,t,n,r,o,a)}function Pl(e,t,n,r,a,o){_l(e,t);var i=!!(128&t.flags);if(!r&&!i)return a&&Ma(t,n,!1),Bl(e,t,o);r=t.stateNode,yl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=ko(t,e.child,null,o),t.child=ko(t,null,l,o)):wl(e,t,l,o),t.memoizedState=r.state,a&&Ma(t,n,!0),t.child}function Tl(e){var t=e.stateNode;t.pendingContext?ja(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ja(0,t.context,!1),Yo(e,t.containerInfo)}function Nl(e,t,n,r,a){return ho(),mo(a),t.flags|=256,wl(e,t,n,r),t.child}var Il,zl,Rl,jl,Ll={dehydrated:null,treeContext:null,retryLane:0};function Dl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ml(e,t,n){var r,a=t.pendingProps,i=ei.current,l=!1,u=!!(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Oa(ei,1&i),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(u=a.children,e=a.fallback,l?(a=t.mode,l=t.child,u={mode:"hidden",children:u},1&a||null===l?l=Ds(u,a,0,null):(l.childLanes=0,l.pendingProps=u),e=Ls(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Dl(n),t.memoizedState=Ll,e):Ul(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,l){if(n)return 256&t.flags?(t.flags&=-257,Fl(e,t,l,r=cl(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=Ds({mode:"visible",children:r.children},a,0,null),(i=Ls(i,a,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&ko(t,e.child,null,l),t.child.memoizedState=Dl(l),t.memoizedState=Ll,i);if(!(1&t.mode))return Fl(e,t,l,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,Fl(e,t,l,r=cl(i=Error(o(419)),r,void 0))}if(u=!!(l&e.childLanes),bl||u){if(null!==(r=Tu)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(r.suspendedLanes|l)?0:a)&&a!==i.retryLane&&(i.retryLane=a,Lo(e,a),ns(r,e,a,-1))}return ms(),Fl(e,t,l,r=cl(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Cs.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,ro=sa(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(Za[Xa++]=Ya,Za[Xa++]=Ja,Za[Xa++]=Ga,Ya=e.id,Ja=e.overflow,Ga=t),(t=Ul(t,r.children)).flags|=4096,t)}(e,t,u,a,r,i,n);if(l){l=a.fallback,u=t.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:a.children};return 1&u||t.child===i?(a=Rs(i,s)).subtreeFlags=14680064&i.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null),null!==r?l=Rs(r,l):(l=Ls(l,u,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,u=null===(u=e.child.memoizedState)?Dl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Ll,a}return e=(l=e.child).sibling,a=Rs(l,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Ul(e,t){return(t=Ds({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fl(e,t,n,r){return null!==r&&mo(r),ko(t,e.child,null,n),(e=Ul(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Wl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),To(e.return,t,n)}function Al(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Vl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(wl(e,t,r.children,n),2&(r=ei.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wl(e,n,t);else if(19===e.tag)Wl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Oa(ei,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Al(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ti(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Al(t,!0,n,null,o);break;case"together":Al(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Hl(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Bl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Du|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Rs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Rs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function $l(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Kl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Zl(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Kl(t),null;case 1:case 17:return za(t.type)&&Ra(),Kl(t),null;case 3:return r=t.stateNode,Jo(),_a(Ta),_a(Pa),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(is(oo),oo=null))),zl(e,t),Kl(t),null;case 5:qo(t);var a=Go(Xo.current);if(n=t.type,null!==e&&null!=t.stateNode)Rl(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Kl(t),null}if(e=Go(Ko.current),fo(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[fa]=t,r[pa]=i,e=!!(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<Lr.length;a++)Fr(Lr[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":Y(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":ae(r,i),Fr("invalid",r)}for(var u in ye(n,i),a=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Qr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Qr(r.textContent,s,e),a=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":K(r),q(r,i,!0);break;case"textarea":K(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=qr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[fa]=t,e[pa]=r,Il(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Lr.length;a++)Fr(Lr[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":Y(e,r),a=G(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=M({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(i in ye(n,a),s=a)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Fr("scroll",e):null!=c&&b(e,i,c,u))}switch(n){case"input":K(e),q(e,r,!1);break;case"textarea":K(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+B(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=qr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Kl(t),null;case 6:if(e&&null!=t.stateNode)jl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Go(Xo.current),Go(Ko.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[fa]=t,(i=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Qr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Qr(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fa]=t,t.stateNode=r}return Kl(t),null;case 13:if(_a(ei),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&t.mode&&!(128&t.flags))po(),ho(),t.flags|=98560,i=!1;else if(i=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[fa]=t}else ho(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Kl(t),i=!1}else null!==oo&&(is(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ei.current?0===ju&&(ju=3):ms())),null!==t.updateQueue&&(t.flags|=4),Kl(t),null);case 4:return Jo(),zl(e,t),null===e&&Vr(t.stateNode.containerInfo),Kl(t),null;case 10:return Po(t.type._context),Kl(t),null;case 19:if(_a(ei),null===(i=t.memoizedState))return Kl(t),null;if(r=!!(128&t.flags),null===(u=i.rendering))if(r)$l(i,!1);else{if(0!==ju||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(u=ti(e))){for(t.flags|=128,$l(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Oa(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Je()>Vu&&(t.flags|=128,r=!0,$l(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),$l(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!ao)return Kl(t),null}else 2*Je()-i.renderingStartTime>Vu&&1073741824!==n&&(t.flags|=128,r=!0,$l(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Je(),t.sibling=null,n=ei.current,Oa(ei,r?1&n|2:1&n),t):(Kl(t),null);case 22:case 23:return ds(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&zu)&&(Kl(t),6&t.subtreeFlags&&(t.flags|=8192)):Kl(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Xl(e,t){switch(to(t),t.tag){case 1:return za(t.type)&&Ra(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Jo(),_a(Ta),_a(Pa),ri(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return qo(t),null;case 13:if(_a(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return _a(ei),null;case 4:return Jo(),null;case 10:return Po(t.type._context),null;case 22:case 23:return ds(),null;default:return null}}Il=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},zl=function(){},Rl=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Go(Ko.current);var o,i=null;switch(n){case"input":a=G(e,a),r=G(e,r),i=[];break;case"select":a=M({},a,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=qr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},jl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Gl=!1,Yl=!1,Jl="function"==typeof WeakSet?WeakSet:Set,Ql=null;function ql(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){xs(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){xs(e,t,n)}}var tu=!1;function nu(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&eu(t,n,o)}a=a.next}while(a!==r)}}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ou(e){var t=e.alternate;null!==t&&(e.alternate=null,ou(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fa],delete t[pa],delete t[ma],delete t[ga],delete t[va]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function lu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=qr));else if(4!==r&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var cu=null,du=!1;function fu(e,t,n){for(n=n.child;null!==n;)pu(e,t,n),n=n.sibling}function pu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Yl||ql(n,t);case 6:var r=cu,a=du;cu=null,fu(e,t,n),du=a,null!==(cu=r)&&(du?(e=cu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cu.removeChild(n.stateNode));break;case 18:null!==cu&&(du?(e=cu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Vt(e)):ua(cu,n.stateNode));break;case 4:r=cu,a=du,cu=n.stateNode.containerInfo,du=!0,fu(e,t,n),cu=r,du=a;break;case 0:case 11:case 14:case 15:if(!Yl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(2&o||4&o)&&eu(n,t,i),a=a.next}while(a!==r)}fu(e,t,n);break;case 1:if(!Yl&&(ql(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){xs(n,t,e)}fu(e,t,n);break;case 21:fu(e,t,n);break;case 22:1&n.mode?(Yl=(r=Yl)||null!==n.memoizedState,fu(e,t,n),Yl=r):fu(e,t,n);break;default:fu(e,t,n)}}function hu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jl),t.forEach((function(t){var r=Ps.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:cu=u.stateNode,du=!1;break e;case 3:case 4:cu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===cu)throw Error(o(160));pu(i,l,a),cu=null,du=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){xs(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gu(t,e),t=t.sibling}function gu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(t,e),vu(e),4&r){try{nu(3,e,e.return),ru(3,e)}catch(t){xs(e,e.return,t)}try{nu(5,e,e.return)}catch(t){xs(e,e.return,t)}}break;case 1:mu(t,e),vu(e),512&r&&null!==n&&ql(n,n.return);break;case 5:if(mu(t,e),vu(e),512&r&&null!==n&&ql(n,n.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(t){xs(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&J(a,i),be(u,l);var c=be(u,i);for(l=0;l<s.length;l+=2){var d=s[l],f=s[l+1];"style"===d?ge(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):b(a,d,f,c)}switch(u){case"input":Q(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(a,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(t){xs(e,e.return,t)}}break;case 6:if(mu(t,e),vu(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){xs(e,e.return,t)}}break;case 3:if(mu(t,e),vu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Vt(t.containerInfo)}catch(t){xs(e,e.return,t)}break;case 4:default:mu(t,e),vu(e);break;case 13:mu(t,e),vu(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Au=Je())),4&r&&hu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Yl=(c=Yl)||d,mu(t,e),Yl=c):mu(t,e),vu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&1&e.mode)for(Ql=e,d=e.child;null!==d;){for(f=Ql=d;null!==Ql;){switch(h=(p=Ql).child,p.tag){case 0:case 11:case 14:case 15:nu(4,p,p.return);break;case 1:ql(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){xs(r,n,e)}}break;case 5:ql(p,p.return);break;case 22:if(null!==p.memoizedState){ku(f);continue}}null!==h?(h.return=p,Ql=h):ku(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=f.stateNode,l=null!=(s=f.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",l))}catch(t){xs(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){xs(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:mu(t,e),vu(e),4&r&&hu(e);case 21:}}function vu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),su(e,lu(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;uu(e,lu(e),i);break;default:throw Error(o(161))}}catch(t){xs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yu(e,t,n){Ql=e,bu(e,t,n)}function bu(e,t,n){for(var r=!!(1&e.mode);null!==Ql;){var a=Ql,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Gl;if(!i){var l=a.alternate,u=null!==l&&null!==l.memoizedState||Yl;l=Gl;var s=Yl;if(Gl=i,(Yl=u)&&!s)for(Ql=a;null!==Ql;)u=(i=Ql).child,22===i.tag&&null!==i.memoizedState?Su(a):null!==u?(u.return=i,Ql=u):Su(a);for(;null!==o;)Ql=o,bu(o,t,n),o=o.sibling;Ql=a,Gl=l,Yl=s}wu(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Ql=o):wu(e)}}function wu(e){for(;null!==Ql;){var t=Ql;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Yl||ru(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Yl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:nl(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Bo(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Bo(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Vt(f)}}}break;default:throw Error(o(163))}Yl||512&t.flags&&au(t)}catch(e){xs(t,t.return,e)}}if(t===e){Ql=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ql=n;break}Ql=t.return}}function ku(e){for(;null!==Ql;){var t=Ql;if(t===e){Ql=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ql=n;break}Ql=t.return}}function Su(e){for(;null!==Ql;){var t=Ql;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ru(4,t)}catch(e){xs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){xs(t,a,e)}}var o=t.return;try{au(t)}catch(e){xs(t,o,e)}break;case 5:var i=t.return;try{au(t)}catch(e){xs(t,i,e)}}}catch(e){xs(t,t.return,e)}if(t===e){Ql=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Ql=l;break}Ql=t.return}}var Eu,xu=Math.ceil,_u=w.ReactCurrentDispatcher,Ou=w.ReactCurrentOwner,Cu=w.ReactCurrentBatchConfig,Pu=0,Tu=null,Nu=null,Iu=0,zu=0,Ru=xa(0),ju=0,Lu=null,Du=0,Mu=0,Uu=0,Fu=null,Wu=null,Au=0,Vu=1/0,Hu=null,Bu=!1,$u=null,Ku=null,Zu=!1,Xu=null,Gu=0,Yu=0,Ju=null,Qu=-1,qu=0;function es(){return 6&Pu?Je():-1!==Qu?Qu:Qu=Je()}function ts(e){return 1&e.mode?2&Pu&&0!==Iu?Iu&-Iu:null!==go.transition?(0===qu&&(qu=mt()),qu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type):1}function ns(e,t,n,r){if(50<Yu)throw Yu=0,Ju=null,Error(o(185));vt(e,n,r),2&Pu&&e===Tu||(e===Tu&&(!(2&Pu)&&(Mu|=n),4===ju&&ls(e,Iu)),rs(e,r),1===n&&0===Pu&&!(1&t.mode)&&(Vu=Je()+500,Fa&&Va()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,u=a[i];-1===u?l&n&&!(l&r)||(a[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=ft(e,e===Tu?Iu:0);if(0===r)null!==n&&Xe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Xe(n),1===t)0===e.tag?function(e){Fa=!0,Aa(e)}(us.bind(null,e)):Aa(us.bind(null,e)),ia((function(){!(6&Pu)&&Va()})),n=null;else{switch(wt(r)){case 1:n=qe;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ts(n,as.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function as(e,t){if(Qu=-1,qu=0,6&Pu)throw Error(o(327));var n=e.callbackNode;if(Ss()&&e.callbackNode!==n)return null;var r=ft(e,e===Tu?Iu:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=gs(e,r);else{t=r;var a=Pu;Pu|=2;var i=hs();for(Tu===e&&Iu===t||(Hu=null,Vu=Je()+500,fs(e,t));;)try{ys();break}catch(t){ps(e,t)}Co(),_u.current=i,Pu=a,null!==Nu?t=0:(Tu=null,Iu=0,t=ju)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=os(e,a)),1===t)throw n=Lu,fs(e,0),ls(e,r),rs(e,Je()),n;if(6===t)ls(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=gs(e,r),2===t&&(i=ht(e),0!==i&&(r=i,t=os(e,i))),1!==t)))throw n=Lu,fs(e,0),ls(e,r),rs(e,Je()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:ks(e,Wu,Hu);break;case 3:if(ls(e,r),(130023424&r)===r&&10<(t=Au+500-Je())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(ks.bind(null,e,Wu,Hu),t);break}ks(e,Wu,Hu);break;case 4:if(ls(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Je()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xu(r/1960))-r)){e.timeoutHandle=ra(ks.bind(null,e,Wu,Hu),r);break}ks(e,Wu,Hu);break;default:throw Error(o(329))}}}return rs(e,Je()),e.callbackNode===n?as.bind(null,e):null}function os(e,t){var n=Fu;return e.current.memoizedState.isDehydrated&&(fs(e,t).flags|=256),2!==(e=gs(e,t))&&(t=Wu,Wu=n,null!==t&&is(t)),e}function is(e){null===Wu?Wu=e:Wu.push.apply(Wu,e)}function ls(e,t){for(t&=~Uu,t&=~Mu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function us(e){if(6&Pu)throw Error(o(327));Ss();var t=ft(e,0);if(!(1&t))return rs(e,Je()),null;var n=gs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=os(e,r))}if(1===n)throw n=Lu,fs(e,0),ls(e,t),rs(e,Je()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ks(e,Wu,Hu),rs(e,Je()),null}function ss(e,t){var n=Pu;Pu|=1;try{return e(t)}finally{0===(Pu=n)&&(Vu=Je()+500,Fa&&Va())}}function cs(e){null!==Xu&&0===Xu.tag&&!(6&Pu)&&Ss();var t=Pu;Pu|=1;var n=Cu.transition,r=bt;try{if(Cu.transition=null,bt=1,e)return e()}finally{bt=r,Cu.transition=n,!(6&(Pu=t))&&Va()}}function ds(){zu=Ru.current,_a(Ru)}function fs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Nu)for(n=Nu.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ra();break;case 3:Jo(),_a(Ta),_a(Pa),ri();break;case 5:qo(r);break;case 4:Jo();break;case 13:case 19:_a(ei);break;case 10:Po(r.type._context);break;case 22:case 23:ds()}n=n.return}if(Tu=e,Nu=e=Rs(e.current,null),Iu=zu=t,ju=0,Lu=null,Uu=Mu=Du=0,Wu=Fu=null,null!==zo){for(t=0;t<zo.length;t++)if(null!==(r=(n=zo[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}zo=null}return e}function ps(e,t){for(;;){var n=Nu;try{if(Co(),ai.current=Qi,ci){for(var r=li.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ci=!1}if(ii=0,si=ui=li=null,di=!1,fi=0,Ou.current=null,null===n||null===n.return){ju=1,Lu=t,Nu=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Iu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,d=u,f=d.tag;if(!(1&d.mode||0!==f&&11!==f&&15!==f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=gl(l);if(null!==h){h.flags&=-257,vl(h,l,u,0,t),1&h.mode&&ml(i,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(s),t.updateQueue=g}else m.add(s);break e}if(!(1&t)){ml(i,c,t),ms();break e}s=Error(o(426))}else if(ao&&1&u.mode){var v=gl(l);if(null!==v){!(65536&v.flags)&&(v.flags|=256),vl(v,l,u,0,t),mo(sl(s,u));break e}}i=s=sl(s,u),4!==ju&&(ju=2),null===Fu?Fu=[i]:Fu.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Vo(i,pl(0,s,t));break e;case 1:u=s;var y=i.type,b=i.stateNode;if(!(128&i.flags||"function"!=typeof y.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Ku&&Ku.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Vo(i,hl(i,u,t));break e}}i=i.return}while(null!==i)}ws(n)}catch(e){t=e,Nu===n&&null!==n&&(Nu=n=n.return);continue}break}}function hs(){var e=_u.current;return _u.current=Qi,null===e?Qi:e}function ms(){0!==ju&&3!==ju&&2!==ju||(ju=4),null===Tu||!(268435455&Du)&&!(268435455&Mu)||ls(Tu,Iu)}function gs(e,t){var n=Pu;Pu|=2;var r=hs();for(Tu===e&&Iu===t||(Hu=null,fs(e,t));;)try{vs();break}catch(t){ps(e,t)}if(Co(),Pu=n,_u.current=r,null!==Nu)throw Error(o(261));return Tu=null,Iu=0,ju}function vs(){for(;null!==Nu;)bs(Nu)}function ys(){for(;null!==Nu&&!Ge();)bs(Nu)}function bs(e){var t=Eu(e.alternate,e,zu);e.memoizedProps=e.pendingProps,null===t?ws(e):Nu=t,Ou.current=null}function ws(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Xl(n,t)))return n.flags&=32767,void(Nu=n);if(null===e)return ju=6,void(Nu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Zl(n,t,zu)))return void(Nu=n);if(null!==(t=t.sibling))return void(Nu=t);Nu=t=e}while(null!==t);0===ju&&(ju=5)}function ks(e,t,n){var r=bt,a=Cu.transition;try{Cu.transition=null,bt=1,function(e,t,n,r){do{Ss()}while(null!==Xu);if(6&Pu)throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Tu&&(Nu=Tu=null,Iu=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Zu||(Zu=!0,Ts(tt,(function(){return Ss(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=Cu.transition,Cu.transition=null;var l=bt;bt=1;var u=Pu;Pu|=4,Ou.current=null,function(e,t){if(ea=Bt,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(u=l+a),f!==i||0!==r&&3!==f.nodeType||(s=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===a&&(u=l),p===i&&++d===r&&(s=l),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Bt=!1,Ql=t;null!==Ql;)if(e=(t=Ql).child,1028&t.subtreeFlags&&null!==e)e.return=t,Ql=e;else for(;null!==Ql;){t=Ql;try{var m=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,v=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:nl(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){xs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ql=e;break}Ql=t.return}m=tu,tu=!1}(e,n),gu(n,e),hr(ta),Bt=!!ea,ta=ea=null,e.current=n,yu(n,e,a),Ye(),Pu=u,bt=l,Cu.transition=i}else e.current=n;if(Zu&&(Zu=!1,Xu=e,Gu=a),0===(i=e.pendingLanes)&&(Ku=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rs(e,Je()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Bu)throw Bu=!1,e=$u,$u=null,e;!!(1&Gu)&&0!==e.tag&&Ss(),1&(i=e.pendingLanes)?e===Ju?Yu++:(Yu=0,Ju=e):Yu=0,Va()}(e,t,n,r)}finally{Cu.transition=a,bt=r}return null}function Ss(){if(null!==Xu){var e=wt(Gu),t=Cu.transition,n=bt;try{if(Cu.transition=null,bt=16>e?16:e,null===Xu)var r=!1;else{if(e=Xu,Xu=null,Gu=0,6&Pu)throw Error(o(331));var a=Pu;for(Pu|=4,Ql=e.current;null!==Ql;){var i=Ql,l=i.child;if(16&Ql.flags){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Ql=c;null!==Ql;){var d=Ql;switch(d.tag){case 0:case 11:case 15:nu(8,d,i)}var f=d.child;if(null!==f)f.return=d,Ql=f;else for(;null!==Ql;){var p=(d=Ql).sibling,h=d.return;if(ou(d),d===c){Ql=null;break}if(null!==p){p.return=h,Ql=p;break}Ql=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Ql=i}}if(2064&i.subtreeFlags&&null!==l)l.return=i,Ql=l;else e:for(;null!==Ql;){if(2048&(i=Ql).flags)switch(i.tag){case 0:case 11:case 15:nu(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Ql=y;break e}Ql=i.return}}var b=e.current;for(Ql=b;null!==Ql;){var w=(l=Ql).child;if(2064&l.subtreeFlags&&null!==w)w.return=l,Ql=w;else e:for(l=b;null!==Ql;){if(2048&(u=Ql).flags)try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){xs(u,u.return,e)}if(u===l){Ql=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Ql=k;break e}Ql=u.return}}if(Pu=a,Va(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Cu.transition=t}}return!1}function Es(e,t,n){e=Wo(e,t=pl(0,t=sl(n,t),1),1),t=es(),null!==e&&(vt(e,1,t),rs(e,t))}function xs(e,t,n){if(3===e.tag)Es(e,e,n);else for(;null!==t;){if(3===t.tag){Es(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ku||!Ku.has(r))){t=Wo(t,e=hl(t,e=sl(n,e),1),1),e=es(),null!==t&&(vt(t,1,e),rs(t,e));break}}t=t.return}}function _s(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Tu===e&&(Iu&n)===n&&(4===ju||3===ju&&(130023424&Iu)===Iu&&500>Je()-Au?fs(e,0):Uu|=n),rs(e,t)}function Os(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=es();null!==(e=Lo(e,t))&&(vt(e,t,n),rs(e,n))}function Cs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Os(e,n)}function Ps(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Os(e,n)}function Ts(e,t){return Ze(e,t)}function Ns(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Is(e,t,n,r){return new Ns(e,t,n,r)}function zs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Rs(e,t){var n=e.alternate;return null===n?((n=Is(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function js(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)zs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case E:return Ls(n.children,a,i,t);case x:l=8,a|=8;break;case _:return(e=Is(12,n,t,2|a)).elementType=_,e.lanes=i,e;case T:return(e=Is(13,n,t,a)).elementType=T,e.lanes=i,e;case N:return(e=Is(19,n,t,a)).elementType=N,e.lanes=i,e;case R:return Ds(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:l=10;break e;case C:l=9;break e;case P:l=11;break e;case I:l=14;break e;case z:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Is(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Ls(e,t,n,r){return(e=Is(7,e,r,t)).lanes=n,e}function Ds(e,t,n,r){return(e=Is(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function Ms(e,t,n){return(e=Is(6,e,null,t)).lanes=n,e}function Us(e,t,n){return(t=Is(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fs(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Ws(e,t,n,r,a,o,i,l,u){return e=new Fs(e,t,n,l,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Is(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Mo(o),e}function As(e){if(!e)return Ca;e:{if(Ve(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(za(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(za(n))return La(e,n,t)}return t}function Vs(e,t,n,r,a,o,i,l,u){return(e=Ws(n,r,!0,e,0,o,0,l,u)).context=As(null),n=e.current,(o=Fo(r=es(),a=ts(n))).callback=null!=t?t:null,Wo(n,o,a),e.current.lanes=a,vt(e,a,r),rs(e,r),e}function Hs(e,t,n,r){var a=t.current,o=es(),i=ts(a);return n=As(n),null===t.context?t.context=n:t.pendingContext=n,(t=Fo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Wo(a,t,i))&&(ns(e,a,i,o),Ao(e,a,i)),i}function Bs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function $s(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ks(e,t){$s(e,t),(e=e.alternate)&&$s(e,t)}Eu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ta.current)bl=!0;else{if(!(e.lanes&n||128&t.flags))return bl=!1,function(e,t,n){switch(t.tag){case 3:Tl(t),ho();break;case 5:Qo(t);break;case 1:za(t.type)&&Da(t);break;case 4:Yo(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Oa(Eo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Oa(ei,1&ei.current),t.flags|=128,null):n&t.child.childLanes?Ml(e,t,n):(Oa(ei,1&ei.current),null!==(e=Bl(e,t,n))?e.sibling:null);Oa(ei,1&ei.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Vl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Oa(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,xl(e,t,n)}return Bl(e,t,n)}(e,t,n);bl=!!(131072&e.flags)}else bl=!1,ao&&1048576&t.flags&&qa(t,Ka,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Hl(e,t),e=t.pendingProps;var a=Ia(t,Pa.current);No(t,n),a=gi(null,t,r,e,a,n);var i=vi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,za(r)?(i=!0,Da(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Mo(t),a.updater=al,t.stateNode=a,a._reactInternals=t,ul(t,r,e,n),t=Pl(null,t,r,!0,i,n)):(t.tag=0,ao&&i&&eo(t),wl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Hl(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return zs(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===I)return 14}return 2}(r),e=nl(r,e),a){case 0:t=Ol(null,t,r,e,n);break e;case 1:t=Cl(null,t,r,e,n);break e;case 11:t=kl(null,t,r,e,n);break e;case 14:t=Sl(null,t,r,nl(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Ol(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 1:return r=t.type,a=t.pendingProps,Cl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 3:e:{if(Tl(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,Uo(e,t),Ho(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Nl(e,t,r,n,a=sl(Error(o(423)),t));break e}if(r!==a){t=Nl(e,t,r,n,a=sl(Error(o(424)),t));break e}for(ro=sa(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=So(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===a){t=Bl(e,t,n);break e}wl(e,t,r,n)}t=t.child}return t;case 5:return Qo(t),null===e&&so(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),_l(e,t),wl(e,t,l,n),t.child;case 6:return null===e&&so(t),null;case 13:return Ml(e,t,n);case 4:return Yo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ko(t,null,r,n):wl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,kl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 7:return wl(e,t,t.pendingProps,n),t.child;case 8:case 12:return wl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Oa(Eo,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Ta.current){t=Bl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=Fo(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),To(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),To(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}wl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,No(t,n),r=r(a=Io(a)),t.flags|=1,wl(e,t,r,n),t.child;case 14:return a=nl(r=t.type,t.pendingProps),Sl(e,t,r,a=nl(r.type,a),n);case 15:return El(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:nl(r,a),Hl(e,t),t.tag=1,za(r)?(e=!0,Da(t)):e=!1,No(t,n),il(t,r,a),ul(t,r,a,n),Pl(null,t,r,!0,e,n);case 19:return Vl(e,t,n);case 22:return xl(e,t,n)}throw Error(o(156,t.tag))};var Zs="function"==typeof reportError?reportError:function(e){console.error(e)};function Xs(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function Ys(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Qs(){}function qs(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Bs(i);l.call(e)}}Hs(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Bs(i);o.call(e)}}var i=Vs(t,r,e,0,null,!1,0,"",Qs);return e._reactRootContainer=i,e[ha]=i.current,Vr(8===e.nodeType?e.parentNode:e),cs(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Bs(u);l.call(e)}}var u=Ws(e,0,!1,null,0,!1,0,"",Qs);return e._reactRootContainer=u,e[ha]=u.current,Vr(8===e.nodeType?e.parentNode:e),cs((function(){Hs(t,u,n,r)})),u}(n,t,e,a,r);return Bs(i)}Gs.prototype.render=Xs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Hs(e,t,null,null)},Gs.prototype.unmount=Xs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Hs(null,e,null,null)})),t[ha]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Mt(e)}},kt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),rs(t,Je()),!(6&Pu)&&(Vu=Je()+500,Va()))}break;case 13:cs((function(){var t=Lo(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Ks(e,1)}},St=function(e){if(13===e.tag){var t=Lo(e,134217728);null!==t&&ns(t,e,134217728,es()),Ks(e,134217728)}},Et=function(e){if(13===e.tag){var t=ts(e),n=Lo(e,t);null!==n&&ns(n,e,t,es()),Ks(e,t)}},xt=function(){return bt},_t=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(Q(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ka(r);if(!a)throw Error(o(90));Z(r),Q(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=ss,Te=cs;var ec={usingClientEntryPoint:!1,Events:[ba,wa,ka,Oe,Ce,ss]},tc={findFiberByHostInstance:ya,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),ot=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ys(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Ys(e))throw Error(o(299));var n=!1,r="",a=Zs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Ws(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,Vr(8===e.nodeType?e.parentNode:e),new Xs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=$e(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Js(t))throw Error(o(200));return qs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ys(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=Zs;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Vs(t,null,e,1,null!=n?n:null,a,0,i,l),e[ha]=t.current,Vr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Gs(t)},t.render=function(e,t,n){if(!Js(t))throw Error(o(200));return qs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Js(e))throw Error(o(40));return!!e._reactRootContainer&&(cs((function(){qs(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Js(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return qs(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},338:(e,t,n)=>{"use strict";var r=n(961);t.H=r.createRoot,r.hydrateRoot},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var k=Array.isArray,S=Object.prototype.hasOwnProperty,E={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,a)&&!x.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:E.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===o?"."+P(u,0):o,k(i)?(a="",null!=e&&(a=e.replace(C,"$&/")+"/"),T(i,t,a,"",(function(e){return e}))):null!=i&&(O(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(u=0,o=""===o?".":o+":",k(e))for(var s=0;s<e.length;s++){var c=o+P(l=e[s],s);u+=T(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=T(l=l.value,t,a,c=o+P(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function I(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var z={current:null},R={transition:null},j={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:R,ReactCurrentOwner:E};function L(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.act=L,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=E.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)S.call(t,s)&&!x.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:I}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=L,t.useCallback=function(e,t){return z.current.useCallback(e,t)},t.useContext=function(e){return z.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return z.current.useDeferredValue(e)},t.useEffect=function(e,t){return z.current.useEffect(e,t)},t.useId=function(){return z.current.useId()},t.useImperativeHandle=function(e,t,n){return z.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return z.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return z.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return z.current.useMemo(e,t)},t.useReducer=function(e,t,n){return z.current.useReducer(e,t,n)},t.useRef=function(e){return z.current.useRef(e)},t.useState=function(e){return z.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return z.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return z.current.useTransition()},t.version="18.3.1"},540:(e,t,n)=>{"use strict";e.exports=n(287)},463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(g=!1,w(e),!m)if(null!==r(s))m=!0,R(S);else{var t=r(c);null!==t&&j(k,t.startTime-e)}}function S(e,n){m=!1,g&&(g=!1,y(O),O=-1),h=!0;var o=p;try{for(w(n),f=r(s);null!==f&&(!(f.expirationTime>n)||e&&!T());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?f.callback=l:f===r(s)&&a(s),w(n)}else a(s);f=r(s)}if(null!==f)var u=!0;else{var d=r(c);null!==d&&j(k,d.startTime-n),u=!1}return u}finally{f=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,x=!1,_=null,O=-1,C=5,P=-1;function T(){return!(t.unstable_now()-P<C)}function N(){if(null!==_){var e=t.unstable_now();P=e;var n=!0;try{n=_(!0,e)}finally{n?E():(x=!1,_=null)}}else x=!1}if("function"==typeof b)E=function(){b(N)};else if("undefined"!=typeof MessageChannel){var I=new MessageChannel,z=I.port2;I.port1.onmessage=N,E=function(){z.postMessage(null)}}else E=function(){v(N,0)};function R(e){_=e,x||(x=!0,E())}function j(e,n){O=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,R(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(g?(y(O),O=-1):g=!0,j(k,o-i))):(e.sortIndex=l,n(s,e),m||h||(m=!0,R(S))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},982:(e,t,n)=>{"use strict";e.exports=n(463)},942:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function a(){for(var e="",t=0;t<arguments.length;t++){var n=arguments[t];n&&(e=i(e,o(n)))}return e}function o(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return a.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var n in e)r.call(e,n)&&e[n]&&(t=i(t,n));return t}function i(e,t){return t?e?e+" "+t:e+t:e}e.exports?(a.default=a,e.exports=a):void 0===(n=function(){return a}.apply(t,[]))||(e.exports=n)}()}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e](o,o.exports,a),o.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e,t=a(540),n=a.t(t,2),r=a(338),o=a(961),i=a.t(o,2);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const u="popstate";function s(e,t){if(!1===e||null==e)throw new Error(t)}function c(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function d(e,t){return{usr:e.state,key:e.key,idx:t}}function f(e,t,n,r){return void 0===n&&(n=null),l({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?h(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function p(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function h(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var m;function g(e,t,n){return void 0===n&&(n="/"),function(e,t,n,r){let a=N(("string"==typeof t?h(t):t).pathname||"/",n);if(null==a)return null;let o=v(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=T(a);i=C(o[e],t,r)}return i}(e,t,n,!1)}function v(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(s(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=j([r,i.relativePath]),u=n.concat(i);e.children&&e.children.length>0&&(s(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),v(e.children,t,u,l)),(null!=e.path||e.index)&&t.push({path:l,score:O(l,e.index),routesMeta:u})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of y(e.path))a(e,t,n);else a(e,t)})),t}function y(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=y(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(m||(m={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const b=/^:[\w-]+$/,w=3,k=2,S=1,E=10,x=-2,_=e=>"*"===e;function O(e,t){let n=e.split("/"),r=n.length;return n.some(_)&&(r+=x),t&&(r+=k),n.filter((e=>!_(e))).reduce(((e,t)=>e+(b.test(t)?w:""===t?S:E)),r)}function C(e,t,n){void 0===n&&(n=!1);let{routesMeta:r}=e,a={},o="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],u=e===r.length-1,s="/"===o?t:t.slice(o.length)||"/",c=P({path:l.relativePath,caseSensitive:l.caseSensitive,end:u},s),d=l.route;if(!c&&u&&n&&!r[r.length-1].route.index&&(c=P({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},s)),!c)return null;Object.assign(a,c.params),i.push({params:a,pathname:j([o,c.pathname]),pathnameBase:L(j([o,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(o=j([o,c.pathnameBase]))}return i}function P(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),c("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=l[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const u=l[n];return e[r]=a&&!u?void 0:(u||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function T(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return c(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function N(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function I(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function z(e,t){let n=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}function R(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=h(e):(a=l({},e),s(!a.pathname||!a.pathname.includes("?"),I("?","pathname","search",a)),s(!a.pathname||!a.pathname.includes("#"),I("#","pathname","hash",a)),s(!a.search||!a.search.includes("#"),I("#","search","hash",a)));let o,i=""===e||""===a.pathname,u=i?"/":a.pathname;if(null==u)o=n;else{let e=t.length-1;if(!r&&u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?h(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:D(r),hash:M(a)}}(a,o),d=u&&"/"!==u&&u.endsWith("/"),f=(i||"."===u)&&n.endsWith("/");return c.pathname.endsWith("/")||!d&&!f||(c.pathname+="/"),c}const j=e=>e.join("/").replace(/\/\/+/g,"/"),L=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),D=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",M=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const U=["post","put","patch","delete"],F=(new Set(U),["get",...U]);function W(){return W=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},W.apply(this,arguments)}new Set(F),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const A=t.createContext(null),V=t.createContext(null),H=t.createContext(null),B=t.createContext(null),$=t.createContext({outlet:null,matches:[],isDataRoute:!1}),K=t.createContext(null);function Z(){return null!=t.useContext(B)}function X(){return Z()||s(!1),t.useContext(B).location}function G(e){t.useContext(H).static||t.useLayoutEffect(e)}function Y(){let{isDataRoute:e}=t.useContext($);return e?function(){let{router:e}=function(){let e=t.useContext(A);return e||s(!1),e}(re.UseNavigateStable),n=oe(ae.UseNavigateStable),r=t.useRef(!1);return G((()=>{r.current=!0})),t.useCallback((function(t,a){void 0===a&&(a={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,W({fromRouteId:n},a)))}),[e,n])}():function(){Z()||s(!1);let e=t.useContext(A),{basename:n,future:r,navigator:a}=t.useContext(H),{matches:o}=t.useContext($),{pathname:i}=X(),l=JSON.stringify(z(o,r.v7_relativeSplatPath)),u=t.useRef(!1);return G((()=>{u.current=!0})),t.useCallback((function(t,r){if(void 0===r&&(r={}),!u.current)return;if("number"==typeof t)return void a.go(t);let o=R(t,JSON.parse(l),i,"path"===r.relative);null==e&&"/"!==n&&(o.pathname="/"===o.pathname?n:j([n,o.pathname])),(r.replace?a.replace:a.push)(o,r.state,r)}),[n,a,l,i,e])}()}function J(e,n){let{relative:r}=void 0===n?{}:n,{future:a}=t.useContext(H),{matches:o}=t.useContext($),{pathname:i}=X(),l=JSON.stringify(z(o,a.v7_relativeSplatPath));return t.useMemo((()=>R(e,JSON.parse(l),i,"path"===r)),[e,l,i,r])}function Q(n,r,a,o){Z()||s(!1);let{navigator:i}=t.useContext(H),{matches:l}=t.useContext($),u=l[l.length-1],c=u?u.params:{},d=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let f,p=X();if(r){var m;let e="string"==typeof r?h(r):r;"/"===d||(null==(m=e.pathname)?void 0:m.startsWith(d))||s(!1),f=e}else f=p;let v=f.pathname||"/",y=v;if("/"!==d){let e=d.replace(/^\//,"").split("/");y="/"+v.replace(/^\//,"").split("/").slice(e.length).join("/")}let b=g(n,{pathname:y}),w=function(e,n,r,a){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),void 0===a&&(a=null),null==e){var i;if(!r)return null;if(r.errors)e=r.matches;else{if(!(null!=(i=a)&&i.v7_partialHydration&&0===n.length&&!r.initialized&&r.matches.length>0))return null;e=r.matches}}let l=e,u=null==(o=r)?void 0:o.errors;if(null!=u){let e=l.findIndex((e=>e.route.id&&void 0!==(null==u?void 0:u[e.route.id])));e>=0||s(!1),l=l.slice(0,Math.min(l.length,e+1))}let c=!1,d=-1;if(r&&a&&a.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(d=e),t.route.id){let{loaderData:e,errors:n}=r,a=t.route.loader&&void 0===e[t.route.id]&&(!n||void 0===n[t.route.id]);if(t.route.lazy||a){c=!0,l=d>=0?l.slice(0,d+1):[l[0]];break}}}return l.reduceRight(((e,a,o)=>{let i,s=!1,f=null,p=null;var h;r&&(i=u&&a.route.id?u[a.route.id]:void 0,f=a.route.errorElement||ee,c&&(d<0&&0===o?(ie[h="route-fallback"]||(ie[h]=!0),s=!0,p=null):d===o&&(s=!0,p=a.route.hydrateFallbackElement||null)));let m=n.concat(l.slice(0,o+1)),g=()=>{let n;return n=i?f:s?p:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(ne,{match:a,routeContext:{outlet:e,matches:m,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?t.createElement(te,{location:r.location,revalidation:r.revalidation,component:f,error:i,children:g(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):g()}),null)}(b&&b.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:j([d,i.encodeLocation?i.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?d:j([d,i.encodeLocation?i.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,a,o);return r&&w?t.createElement(B.Provider,{value:{location:W({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:e.Pop}},w):w}function q(){let e=function(){var e;let n=t.useContext(K),r=function(){let e=t.useContext(V);return e||s(!1),e}(ae.UseRouteError),a=oe(ae.UseRouteError);return void 0!==n?n:null==(e=r.errors)?void 0:e[a]}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:a},r):null,null)}const ee=t.createElement(q,null);class te extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?t.createElement($.Provider,{value:this.props.routeContext},t.createElement(K.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ne(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(A);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement($.Provider,{value:n},a)}var re=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(re||{}),ae=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(ae||{});function oe(e){let n=function(){let e=t.useContext($);return e||s(!1),e}(),r=n.matches[n.matches.length-1];return r.route.id||s(!1),r.route.id}const ie={};function le(e){s(!1)}function ue(n){let{basename:r="/",children:a=null,location:o,navigationType:i=e.Pop,navigator:l,static:u=!1,future:c}=n;Z()&&s(!1);let d=r.replace(/^\/*/,"/"),f=t.useMemo((()=>({basename:d,navigator:l,static:u,future:W({v7_relativeSplatPath:!1},c)})),[d,c,l,u]);"string"==typeof o&&(o=h(o));let{pathname:p="/",search:m="",hash:g="",state:v=null,key:y="default"}=o,b=t.useMemo((()=>{let e=N(p,d);return null==e?null:{location:{pathname:e,search:m,hash:g,state:v,key:y},navigationType:i}}),[d,p,m,g,v,y,i]);return null==b?null:t.createElement(H.Provider,{value:f},t.createElement(B.Provider,{children:a,value:b}))}function se(e){let{children:t,location:n}=e;return Q(ce(t),n)}function ce(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,a)=>{if(!t.isValidElement(e))return;let o=[...n,a];if(e.type===t.Fragment)return void r.push.apply(r,ce(e.props.children,o));e.type!==le&&s(!1),e.props.index&&e.props.children&&s(!1);let i={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=ce(e.props.children,o)),r.push(i)})),r}function de(){return de=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},de.apply(this,arguments)}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const fe=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","viewTransition"];try{window.__reactRouterVersion="6"}catch(Ee){}new Map;const pe=n.startTransition;i.flushSync,n.useId;const he="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,me=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ge=t.forwardRef((function(e,n){let r,{onClick:a,relative:o,reloadDocument:i,replace:l,state:u,target:c,to:d,preventScrollReset:f,viewTransition:h}=e,m=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,fe),{basename:g}=t.useContext(H),v=!1;if("string"==typeof d&&me.test(d)&&(r=d,he))try{let e=new URL(window.location.href),t=d.startsWith("//")?new URL(e.protocol+d):new URL(d),n=N(t.pathname,g);t.origin===e.origin&&null!=n?d=n+t.search+t.hash:v=!0}catch(e){}let y=function(e,n){let{relative:r}=void 0===n?{}:n;Z()||s(!1);let{basename:a,navigator:o}=t.useContext(H),{hash:i,pathname:l,search:u}=J(e,{relative:r}),c=l;return"/"!==a&&(c="/"===l?a:j([a,l])),o.createHref({pathname:c,search:u,hash:i})}(d,{relative:o}),b=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:i,relative:l,viewTransition:u}=void 0===n?{}:n,s=Y(),c=X(),d=J(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:p(c)===p(d);s(e,{replace:n,state:o,preventScrollReset:i,relative:l,viewTransition:u})}}),[c,s,d,a,o,r,e,i,l,u])}(d,{replace:l,state:u,target:c,preventScrollReset:f,relative:o,viewTransition:h});return t.createElement("a",de({},m,{href:r||y,onClick:v||i?a:function(e){a&&a(e),e.defaultPrevented||b(e)},ref:n,target:c}))}));var ve,ye;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(ve||(ve={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ye||(ye={}));var be=function(e,t){return be=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},be(e,t)},we=function(){return we=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},we.apply(this,arguments)};function ke(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function l(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}u((r=r.apply(e,t||[])).next())}))}function Se(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&l[0]?r.return:l[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,l[1])).done)return a;switch(r=0,a&&(l=[2&l[0],a.value]),l[0]){case 0:case 1:a=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!a||l[1]>a[0]&&l[1]<a[3])){i.label=l[1];break}if(6===l[0]&&i.label<a[1]){i.label=a[1],a=l;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(l);break}a[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],r=0}finally{n=a=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}}function Ee(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}"function"==typeof SuppressedError&&SuppressedError,"function"==typeof SuppressedError&&SuppressedError;var xe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==a.g?a.g:"undefined"!=typeof self?self:{};function _e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Oe(e,t){return e(t={exports:{}},t.exports),t.exports}var Ce=Oe((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){var e=this;this.locked=new Map,this.addToLocked=function(t,n){var r=e.locked.get(t);void 0===r?void 0===n?e.locked.set(t,[]):e.locked.set(t,[n]):void 0!==n&&(r.unshift(n),e.locked.set(t,r))},this.isLocked=function(t){return e.locked.has(t)},this.lock=function(t){return new Promise((function(n,r){e.isLocked(t)?e.addToLocked(t,n):(e.addToLocked(t),n())}))},this.unlock=function(t){var n=e.locked.get(t);if(void 0!==n&&0!==n.length){var r=n.pop();e.locked.set(t,n),void 0!==r&&setTimeout(r,0)}else e.locked.delete(t)}}return e.getInstance=function(){return void 0===e.instance&&(e.instance=new e),e.instance},e}();t.default=function(){return n.getInstance()}}));_e(Ce);var Pe=_e(Oe((function(e,t){var n=xe&&xe.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function l(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?a(e.value):new n((function(t){t(e.value)})).then(i,l)}u((r=r.apply(e,t||[])).next())}))},r=xe&&xe.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},a=xe;Object.defineProperty(t,"__esModule",{value:!0});var o="browser-tabs-lock-key",i={key:function(e){return n(a,void 0,void 0,(function(){return r(this,(function(e){throw new Error("Unsupported")}))}))},getItem:function(e){return n(a,void 0,void 0,(function(){return r(this,(function(e){throw new Error("Unsupported")}))}))},clear:function(){return n(a,void 0,void 0,(function(){return r(this,(function(e){return[2,window.localStorage.clear()]}))}))},removeItem:function(e){return n(a,void 0,void 0,(function(){return r(this,(function(e){throw new Error("Unsupported")}))}))},setItem:function(e,t){return n(a,void 0,void 0,(function(){return r(this,(function(e){throw new Error("Unsupported")}))}))},keySync:function(e){return window.localStorage.key(e)},getItemSync:function(e){return window.localStorage.getItem(e)},clearSync:function(){return window.localStorage.clear()},removeItemSync:function(e){return window.localStorage.removeItem(e)},setItemSync:function(e,t){return window.localStorage.setItem(e,t)}};function l(e){return new Promise((function(t){return setTimeout(t,e)}))}function u(e){for(var t="",n=0;n<e;n++)t+="0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz"[Math.floor(61*Math.random())];return t}var s=function(){function e(t){this.acquiredIatSet=new Set,this.storageHandler=void 0,this.id=Date.now().toString()+u(15),this.acquireLock=this.acquireLock.bind(this),this.releaseLock=this.releaseLock.bind(this),this.releaseLock__private__=this.releaseLock__private__.bind(this),this.waitForSomethingToChange=this.waitForSomethingToChange.bind(this),this.refreshLockWhileAcquired=this.refreshLockWhileAcquired.bind(this),this.storageHandler=t,void 0===e.waiters&&(e.waiters=[])}return e.prototype.acquireLock=function(t,a){return void 0===a&&(a=5e3),n(this,void 0,void 0,(function(){var n,s,c,d,f,p,h;return r(this,(function(r){switch(r.label){case 0:n=Date.now()+u(4),s=Date.now()+a,c=o+"-"+t,d=void 0===this.storageHandler?i:this.storageHandler,r.label=1;case 1:return Date.now()<s?[4,l(30)]:[3,8];case 2:return r.sent(),null!==d.getItemSync(c)?[3,5]:(f=this.id+"-"+t+"-"+n,[4,l(Math.floor(25*Math.random()))]);case 3:return r.sent(),d.setItemSync(c,JSON.stringify({id:this.id,iat:n,timeoutKey:f,timeAcquired:Date.now(),timeRefreshed:Date.now()})),[4,l(30)];case 4:return r.sent(),null!==(p=d.getItemSync(c))&&(h=JSON.parse(p)).id===this.id&&h.iat===n?(this.acquiredIatSet.add(n),this.refreshLockWhileAcquired(c,n),[2,!0]):[3,7];case 5:return e.lockCorrector(void 0===this.storageHandler?i:this.storageHandler),[4,this.waitForSomethingToChange(s)];case 6:r.sent(),r.label=7;case 7:return n=Date.now()+u(4),[3,1];case 8:return[2,!1]}}))}))},e.prototype.refreshLockWhileAcquired=function(e,t){return n(this,void 0,void 0,(function(){var a=this;return r(this,(function(o){return setTimeout((function(){return n(a,void 0,void 0,(function(){var n,a,o;return r(this,(function(r){switch(r.label){case 0:return[4,Ce.default().lock(t)];case 1:return r.sent(),this.acquiredIatSet.has(t)?(n=void 0===this.storageHandler?i:this.storageHandler,null===(a=n.getItemSync(e))?(Ce.default().unlock(t),[2]):((o=JSON.parse(a)).timeRefreshed=Date.now(),n.setItemSync(e,JSON.stringify(o)),Ce.default().unlock(t),this.refreshLockWhileAcquired(e,t),[2])):(Ce.default().unlock(t),[2])}}))}))}),1e3),[2]}))}))},e.prototype.waitForSomethingToChange=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(n){switch(n.label){case 0:return[4,new Promise((function(n){var r=!1,a=Date.now(),o=!1;function i(){if(o||(window.removeEventListener("storage",i),e.removeFromWaiting(i),clearTimeout(l),o=!0),!r){r=!0;var t=50-(Date.now()-a);t>0?setTimeout(n,t):n(null)}}window.addEventListener("storage",i),e.addToWaiting(i);var l=setTimeout(i,Math.max(0,t-Date.now()))}))];case 1:return n.sent(),[2]}}))}))},e.addToWaiting=function(t){this.removeFromWaiting(t),void 0!==e.waiters&&e.waiters.push(t)},e.removeFromWaiting=function(t){void 0!==e.waiters&&(e.waiters=e.waiters.filter((function(e){return e!==t})))},e.notifyWaiters=function(){void 0!==e.waiters&&e.waiters.slice().forEach((function(e){return e()}))},e.prototype.releaseLock=function(e){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.releaseLock__private__(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.releaseLock__private__=function(t){return n(this,void 0,void 0,(function(){var n,a,l,u;return r(this,(function(r){switch(r.label){case 0:return n=void 0===this.storageHandler?i:this.storageHandler,a=o+"-"+t,null===(l=n.getItemSync(a))?[2]:(u=JSON.parse(l)).id!==this.id?[3,2]:[4,Ce.default().lock(u.iat)];case 1:r.sent(),this.acquiredIatSet.delete(u.iat),n.removeItemSync(a),Ce.default().unlock(u.iat),e.notifyWaiters(),r.label=2;case 2:return[2]}}))}))},e.lockCorrector=function(t){for(var n=Date.now()-5e3,r=t,a=[],i=0;;){var l=r.keySync(i);if(null===l)break;a.push(l),i++}for(var u=!1,s=0;s<a.length;s++){var c=a[s];if(c.includes(o)){var d=r.getItemSync(c);if(null!==d){var f=JSON.parse(d);(void 0===f.timeRefreshed&&f.timeAcquired<n||void 0!==f.timeRefreshed&&f.timeRefreshed<n)&&(r.removeItemSync(c),u=!0)}}}u&&e.notifyWaiters()},e.waiters=void 0,e}();t.default=s})));const Te={timeoutInSeconds:60},Ne={name:"auth0-spa-js",version:"2.1.3"},Ie=()=>Date.now();class ze extends Error{constructor(e,t){super(t),this.error=e,this.error_description=t,Object.setPrototypeOf(this,ze.prototype)}static fromPayload({error:e,error_description:t}){return new ze(e,t)}}class Re extends ze{constructor(e,t,n,r=null){super(e,t),this.state=n,this.appState=r,Object.setPrototypeOf(this,Re.prototype)}}class je extends ze{constructor(){super("timeout","Timeout"),Object.setPrototypeOf(this,je.prototype)}}class Le extends je{constructor(e){super(),this.popup=e,Object.setPrototypeOf(this,Le.prototype)}}class De extends ze{constructor(e){super("cancelled","Popup closed"),this.popup=e,Object.setPrototypeOf(this,De.prototype)}}class Me extends ze{constructor(e,t,n){super(e,t),this.mfa_token=n,Object.setPrototypeOf(this,Me.prototype)}}class Ue extends ze{constructor(e,t){super("missing_refresh_token",`Missing Refresh Token (audience: '${Fe(e,["default"])}', scope: '${Fe(t)}')`),this.audience=e,this.scope=t,Object.setPrototypeOf(this,Ue.prototype)}}function Fe(e,t=[]){return e&&!t.includes(e)?e:""}const We=()=>window.crypto,Ae=()=>{let e="";return Array.from(We().getRandomValues(new Uint8Array(43))).forEach((t=>e+="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_~."[t%66])),e},Ve=e=>btoa(e),He=e=>{var{clientId:t}=e,n=Ee(e,["clientId"]);return new URLSearchParams((e=>Object.keys(e).filter((t=>void 0!==e[t])).reduce(((t,n)=>Object.assign(Object.assign({},t),{[n]:e[n]})),{}))(Object.assign({client_id:t},n))).toString()},Be=e=>(e=>decodeURIComponent(atob(e).split("").map((e=>"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2))).join("")))(e.replace(/_/g,"/").replace(/-/g,"+")),$e=async(e,t)=>{const n=await fetch(e,t);return{ok:n.ok,json:await n.json()}},Ke=async(e,t,n,r,a,o,i=1e4)=>a?(async(e,t,n,r,a,o,i)=>{return l={auth:{audience:t,scope:n},timeout:a,fetchUrl:e,fetchOptions:r,useFormData:i},u=o,new Promise((function(e,t){const n=new MessageChannel;n.port1.onmessage=function(r){r.data.error?t(new Error(r.data.error)):e(r.data),n.port1.close()},u.postMessage(l,[n.port2])}));var l,u})(e,t,n,r,i,a,o):(async(e,t,n)=>{const r=new AbortController;let a;return t.signal=r.signal,Promise.race([$e(e,t),new Promise(((e,t)=>{a=setTimeout((()=>{r.abort(),t(new Error("Timeout when executing 'fetch'"))}),n)}))]).finally((()=>{clearTimeout(a)}))})(e,r,i);async function Ze(e,t){var{baseUrl:n,timeout:r,audience:a,scope:o,auth0Client:i,useFormData:l}=e,u=Ee(e,["baseUrl","timeout","audience","scope","auth0Client","useFormData"]);const s=l?He(u):JSON.stringify(u);return await async function(e,t,n,r,a,o,i){let l,u=null;for(let s=0;s<3;s++)try{l=await Ke(e,n,r,a,o,i,t),u=null;break}catch(e){u=e}if(u)throw u;const s=l.json,{error:c,error_description:d}=s,f=Ee(s,["error","error_description"]),{ok:p}=l;if(!p){const t=d||`HTTP error. Unable to fetch ${e}`;if("mfa_required"===c)throw new Me(c,t,f.mfa_token);if("missing_refresh_token"===c)throw new Ue(n,r);throw new ze(c||"request_error",t)}return f}(`${n}/oauth/token`,r,a||"default",o,{method:"POST",body:s,headers:{"Content-Type":l?"application/x-www-form-urlencoded":"application/json","Auth0-Client":btoa(JSON.stringify(i||Ne))}},t,l)}const Xe=(...e)=>{return(t=e.filter(Boolean).join(" ").trim().split(/\s+/),Array.from(new Set(t))).join(" ");var t};class Ge{constructor(e,t="@@auth0spajs@@",n){this.prefix=t,this.suffix=n,this.clientId=e.clientId,this.scope=e.scope,this.audience=e.audience}toKey(){return[this.prefix,this.clientId,this.audience,this.scope,this.suffix].filter(Boolean).join("::")}static fromKey(e){const[t,n,r,a]=e.split("::");return new Ge({clientId:n,scope:a,audience:r},t)}static fromCacheEntry(e){const{scope:t,audience:n,client_id:r}=e;return new Ge({scope:t,audience:n,clientId:r})}}class Ye{set(e,t){localStorage.setItem(e,JSON.stringify(t))}get(e){const t=window.localStorage.getItem(e);if(t)try{return JSON.parse(t)}catch(e){return}}remove(e){localStorage.removeItem(e)}allKeys(){return Object.keys(window.localStorage).filter((e=>e.startsWith("@@auth0spajs@@")))}}class Je{constructor(){this.enclosedCache=function(){let e={};return{set(t,n){e[t]=n},get(t){const n=e[t];if(n)return n},remove(t){delete e[t]},allKeys:()=>Object.keys(e)}}()}}class Qe{constructor(e,t,n){this.cache=e,this.keyManifest=t,this.nowProvider=n||Ie}async setIdToken(e,t,n){var r;const a=this.getIdTokenCacheKey(e);await this.cache.set(a,{id_token:t,decodedToken:n}),await(null===(r=this.keyManifest)||void 0===r?void 0:r.add(a))}async getIdToken(e){const t=await this.cache.get(this.getIdTokenCacheKey(e.clientId));if(!t&&e.scope&&e.audience){const t=await this.get(e);if(!t)return;if(!t.id_token||!t.decodedToken)return;return{id_token:t.id_token,decodedToken:t.decodedToken}}if(t)return{id_token:t.id_token,decodedToken:t.decodedToken}}async get(e,t=0){var n;let r=await this.cache.get(e.toKey());if(!r){const t=await this.getCacheKeys();if(!t)return;const n=this.matchExistingCacheKey(e,t);n&&(r=await this.cache.get(n))}if(!r)return;const a=await this.nowProvider(),o=Math.floor(a/1e3);return r.expiresAt-t<o?r.body.refresh_token?(r.body={refresh_token:r.body.refresh_token},await this.cache.set(e.toKey(),r),r.body):(await this.cache.remove(e.toKey()),void await(null===(n=this.keyManifest)||void 0===n?void 0:n.remove(e.toKey()))):r.body}async set(e){var t;const n=new Ge({clientId:e.client_id,scope:e.scope,audience:e.audience}),r=await this.wrapCacheEntry(e);await this.cache.set(n.toKey(),r),await(null===(t=this.keyManifest)||void 0===t?void 0:t.add(n.toKey()))}async clear(e){var t;const n=await this.getCacheKeys();n&&(await n.filter((t=>!e||t.includes(e))).reduce((async(e,t)=>{await e,await this.cache.remove(t)}),Promise.resolve()),await(null===(t=this.keyManifest)||void 0===t?void 0:t.clear()))}async wrapCacheEntry(e){const t=await this.nowProvider();return{body:e,expiresAt:Math.floor(t/1e3)+e.expires_in}}async getCacheKeys(){var e;return this.keyManifest?null===(e=await this.keyManifest.get())||void 0===e?void 0:e.keys:this.cache.allKeys?this.cache.allKeys():void 0}getIdTokenCacheKey(e){return new Ge({clientId:e},"@@auth0spajs@@","@@user@@").toKey()}matchExistingCacheKey(e,t){return t.filter((t=>{var n;const r=Ge.fromKey(t),a=new Set(r.scope&&r.scope.split(" ")),o=(null===(n=e.scope)||void 0===n?void 0:n.split(" "))||[],i=r.scope&&o.reduce(((e,t)=>e&&a.has(t)),!0);return"@@auth0spajs@@"===r.prefix&&r.clientId===e.clientId&&r.audience===e.audience&&i}))[0]}}class qe{constructor(e,t,n){this.storage=e,this.clientId=t,this.cookieDomain=n,this.storageKey=`a0.spajs.txs.${this.clientId}`}create(e){this.storage.save(this.storageKey,e,{daysUntilExpire:1,cookieDomain:this.cookieDomain})}get(){return this.storage.get(this.storageKey)}remove(){this.storage.remove(this.storageKey,{cookieDomain:this.cookieDomain})}}const et=e=>"number"==typeof e,tt=["iss","aud","exp","nbf","iat","jti","azp","nonce","auth_time","at_hash","c_hash","acr","amr","sub_jwk","cnf","sip_from_tag","sip_date","sip_callid","sip_cseq_num","sip_via_branch","orig","dest","mky","events","toe","txn","rph","sid","vot","vtm"];var nt=Oe((function(e,t){var n=xe&&xe.__assign||function(){return n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},n.apply(this,arguments)};function r(e,t){if(!t)return"";var n="; "+e;return!0===t?n:n+"="+t}function a(e,t,n){return encodeURIComponent(e).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/\(/g,"%28").replace(/\)/g,"%29")+"="+encodeURIComponent(t).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent)+function(e){if("number"==typeof e.expires){var t=new Date;t.setMilliseconds(t.getMilliseconds()+864e5*e.expires),e.expires=t}return r("Expires",e.expires?e.expires.toUTCString():"")+r("Domain",e.domain)+r("Path",e.path)+r("Secure",e.secure)+r("SameSite",e.sameSite)}(n)}function o(e){for(var t={},n=e?e.split("; "):[],r=/(%[\dA-F]{2})+/gi,a=0;a<n.length;a++){var o=n[a].split("="),i=o.slice(1).join("=");'"'===i.charAt(0)&&(i=i.slice(1,-1));try{t[o[0].replace(r,decodeURIComponent)]=i.replace(r,decodeURIComponent)}catch(e){}}return t}function i(){return o(document.cookie)}function l(e,t,r){document.cookie=a(e,t,n({path:"/"},r))}t.__esModule=!0,t.encode=a,t.parse=o,t.getAll=i,t.get=function(e){return i()[e]},t.set=l,t.remove=function(e,t){l(e,"",n(n({},t),{expires:-1}))}}));_e(nt),nt.encode,nt.parse,nt.getAll;var rt=nt.get,at=nt.set,ot=nt.remove;const it={get(e){const t=rt(e);if(void 0!==t)return JSON.parse(t)},save(e,t,n){let r={};"https:"===window.location.protocol&&(r={secure:!0,sameSite:"none"}),(null==n?void 0:n.daysUntilExpire)&&(r.expires=n.daysUntilExpire),(null==n?void 0:n.cookieDomain)&&(r.domain=n.cookieDomain),at(e,JSON.stringify(t),r)},remove(e,t){let n={};(null==t?void 0:t.cookieDomain)&&(n.domain=t.cookieDomain),ot(e,n)}},lt={get:e=>it.get(e)||it.get(`_legacy_${e}`),save(e,t,n){let r={};"https:"===window.location.protocol&&(r={secure:!0}),(null==n?void 0:n.daysUntilExpire)&&(r.expires=n.daysUntilExpire),(null==n?void 0:n.cookieDomain)&&(r.domain=n.cookieDomain),at(`_legacy_${e}`,JSON.stringify(t),r),it.save(e,t,n)},remove(e,t){let n={};(null==t?void 0:t.cookieDomain)&&(n.domain=t.cookieDomain),ot(e,n),it.remove(e,t),it.remove(`_legacy_${e}`,t)}},ut={get(e){if("undefined"==typeof sessionStorage)return;const t=sessionStorage.getItem(e);return null!=t?JSON.parse(t):void 0},save(e,t){sessionStorage.setItem(e,JSON.stringify(t))},remove(e){sessionStorage.removeItem(e)}};var st,ct=function(e){return st=st||function(){var e=function(e){var t=atob(e);return t}("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y2xhc3MgZSBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHQscil7c3VwZXIociksdGhpcy5lcnJvcj10LHRoaXMuZXJyb3JfZGVzY3JpcHRpb249cixPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcyxlLnByb3RvdHlwZSl9c3RhdGljIGZyb21QYXlsb2FkKHtlcnJvcjp0LGVycm9yX2Rlc2NyaXB0aW9uOnJ9KXtyZXR1cm4gbmV3IGUodCxyKX19Y2xhc3MgdCBleHRlbmRzIGV7Y29uc3RydWN0b3IoZSxzKXtzdXBlcigibWlzc2luZ19yZWZyZXNoX3Rva2VuIixgTWlzc2luZyBSZWZyZXNoIFRva2VuIChhdWRpZW5jZTogJyR7cihlLFsiZGVmYXVsdCJdKX0nLCBzY29wZTogJyR7cihzKX0nKWApLHRoaXMuYXVkaWVuY2U9ZSx0aGlzLnNjb3BlPXMsT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsdC5wcm90b3R5cGUpfX1mdW5jdGlvbiByKGUsdD1bXSl7cmV0dXJuIGUmJiF0LmluY2x1ZGVzKGUpP2U6IiJ9ImZ1bmN0aW9uIj09dHlwZW9mIFN1cHByZXNzZWRFcnJvciYmU3VwcHJlc3NlZEVycm9yO2NvbnN0IHM9ZT0+e3ZhcntjbGllbnRJZDp0fT1lLHI9ZnVuY3Rpb24oZSx0KXt2YXIgcj17fTtmb3IodmFyIHMgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxzKSYmdC5pbmRleE9mKHMpPDAmJihyW3NdPWVbc10pO2lmKG51bGwhPWUmJiJmdW5jdGlvbiI9PXR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbz0wO2ZvcihzPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7bzxzLmxlbmd0aDtvKyspdC5pbmRleE9mKHNbb10pPDAmJk9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChlLHNbb10pJiYocltzW29dXT1lW3Nbb11dKX1yZXR1cm4gcn0oZSxbImNsaWVudElkIl0pO3JldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKChlPT5PYmplY3Qua2V5cyhlKS5maWx0ZXIoKHQ9PnZvaWQgMCE9PWVbdF0pKS5yZWR1Y2UoKCh0LHIpPT5PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdCkse1tyXTplW3JdfSkpLHt9KSkoT2JqZWN0LmFzc2lnbih7Y2xpZW50X2lkOnR9LHIpKSkudG9TdHJpbmcoKX07bGV0IG89e307Y29uc3Qgbj0oZSx0KT0+YCR7ZX18JHt0fWA7YWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsKGFzeW5jKHtkYXRhOnt0aW1lb3V0OmUsYXV0aDpyLGZldGNoVXJsOmksZmV0Y2hPcHRpb25zOmMsdXNlRm9ybURhdGE6YX0scG9ydHM6W3BdfSk9PntsZXQgZjtjb25zdHthdWRpZW5jZTp1LHNjb3BlOmx9PXJ8fHt9O3RyeXtjb25zdCByPWE/KGU9Pntjb25zdCB0PW5ldyBVUkxTZWFyY2hQYXJhbXMoZSkscj17fTtyZXR1cm4gdC5mb3JFYWNoKCgoZSx0KT0+e3JbdF09ZX0pKSxyfSkoYy5ib2R5KTpKU09OLnBhcnNlKGMuYm9keSk7aWYoIXIucmVmcmVzaF90b2tlbiYmInJlZnJlc2hfdG9rZW4iPT09ci5ncmFudF90eXBlKXtjb25zdCBlPSgoZSx0KT0+b1tuKGUsdCldKSh1LGwpO2lmKCFlKXRocm93IG5ldyB0KHUsbCk7Yy5ib2R5PWE/cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30scikse3JlZnJlc2hfdG9rZW46ZX0pKTpKU09OLnN0cmluZ2lmeShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30scikse3JlZnJlc2hfdG9rZW46ZX0pKX1sZXQgaCxnOyJmdW5jdGlvbiI9PXR5cGVvZiBBYm9ydENvbnRyb2xsZXImJihoPW5ldyBBYm9ydENvbnRyb2xsZXIsYy5zaWduYWw9aC5zaWduYWwpO3RyeXtnPWF3YWl0IFByb21pc2UucmFjZShbKGQ9ZSxuZXcgUHJvbWlzZSgoZT0+c2V0VGltZW91dChlLGQpKSkpLGZldGNoKGksT2JqZWN0LmFzc2lnbih7fSxjKSldKX1jYXRjaChlKXtyZXR1cm4gdm9pZCBwLnBvc3RNZXNzYWdlKHtlcnJvcjplLm1lc3NhZ2V9KX1pZighZylyZXR1cm4gaCYmaC5hYm9ydCgpLHZvaWQgcC5wb3N0TWVzc2FnZSh7ZXJyb3I6IlRpbWVvdXQgd2hlbiBleGVjdXRpbmcgJ2ZldGNoJyJ9KTtmPWF3YWl0IGcuanNvbigpLGYucmVmcmVzaF90b2tlbj8oKChlLHQscik9PntvW24odCxyKV09ZX0pKGYucmVmcmVzaF90b2tlbix1LGwpLGRlbGV0ZSBmLnJlZnJlc2hfdG9rZW4pOigoZSx0KT0+e2RlbGV0ZSBvW24oZSx0KV19KSh1LGwpLHAucG9zdE1lc3NhZ2Uoe29rOmcub2ssanNvbjpmfSl9Y2F0Y2goZSl7cC5wb3N0TWVzc2FnZSh7b2s6ITEsanNvbjp7ZXJyb3I6ZS5lcnJvcixlcnJvcl9kZXNjcmlwdGlvbjplLm1lc3NhZ2V9fSl9dmFyIGR9KSl9KCk7Cgo="),t=e.indexOf("\n",10)+1,n=e.substring(t)+"",r=new Blob([n],{type:"application/javascript"});return URL.createObjectURL(r)}(),new Worker(st,e)};const dt={};class ft{constructor(e,t){this.cache=e,this.clientId=t,this.manifestKey=this.createManifestKeyFrom(this.clientId)}async add(e){var t;const n=new Set((null===(t=await this.cache.get(this.manifestKey))||void 0===t?void 0:t.keys)||[]);n.add(e),await this.cache.set(this.manifestKey,{keys:[...n]})}async remove(e){const t=await this.cache.get(this.manifestKey);if(t){const n=new Set(t.keys);return n.delete(e),n.size>0?await this.cache.set(this.manifestKey,{keys:[...n]}):await this.cache.remove(this.manifestKey)}}get(){return this.cache.get(this.manifestKey)}clear(){return this.cache.remove(this.manifestKey)}createManifestKeyFrom(e){return`@@auth0spajs@@::${e}`}}const pt={memory:()=>(new Je).enclosedCache,localstorage:()=>new Ye},ht=e=>pt[e],mt=e=>{const{openUrl:t,onRedirect:n}=e,r=Ee(e,["openUrl","onRedirect"]);return Object.assign(Object.assign({},r),{openUrl:!1===t||t?t:n})},gt=new Pe;class vt{constructor(e){let t,n;if(this.userCache=(new Je).enclosedCache,this.defaultOptions={authorizationParams:{scope:"openid profile email"},useRefreshTokensFallback:!1,useFormData:!0},this._releaseLockOnPageHide=async()=>{await gt.releaseLock("auth0.lock.getTokenSilently"),window.removeEventListener("pagehide",this._releaseLockOnPageHide)},this.options=Object.assign(Object.assign(Object.assign({},this.defaultOptions),e),{authorizationParams:Object.assign(Object.assign({},this.defaultOptions.authorizationParams),e.authorizationParams)}),"undefined"!=typeof window&&(()=>{if(!We())throw new Error("For security reasons, `window.crypto` is required to run `auth0-spa-js`.");if(void 0===We().subtle)throw new Error("\n      auth0-spa-js must run on a secure origin. See https://github.com/auth0/auth0-spa-js/blob/main/FAQ.md#why-do-i-get-auth0-spa-js-must-run-on-a-secure-origin for more information.\n    ")})(),e.cache&&e.cacheLocation&&console.warn("Both `cache` and `cacheLocation` options have been specified in the Auth0Client configuration; ignoring `cacheLocation` and using `cache`."),e.cache)n=e.cache;else{if(t=e.cacheLocation||"memory",!ht(t))throw new Error(`Invalid cache location "${t}"`);n=ht(t)()}this.httpTimeoutMs=e.httpTimeoutInSeconds?1e3*e.httpTimeoutInSeconds:1e4,this.cookieStorage=!1===e.legacySameSiteCookie?it:lt,this.orgHintCookieName=`auth0.${this.options.clientId}.organization_hint`,this.isAuthenticatedCookieName=(()=>`auth0.${this.options.clientId}.is.authenticated`)(),this.sessionCheckExpiryDays=e.sessionCheckExpiryDays||1;const r=e.useCookiesForTransactions?this.cookieStorage:ut;var a;this.scope=Xe("openid",this.options.authorizationParams.scope,this.options.useRefreshTokens?"offline_access":""),this.transactionManager=new qe(r,this.options.clientId,this.options.cookieDomain),this.nowProvider=this.options.nowProvider||Ie,this.cacheManager=new Qe(n,n.allKeys?void 0:new ft(n,this.options.clientId),this.nowProvider),this.domainUrl=(a=this.options.domain,/^https?:\/\//.test(a)?a:`https://${a}`),this.tokenIssuer=((e,t)=>e?e.startsWith("https://")?e:`https://${e}/`:`${t}/`)(this.options.issuer,this.domainUrl),"undefined"!=typeof window&&window.Worker&&this.options.useRefreshTokens&&"memory"===t&&(this.options.workerUrl?this.worker=new Worker(this.options.workerUrl):this.worker=new ct)}_url(e){const t=encodeURIComponent(btoa(JSON.stringify(this.options.auth0Client||Ne)));return`${this.domainUrl}${e}&auth0Client=${t}`}_authorizeUrl(e){return this._url(`/authorize?${He(e)}`)}async _verifyIdToken(e,t,n){const r=await this.nowProvider();return(e=>{if(!e.id_token)throw new Error("ID token is required but missing");const t=(e=>{const t=e.split("."),[n,r,a]=t;if(3!==t.length||!n||!r||!a)throw new Error("ID token could not be decoded");const o=JSON.parse(Be(r)),i={__raw:e},l={};return Object.keys(o).forEach((e=>{i[e]=o[e],tt.includes(e)||(l[e]=o[e])})),{encoded:{header:n,payload:r,signature:a},header:JSON.parse(Be(n)),claims:i,user:l}})(e.id_token);if(!t.claims.iss)throw new Error("Issuer (iss) claim must be a string present in the ID token");if(t.claims.iss!==e.iss)throw new Error(`Issuer (iss) claim mismatch in the ID token; expected "${e.iss}", found "${t.claims.iss}"`);if(!t.user.sub)throw new Error("Subject (sub) claim must be a string present in the ID token");if("RS256"!==t.header.alg)throw new Error(`Signature algorithm of "${t.header.alg}" is not supported. Expected the ID token to be signed with "RS256".`);if(!t.claims.aud||"string"!=typeof t.claims.aud&&!Array.isArray(t.claims.aud))throw new Error("Audience (aud) claim must be a string or array of strings present in the ID token");if(Array.isArray(t.claims.aud)){if(!t.claims.aud.includes(e.aud))throw new Error(`Audience (aud) claim mismatch in the ID token; expected "${e.aud}" but was not one of "${t.claims.aud.join(", ")}"`);if(t.claims.aud.length>1){if(!t.claims.azp)throw new Error("Authorized Party (azp) claim must be a string present in the ID token when Audience (aud) claim has multiple values");if(t.claims.azp!==e.aud)throw new Error(`Authorized Party (azp) claim mismatch in the ID token; expected "${e.aud}", found "${t.claims.azp}"`)}}else if(t.claims.aud!==e.aud)throw new Error(`Audience (aud) claim mismatch in the ID token; expected "${e.aud}" but found "${t.claims.aud}"`);if(e.nonce){if(!t.claims.nonce)throw new Error("Nonce (nonce) claim must be a string present in the ID token");if(t.claims.nonce!==e.nonce)throw new Error(`Nonce (nonce) claim mismatch in the ID token; expected "${e.nonce}", found "${t.claims.nonce}"`)}if(e.max_age&&!et(t.claims.auth_time))throw new Error("Authentication Time (auth_time) claim must be a number present in the ID token when Max Age (max_age) is specified");if(null==t.claims.exp||!et(t.claims.exp))throw new Error("Expiration Time (exp) claim must be a number present in the ID token");if(!et(t.claims.iat))throw new Error("Issued At (iat) claim must be a number present in the ID token");const n=e.leeway||60,r=new Date(e.now||Date.now()),a=new Date(0);if(a.setUTCSeconds(t.claims.exp+n),r>a)throw new Error(`Expiration Time (exp) claim error in the ID token; current time (${r}) is after expiration time (${a})`);if(null!=t.claims.nbf&&et(t.claims.nbf)){const e=new Date(0);if(e.setUTCSeconds(t.claims.nbf-n),r<e)throw new Error(`Not Before time (nbf) claim in the ID token indicates that this token can't be used just yet. Current time (${r}) is before ${e}`)}if(null!=t.claims.auth_time&&et(t.claims.auth_time)){const a=new Date(0);if(a.setUTCSeconds(parseInt(t.claims.auth_time)+e.max_age+n),r>a)throw new Error(`Authentication Time (auth_time) claim in the ID token indicates that too much time has passed since the last end-user authentication. Current time (${r}) is after last auth at ${a}`)}if(e.organization){const n=e.organization.trim();if(n.startsWith("org_")){const e=n;if(!t.claims.org_id)throw new Error("Organization ID (org_id) claim must be a string present in the ID token");if(e!==t.claims.org_id)throw new Error(`Organization ID (org_id) claim mismatch in the ID token; expected "${e}", found "${t.claims.org_id}"`)}else{const e=n.toLowerCase();if(!t.claims.org_name)throw new Error("Organization Name (org_name) claim must be a string present in the ID token");if(e!==t.claims.org_name)throw new Error(`Organization Name (org_name) claim mismatch in the ID token; expected "${e}", found "${t.claims.org_name}"`)}}return t})({iss:this.tokenIssuer,aud:this.options.clientId,id_token:e,nonce:t,organization:n,leeway:this.options.leeway,max_age:(a=this.options.authorizationParams.max_age,"string"!=typeof a?a:parseInt(a,10)||void 0),now:r});var a}_processOrgHint(e){e?this.cookieStorage.save(this.orgHintCookieName,e,{daysUntilExpire:this.sessionCheckExpiryDays,cookieDomain:this.options.cookieDomain}):this.cookieStorage.remove(this.orgHintCookieName,{cookieDomain:this.options.cookieDomain})}async _prepareAuthorizeUrl(e,t,n){const r=Ve(Ae()),a=Ve(Ae()),o=Ae(),i=(e=>{const t=new Uint8Array(e);return(e=>{const t={"+":"-","/":"_","=":""};return e.replace(/[+/=]/g,(e=>t[e]))})(window.btoa(String.fromCharCode(...Array.from(t))))})(await(async e=>{const t=We().subtle.digest({name:"SHA-256"},(new TextEncoder).encode(e));return await t})(o)),l=((e,t,n,r,a,o,i,l)=>Object.assign(Object.assign(Object.assign({client_id:e.clientId},e.authorizationParams),n),{scope:Xe(t,n.scope),response_type:"code",response_mode:l||"query",state:r,nonce:a,redirect_uri:i||e.authorizationParams.redirect_uri,code_challenge:o,code_challenge_method:"S256"}))(this.options,this.scope,e,r,a,i,e.redirect_uri||this.options.authorizationParams.redirect_uri||n,null==t?void 0:t.response_mode),u=this._authorizeUrl(l);return{nonce:a,code_verifier:o,scope:l.scope,audience:l.audience||"default",redirect_uri:l.redirect_uri,state:r,url:u}}async loginWithPopup(e,t){var n;if(e=e||{},!(t=t||{}).popup&&(t.popup=(()=>{const e=window.screenX+(window.innerWidth-400)/2,t=window.screenY+(window.innerHeight-600)/2;return window.open("","auth0:authorize:popup",`left=${e},top=${t},width=400,height=600,resizable,scrollbars=yes,status=1`)})(),!t.popup))throw new Error("Unable to open a popup for loginWithPopup - window.open returned `null`");const r=await this._prepareAuthorizeUrl(e.authorizationParams||{},{response_mode:"web_message"},window.location.origin);t.popup.location.href=r.url;const a=await(e=>new Promise(((t,n)=>{let r;const a=setInterval((()=>{e.popup&&e.popup.closed&&(clearInterval(a),clearTimeout(o),window.removeEventListener("message",r,!1),n(new De(e.popup)))}),1e3),o=setTimeout((()=>{clearInterval(a),n(new Le(e.popup)),window.removeEventListener("message",r,!1)}),1e3*(e.timeoutInSeconds||60));r=function(i){if(i.data&&"authorization_response"===i.data.type){if(clearTimeout(o),clearInterval(a),window.removeEventListener("message",r,!1),e.popup.close(),i.data.response.error)return n(ze.fromPayload(i.data.response));t(i.data.response)}},window.addEventListener("message",r)})))(Object.assign(Object.assign({},t),{timeoutInSeconds:t.timeoutInSeconds||this.options.authorizeTimeoutInSeconds||60}));if(r.state!==a.state)throw new ze("state_mismatch","Invalid state");const o=(null===(n=e.authorizationParams)||void 0===n?void 0:n.organization)||this.options.authorizationParams.organization;await this._requestToken({audience:r.audience,scope:r.scope,code_verifier:r.code_verifier,grant_type:"authorization_code",code:a.code,redirect_uri:r.redirect_uri},{nonceIn:r.nonce,organization:o})}async getUser(){var e;const t=await this._getIdTokenFromCache();return null===(e=null==t?void 0:t.decodedToken)||void 0===e?void 0:e.user}async getIdTokenClaims(){var e;const t=await this._getIdTokenFromCache();return null===(e=null==t?void 0:t.decodedToken)||void 0===e?void 0:e.claims}async loginWithRedirect(e={}){var t;const n=mt(e),{openUrl:r,fragment:a,appState:o}=n,i=Ee(n,["openUrl","fragment","appState"]),l=(null===(t=i.authorizationParams)||void 0===t?void 0:t.organization)||this.options.authorizationParams.organization,u=await this._prepareAuthorizeUrl(i.authorizationParams||{}),{url:s}=u,c=Ee(u,["url"]);this.transactionManager.create(Object.assign(Object.assign(Object.assign({},c),{appState:o}),l&&{organization:l}));const d=a?`${s}#${a}`:s;r?await r(d):window.location.assign(d)}async handleRedirectCallback(e=window.location.href){const t=e.split("?").slice(1);if(0===t.length)throw new Error("There are no query params available for parsing.");const{state:n,code:r,error:a,error_description:o}=(e=>{e.indexOf("#")>-1&&(e=e.substring(0,e.indexOf("#")));const t=new URLSearchParams(e);return{state:t.get("state"),code:t.get("code")||void 0,error:t.get("error")||void 0,error_description:t.get("error_description")||void 0}})(t.join("")),i=this.transactionManager.get();if(!i)throw new ze("missing_transaction","Invalid state");if(this.transactionManager.remove(),a)throw new Re(a,o||a,n,i.appState);if(!i.code_verifier||i.state&&i.state!==n)throw new ze("state_mismatch","Invalid state");const l=i.organization,u=i.nonce,s=i.redirect_uri;return await this._requestToken(Object.assign({audience:i.audience,scope:i.scope,code_verifier:i.code_verifier,grant_type:"authorization_code",code:r},s?{redirect_uri:s}:{}),{nonceIn:u,organization:l}),{appState:i.appState}}async checkSession(e){if(!this.cookieStorage.get(this.isAuthenticatedCookieName)){if(!this.cookieStorage.get("auth0.is.authenticated"))return;this.cookieStorage.save(this.isAuthenticatedCookieName,!0,{daysUntilExpire:this.sessionCheckExpiryDays,cookieDomain:this.options.cookieDomain}),this.cookieStorage.remove("auth0.is.authenticated")}try{await this.getTokenSilently(e)}catch(e){}}async getTokenSilently(e={}){var t;const n=Object.assign(Object.assign({cacheMode:"on"},e),{authorizationParams:Object.assign(Object.assign(Object.assign({},this.options.authorizationParams),e.authorizationParams),{scope:Xe(this.scope,null===(t=e.authorizationParams)||void 0===t?void 0:t.scope)})}),r=await((e,t)=>{let n=dt[t];return n||(n=e().finally((()=>{delete dt[t],n=null})),dt[t]=n),n})((()=>this._getTokenSilently(n)),`${this.options.clientId}::${n.authorizationParams.audience}::${n.authorizationParams.scope}`);return e.detailedResponse?r:null==r?void 0:r.access_token}async _getTokenSilently(e){const{cacheMode:t}=e,n=Ee(e,["cacheMode"]);if("off"!==t){const e=await this._getEntryFromCache({scope:n.authorizationParams.scope,audience:n.authorizationParams.audience||"default",clientId:this.options.clientId});if(e)return e}if("cache-only"!==t){if(!await(async(e,t=3)=>{for(let n=0;n<t;n++)if(await e())return!0;return!1})((()=>gt.acquireLock("auth0.lock.getTokenSilently",5e3)),10))throw new je;try{if(window.addEventListener("pagehide",this._releaseLockOnPageHide),"off"!==t){const e=await this._getEntryFromCache({scope:n.authorizationParams.scope,audience:n.authorizationParams.audience||"default",clientId:this.options.clientId});if(e)return e}const e=this.options.useRefreshTokens?await this._getTokenUsingRefreshToken(n):await this._getTokenFromIFrame(n),{id_token:r,access_token:a,oauthTokenScope:o,expires_in:i}=e;return Object.assign(Object.assign({id_token:r,access_token:a},o?{scope:o}:null),{expires_in:i})}finally{await gt.releaseLock("auth0.lock.getTokenSilently"),window.removeEventListener("pagehide",this._releaseLockOnPageHide)}}}async getTokenWithPopup(e={},t={}){var n;const r=Object.assign(Object.assign({},e),{authorizationParams:Object.assign(Object.assign(Object.assign({},this.options.authorizationParams),e.authorizationParams),{scope:Xe(this.scope,null===(n=e.authorizationParams)||void 0===n?void 0:n.scope)})});return t=Object.assign(Object.assign({},Te),t),await this.loginWithPopup(r,t),(await this.cacheManager.get(new Ge({scope:r.authorizationParams.scope,audience:r.authorizationParams.audience||"default",clientId:this.options.clientId}))).access_token}async isAuthenticated(){return!!await this.getUser()}_buildLogoutUrl(e){null!==e.clientId?e.clientId=e.clientId||this.options.clientId:delete e.clientId;const t=e.logoutParams||{},{federated:n}=t,r=Ee(t,["federated"]),a=n?"&federated":"";return this._url(`/v2/logout?${He(Object.assign({clientId:e.clientId},r))}`)+a}async logout(e={}){const t=mt(e),{openUrl:n}=t,r=Ee(t,["openUrl"]);null===e.clientId?await this.cacheManager.clear():await this.cacheManager.clear(e.clientId||this.options.clientId),this.cookieStorage.remove(this.orgHintCookieName,{cookieDomain:this.options.cookieDomain}),this.cookieStorage.remove(this.isAuthenticatedCookieName,{cookieDomain:this.options.cookieDomain}),this.userCache.remove("@@user@@");const a=this._buildLogoutUrl(r);n?await n(a):!1!==n&&window.location.assign(a)}async _getTokenFromIFrame(e){const t=Object.assign(Object.assign({},e.authorizationParams),{prompt:"none"}),n=this.cookieStorage.get(this.orgHintCookieName);n&&!t.organization&&(t.organization=n);const{url:r,state:a,nonce:o,code_verifier:i,redirect_uri:l,scope:u,audience:s}=await this._prepareAuthorizeUrl(t,{response_mode:"web_message"},window.location.origin);try{if(window.crossOriginIsolated)throw new ze("login_required","The application is running in a Cross-Origin Isolated context, silently retrieving a token without refresh token is not possible.");const n=e.timeoutInSeconds||this.options.authorizeTimeoutInSeconds,c=await((e,t,n=60)=>new Promise(((r,a)=>{const o=window.document.createElement("iframe");o.setAttribute("width","0"),o.setAttribute("height","0"),o.style.display="none";const i=()=>{window.document.body.contains(o)&&(window.document.body.removeChild(o),window.removeEventListener("message",l,!1))};let l;const u=setTimeout((()=>{a(new je),i()}),1e3*n);l=function(e){if(e.origin!=t)return;if(!e.data||"authorization_response"!==e.data.type)return;const n=e.source;n&&n.close(),e.data.response.error?a(ze.fromPayload(e.data.response)):r(e.data.response),clearTimeout(u),window.removeEventListener("message",l,!1),setTimeout(i,2e3)},window.addEventListener("message",l,!1),window.document.body.appendChild(o),o.setAttribute("src",e)})))(r,this.domainUrl,n);if(a!==c.state)throw new ze("state_mismatch","Invalid state");const d=await this._requestToken(Object.assign(Object.assign({},e.authorizationParams),{code_verifier:i,code:c.code,grant_type:"authorization_code",redirect_uri:l,timeout:e.authorizationParams.timeout||this.httpTimeoutMs}),{nonceIn:o,organization:t.organization});return Object.assign(Object.assign({},d),{scope:u,oauthTokenScope:d.scope,audience:s})}catch(e){throw"login_required"===e.error&&this.logout({openUrl:!1}),e}}async _getTokenUsingRefreshToken(e){const t=await this.cacheManager.get(new Ge({scope:e.authorizationParams.scope,audience:e.authorizationParams.audience||"default",clientId:this.options.clientId}));if(!(t&&t.refresh_token||this.worker)){if(this.options.useRefreshTokensFallback)return await this._getTokenFromIFrame(e);throw new Ue(e.authorizationParams.audience||"default",e.authorizationParams.scope)}const n=e.authorizationParams.redirect_uri||this.options.authorizationParams.redirect_uri||window.location.origin,r="number"==typeof e.timeoutInSeconds?1e3*e.timeoutInSeconds:null;try{const a=await this._requestToken(Object.assign(Object.assign(Object.assign({},e.authorizationParams),{grant_type:"refresh_token",refresh_token:t&&t.refresh_token,redirect_uri:n}),r&&{timeout:r}));return Object.assign(Object.assign({},a),{scope:e.authorizationParams.scope,oauthTokenScope:a.scope,audience:e.authorizationParams.audience||"default"})}catch(t){if((t.message.indexOf("Missing Refresh Token")>-1||t.message&&t.message.indexOf("invalid refresh token")>-1)&&this.options.useRefreshTokensFallback)return await this._getTokenFromIFrame(e);throw t}}async _saveEntryInCache(e){const{id_token:t,decodedToken:n}=e,r=Ee(e,["id_token","decodedToken"]);this.userCache.set("@@user@@",{id_token:t,decodedToken:n}),await this.cacheManager.setIdToken(this.options.clientId,e.id_token,e.decodedToken),await this.cacheManager.set(r)}async _getIdTokenFromCache(){const e=this.options.authorizationParams.audience||"default",t=await this.cacheManager.getIdToken(new Ge({clientId:this.options.clientId,audience:e,scope:this.scope})),n=this.userCache.get("@@user@@");return t&&t.id_token===(null==n?void 0:n.id_token)?n:(this.userCache.set("@@user@@",t),t)}async _getEntryFromCache({scope:e,audience:t,clientId:n}){const r=await this.cacheManager.get(new Ge({scope:e,audience:t,clientId:n}),60);if(r&&r.access_token){const{access_token:e,oauthTokenScope:t,expires_in:n}=r,a=await this._getIdTokenFromCache();return a&&Object.assign(Object.assign({id_token:a.id_token,access_token:e},t?{scope:t}:null),{expires_in:n})}}async _requestToken(e,t){const{nonceIn:n,organization:r}=t||{},a=await Ze(Object.assign({baseUrl:this.domainUrl,client_id:this.options.clientId,auth0Client:this.options.auth0Client,useFormData:this.options.useFormData,timeout:this.httpTimeoutMs},e),this.worker),o=await this._verifyIdToken(a.id_token,n,r);return await this._saveEntryInCache(Object.assign(Object.assign(Object.assign(Object.assign({},a),{decodedToken:o,scope:e.scope,audience:e.audience||"default"}),a.scope?{oauthTokenScope:a.scope}:null),{client_id:this.options.clientId})),this.cookieStorage.save(this.isAuthenticatedCookieName,!0,{daysUntilExpire:this.sessionCheckExpiryDays,cookieDomain:this.options.cookieDomain}),this._processOrgHint(r||o.claims.org_id),Object.assign(Object.assign({},a),{decodedToken:o})}}var yt={isAuthenticated:!1,isLoading:!0},bt=function(){throw new Error("You forgot to wrap your component in <Auth0Provider>.")},wt=we(we({},yt),{buildAuthorizeUrl:bt,buildLogoutUrl:bt,getAccessTokenSilently:bt,getAccessTokenWithPopup:bt,getIdTokenClaims:bt,loginWithRedirect:bt,loginWithPopup:bt,logout:bt,handleRedirectCallback:bt}),kt=(0,t.createContext)(wt),St=function(e){function t(n,r){var a=e.call(this,r||n)||this;return a.error=n,a.error_description=r,Object.setPrototypeOf(a,t.prototype),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}be(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(t,e),t}(Error),Et=/[?&]code=[^&]+/,xt=/[?&]state=[^&]+/,_t=/[?&]error=[^&]+/,Ot=function(e){return function(t){return t instanceof Error?t:null!==t&&"object"==typeof t&&"error"in t&&"string"==typeof t.error?"error_description"in t&&"string"==typeof t.error_description?new St(t.error,t.error_description):new St(t.error):new Error(e)}},Ct=Ot("Login failed"),Pt=Ot("Get access token failed"),Tt=function(e){var t;(null==e?void 0:e.redirectUri)&&(console.warn("Using `redirectUri` has been deprecated, please use `authorizationParams.redirect_uri` instead as `redirectUri` will be no longer supported in a future version"),e.authorizationParams=e.authorizationParams||{},e.authorizationParams.redirect_uri=e.redirectUri,delete e.redirectUri),(null===(t=null==e?void 0:e.authorizationParams)||void 0===t?void 0:t.redirectUri)&&(console.warn("Using `authorizationParams.redirectUri` has been deprecated, please use `authorizationParams.redirect_uri` instead as `authorizationParams.redirectUri` will be removed in a future version"),e.authorizationParams.redirect_uri=e.authorizationParams.redirectUri,delete e.authorizationParams.redirectUri)},Nt=function(e,t){switch(t.type){case"LOGIN_POPUP_STARTED":return we(we({},e),{isLoading:!0});case"LOGIN_POPUP_COMPLETE":case"INITIALISED":return we(we({},e),{isAuthenticated:!!t.user,user:t.user,isLoading:!1,error:void 0});case"HANDLE_REDIRECT_COMPLETE":case"GET_ACCESS_TOKEN_COMPLETE":return e.user===t.user?e:we(we({},e),{isAuthenticated:!!t.user,user:t.user});case"LOGOUT":return we(we({},e),{isAuthenticated:!1,user:void 0});case"ERROR":return we(we({},e),{isLoading:!1,error:t.error})}},It=function(e){window.history.replaceState({},document.title,(null==e?void 0:e.returnTo)||window.location.pathname)};const zt=()=>{const[e,n]=(0,t.useState)();return(0,t.useEffect)((()=>{(async()=>{await(async()=>(console.log("In GetWeatherForecastAsync"),await fetch("/api/WeatherForecast",{method:"GET",headers:{"Content-Type":"application/json"}}).then((e=>e.json())).catch((e=>console.log(e)))))().then((async e=>{n(e),console.log(e)}))})()}),[]),t.createElement(t.Fragment,null,t.createElement("p",null," Weather Forecast Component Fired!"),e?.map(((e,n)=>t.createElement("div",{key:n},t.createElement("p",null,"TempC: ",e?.temperatureC),t.createElement("p",null,"TempF: ",e?.temperatureF),t.createElement("p",null,"Summary: ",e?.summary)))))};class Rt extends t.Component{static displayName=Rt.name;user;constructor(e){super(e),this.user=this.props.auth0.user}render(){return t.createElement(t.Fragment,null,t.createElement(zt,null))}}const jt=(Lt=Rt,void 0===Dt&&(Dt=kt),function(e){return t.createElement(Dt.Consumer,null,(function(n){return t.createElement(Lt,we({},e,{auth0:n}))}))});var Lt,Dt,Mt=a(556),Ut=a.n(Mt),Ft=a(942),Wt=a.n(Ft);function At(e){return At="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},At(e)}function Vt(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:undefined;return t?e.split(" ").map((function(e){return t[e]||e})).join(" "):e}var Ht="object"===("undefined"==typeof window?"undefined":At(window))&&window.Element||function(){};Ut().oneOfType([Ut().string,Ut().func,function(e,t,n){if(!(e[t]instanceof Ht))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`. Expected prop to be an instance of Element. Validation failed.")},Ut().shape({current:Ut().any})]);var Bt=Ut().oneOfType([Ut().func,Ut().string,Ut().shape({$$typeof:Ut().symbol,render:Ut().func}),Ut().arrayOf(Ut().oneOfType([Ut().func,Ut().string,Ut().shape({$$typeof:Ut().symbol,render:Ut().func})]))]),$t=["in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","onEnter","onEntering","onEntered","onExit","onExiting","onExited"];"undefined"==typeof window||!window.document||window.document.createElement;var Kt=["className","cssModule","fluid","tag"];function Zt(){return Zt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Zt.apply(this,arguments)}var Xt={tag:Bt,fluid:Ut().oneOfType([Ut().bool,Ut().string]),className:Ut().string,cssModule:Ut().object};function Gt(e){var n=e.className,r=e.cssModule,a=e.fluid,o=e.tag,i=void 0===o?"div":o,l=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,Kt),u="container";!0===a?u="container-fluid":a&&(u="container-".concat(a));var s=Vt(Wt()(n,u),r);return t.createElement(i,Zt({},l,{className:s}))}Gt.propTypes=Xt;const Yt=Gt;var Jt=["expand","className","cssModule","light","dark","fixed","sticky","color","container","tag","children"];function Qt(){return Qt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Qt.apply(this,arguments)}function qt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var en={children:Ut().node,className:Ut().string,color:Ut().string,container:Ut().oneOfType([Ut().bool,Ut().string]),cssModule:Ut().object,dark:Ut().bool,expand:Ut().oneOfType([Ut().bool,Ut().string]),fixed:Ut().string,light:Ut().bool,role:Ut().string,sticky:Ut().string,tag:Bt};function tn(e){var n,r=e.expand,a=void 0!==r&&r,o=e.className,i=e.cssModule,l=e.light,u=e.dark,s=e.fixed,c=e.sticky,d=e.color,f=e.container,p=void 0===f?"fluid":f,h=e.tag,m=void 0===h?"nav":h,g=e.children,v=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,Jt),y=Vt(Wt()(o,"navbar",function(e){return!1!==e&&(!0===e||"xs"===e?"navbar-expand":"navbar-expand-".concat(e))}(a),(qt(n={"navbar-light":l,"navbar-dark":u},"bg-".concat(d),d),qt(n,"fixed-".concat(s),s),qt(n,"sticky-".concat(c),c),n)),i),b=p&&!0===p?"container":"container-".concat(p);return t.createElement(m,Qt({},v,{className:y}),p?t.createElement("div",{className:b},g):g)}tn.propTypes=en;const nn=tn;var rn=["className","cssModule","tag"];function an(){return an=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},an.apply(this,arguments)}var on={className:Ut().string,cssModule:Ut().object,tag:Bt};function ln(e){var n=e.className,r=e.cssModule,a=e.tag,o=void 0===a?"a":a,i=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,rn),l=Vt(Wt()(n,"navbar-brand"),r);return t.createElement(o,an({},i,{className:l}))}ln.propTypes=on;const un=ln;var sn=["className","cssModule","children","tag"];function cn(){return cn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},cn.apply(this,arguments)}function dn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var pn={className:Ut().string,cssModule:Ut().object,tag:Bt,type:Ut().string,children:Ut().node};function hn(e){var n=e.className,r=e.cssModule,a=e.children,o=e.tag,i=void 0===o?"button":o,l=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,sn),u=Vt(Wt()(n,"navbar-toggler"),r);return t.createElement(i,cn({"aria-label":"Toggle navigation"},function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dn(Object(n),!0).forEach((function(t){fn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({type:"button"},l),{className:u}),a||t.createElement("span",{className:Vt("navbar-toggler-icon",r)}))}hn.propTypes=pn;const mn=hn;function gn(e,t){return gn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},gn(e,t)}const vn=t.createContext(null);var yn="unmounted",bn="exited",wn="entering",kn="entered",Sn="exiting",En=function(e){function n(t,n){var r;r=e.call(this,t,n)||this;var a,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(a=bn,r.appearStatus=wn):a=kn:a=t.unmountOnExit||t.mountOnEnter?yn:bn,r.state={status:a},r.nextCallback=null,r}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,gn(e,t)}(n,e),n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===yn?{status:bn}:null};var r=n.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==wn&&n!==kn&&(t=wn):n!==wn&&n!==kn||(t=Sn)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===wn){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:o.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===bn&&this.setState({status:yn})},r.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,a=this.props.nodeRef?[r]:[o.findDOMNode(this),r],i=a[0],l=a[1],u=this.getTimeouts(),s=r?u.appear:u.enter;e||n?(this.props.onEnter(i,l),this.safeSetState({status:wn},(function(){t.props.onEntering(i,l),t.onTransitionEnd(s,(function(){t.safeSetState({status:kn},(function(){t.props.onEntered(i,l)}))}))}))):this.safeSetState({status:kn},(function(){t.props.onEntered(i)}))},r.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:o.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:Sn},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:bn},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:bn},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:o.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var a=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],i=a[0],l=a[1];this.props.addEndListener(i,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var e=this.state.status;if(e===yn)return null;var n=this.props,r=n.children,a=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,function(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(t.includes(r))continue;n[r]=e[r]}return n}(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return t.createElement(vn.Provider,{value:null},"function"==typeof r?r(e,a):t.cloneElement(t.Children.only(r),a))},n}(t.Component);function xn(){}En.contextType=vn,En.propTypes={},En.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:xn,onEntering:xn,onEntered:xn,onExit:xn,onExiting:xn,onExited:xn},En.UNMOUNTED=yn,En.EXITED=bn,En.ENTERING=wn,En.ENTERED=kn,En.EXITING=Sn;const _n=En;function On(e){return On="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},On(e)}var Cn,Pn=["tag","horizontal","isOpen","className","navbar","cssModule","children","innerRef"];function Tn(){return Tn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Tn.apply(this,arguments)}function Nn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function In(e,t){return In=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},In(e,t)}function zn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Rn(e){return Rn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Rn(e)}function jn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ln(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jn(Object(n),!0).forEach((function(t){Dn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Dn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Mn=Ln(Ln({},_n.propTypes),{},{horizontal:Ut().bool,isOpen:Ut().bool,children:Ut().oneOfType([Ut().arrayOf(Ut().node),Ut().node]),tag:Bt,className:Ut().node,navbar:Ut().bool,cssModule:Ut().object,innerRef:Ut().shape({current:Ut().object})}),Un=Ln(Ln({},_n.defaultProps),{},{horizontal:!1,isOpen:!1,appear:!1,enter:!0,exit:!0,tag:"div",timeout:350}),Fn=(Dn(Cn={},"entering","collapsing"),Dn(Cn,"entered","collapse show"),Dn(Cn,"exiting","collapsing"),Dn(Cn,"exited","collapse"),Cn),Wn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&In(e,t)}(l,e);var n,r,a,o,i=(a=l,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Rn(a);if(o){var n=Rn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===On(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return zn(e)}(this,e)});function l(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(n=i.call(this,e)).state={dimension:null},n.nodeRef=e.innerRef||t.createRef(),["onEntering","onEntered","onExit","onExiting","onExited"].forEach((function(e){n[e]=n[e].bind(zn(n))})),n}return n=l,(r=[{key:"onEntering",value:function(e,t){var n=this.getNode();this.setState({dimension:this.getDimension(n)}),this.props.onEntering(n,t)}},{key:"onEntered",value:function(e,t){var n=this.getNode();this.setState({dimension:null}),this.props.onEntered(n,t)}},{key:"onExit",value:function(){var e=this.getNode();this.setState({dimension:this.getDimension(e)}),this.props.onExit(e)}},{key:"onExiting",value:function(){var e=this.getNode();this.getDimension(e),this.setState({dimension:0}),this.props.onExiting(e)}},{key:"onExited",value:function(){var e=this.getNode();this.setState({dimension:null}),this.props.onExited(e)}},{key:"getNode",value:function(){return this.nodeRef.current}},{key:"getDimension",value:function(e){return this.props.horizontal?e.scrollWidth:e.scrollHeight}},{key:"render",value:function(){var e,n,r,a=this,o=this.props,i=o.tag,l=o.horizontal,u=o.isOpen,s=o.className,c=o.navbar,d=o.cssModule,f=o.children,p=(o.innerRef,function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(o,Pn)),h=this.state.dimension,m=function(e,t){for(var n,r=Array.isArray(t)?t:[t],a=r.length,o={};a>0;)o[n=r[a-=1]]=e[n];return o}(p,$t),g=(e=p,n=$t,r={},Object.keys(e).forEach((function(t){-1===n.indexOf(t)&&(r[t]=e[t])})),r);return t.createElement(_n,Tn({},m,{in:u,nodeRef:this.nodeRef,onEntering:this.onEntering,onEntered:this.onEntered,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}),(function(e){var n=function(e){return Fn[e]||"collapse"}(e),r=Vt(Wt()(s,l&&"collapse-horizontal",n,c&&"navbar-collapse"),d),o=null===h?null:Dn({},l?"width":"height",h);return t.createElement(i,Tn({},g,{style:Ln(Ln({},g.style),o),className:r,ref:a.nodeRef}),f)}))}}])&&Nn(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),l}(t.Component);Wn.propTypes=Mn,Wn.defaultProps=Un;const An=Wn;var Vn=["className","cssModule","active","tag"];function Hn(){return Hn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Hn.apply(this,arguments)}var Bn={active:Ut().bool,className:Ut().string,cssModule:Ut().object,tag:Bt};function $n(e){var n=e.className,r=e.cssModule,a=e.active,o=e.tag,i=void 0===o?"li":o,l=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,Vn),u=Vt(Wt()(n,"nav-item",!!a&&"active"),r);return t.createElement(i,Hn({},l,{className:u}))}$n.propTypes=Bn;const Kn=$n;function Zn(e){return Zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zn(e)}var Xn=["className","cssModule","active","tag","innerRef"];function Gn(){return Gn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Gn.apply(this,arguments)}function Yn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Jn(e,t){return Jn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Jn(e,t)}function Qn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function qn(e){return qn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},qn(e)}var er={active:Ut().bool,className:Ut().string,cssModule:Ut().object,disabled:Ut().bool,href:Ut().any,innerRef:Ut().oneOfType([Ut().object,Ut().func,Ut().string]),onClick:Ut().func,tag:Bt},tr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Jn(e,t)}(l,e);var n,r,a,o,i=(a=l,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=qn(a);if(o){var n=qn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Zn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Qn(e)}(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=i.call(this,e)).onClick=t.onClick.bind(Qn(t)),t}return n=l,r=[{key:"onClick",value:function(e){this.props.disabled?e.preventDefault():("#"===this.props.href&&e.preventDefault(),this.props.onClick&&this.props.onClick(e))}},{key:"render",value:function(){var e=this.props,n=e.className,r=e.cssModule,a=e.active,o=e.tag,i=void 0===o?"a":o,l=e.innerRef,u=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,Xn),s=Vt(Wt()(n,"nav-link",{disabled:u.disabled,active:a}),r);return t.createElement(i,Gn({},u,{ref:l,onClick:this.onClick,className:s}))}}],r&&Yn(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),l}(t.Component);tr.propTypes=er;const nr=tr;class rr extends t.Component{static displayName=rr.name;state={collapsed:!0};constructor(e){super(e),this.toggleNavbar=this.toggleNavbar.bind(this),this.state={collapsed:!0}}toggleNavbar(){this.setState({collapsed:!this.state.collapsed})}render(){return console.log("show nav"),t.createElement("header",null,t.createElement(nn,{className:"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3",color:"black",container:!0,dark:!0},t.createElement(un,{tag:ge,to:"/"},"ListMate"),t.createElement(mn,{onClick:this.toggleNavbar,className:"mr-2"}),t.createElement(An,{className:"d-sm-inline-flex flex-sm-row-reverse",isOpen:!this.state.collapsed,navbar:!0},t.createElement("ul",{className:"navbar-nav align-items-center flex-grow"},t.createElement(Kn,null,t.createElement(nr,{tag:ge,className:"text-light",to:"/"},"Home"))))))}}const ar=rr;class or extends t.Component{static displayName=or.name;render(){return t.createElement(t.Fragment,null,t.createElement(ar,null),t.createElement(Yt,null,this.props.children))}}const ir=or;class lr extends t.Component{static displayName=lr.name;render(){return t.createElement(ir,null,t.createElement(se,null,t.createElement(le,{path:"/",element:t.createElement(jt,null)})))}}const ur=document.getElementById("app-root"),sr=(0,r.H)(ur),cr="MISSING_ENV_VAR".REACT_APP_AUTH0_DOMAIN,dr="MISSING_ENV_VAR".REACT_APP_AUTH0_CLIENTID;sr.render(t.createElement((function(e){var n=e.children,r=e.skipRedirectCallback,a=e.onRedirectCallback,o=void 0===a?It:a,i=e.context,l=void 0===i?kt:i,u=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(e,["children","skipRedirectCallback","onRedirectCallback","context"]),s=(0,t.useState)((function(){return new vt(function(e){return Tt(e),we(we({},e),{auth0Client:{name:"auth0-react",version:"2.2.4"}})}(u))}))[0],c=(0,t.useReducer)(Nt,yt),d=c[0],f=c[1],p=(0,t.useRef)(!1);(0,t.useEffect)((function(){p.current||(p.current=!0,ke(void 0,void 0,void 0,(function(){var e,t,n;return Se(this,(function(a){switch(a.label){case 0:return a.trys.push([0,7,,8]),e=void 0,void 0===i&&(i=window.location.search),!Et.test(i)&&!_t.test(i)||!xt.test(i)||r?[3,3]:[4,s.handleRedirectCallback()];case 1:return t=a.sent().appState,[4,s.getUser()];case 2:return e=a.sent(),o(t,e),[3,6];case 3:return[4,s.checkSession()];case 4:return a.sent(),[4,s.getUser()];case 5:e=a.sent(),a.label=6;case 6:return f({type:"INITIALISED",user:e}),[3,8];case 7:return n=a.sent(),f({type:"ERROR",error:Ct(n)}),[3,8];case 8:return[2]}var i}))})))}),[s,o,r]);var h=(0,t.useCallback)((function(e){return Tt(e),s.loginWithRedirect(e)}),[s]),m=(0,t.useCallback)((function(e,t){return ke(void 0,void 0,void 0,(function(){var n,r;return Se(this,(function(a){switch(a.label){case 0:f({type:"LOGIN_POPUP_STARTED"}),a.label=1;case 1:return a.trys.push([1,3,,4]),[4,s.loginWithPopup(e,t)];case 2:return a.sent(),[3,4];case 3:return n=a.sent(),f({type:"ERROR",error:Ct(n)}),[2];case 4:return[4,s.getUser()];case 5:return r=a.sent(),f({type:"LOGIN_POPUP_COMPLETE",user:r}),[2]}}))}))}),[s]),g=(0,t.useCallback)((function(e){return void 0===e&&(e={}),ke(void 0,void 0,void 0,(function(){return Se(this,(function(t){switch(t.label){case 0:return[4,s.logout(e)];case 1:return t.sent(),(e.openUrl||!1===e.openUrl)&&f({type:"LOGOUT"}),[2]}}))}))}),[s]),v=(0,t.useCallback)((function(e){return ke(void 0,void 0,void 0,(function(){var t,n,r,a;return Se(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,3,5]),[4,s.getTokenSilently(e)];case 1:return t=o.sent(),[3,5];case 2:throw n=o.sent(),Pt(n);case 3:return r=f,a={type:"GET_ACCESS_TOKEN_COMPLETE"},[4,s.getUser()];case 4:return r.apply(void 0,[(a.user=o.sent(),a)]),[7];case 5:return[2,t]}}))}))}),[s]),y=(0,t.useCallback)((function(e,t){return ke(void 0,void 0,void 0,(function(){var n,r,a,o;return Se(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,3,5]),[4,s.getTokenWithPopup(e,t)];case 1:return n=i.sent(),[3,5];case 2:throw r=i.sent(),Pt(r);case 3:return a=f,o={type:"GET_ACCESS_TOKEN_COMPLETE"},[4,s.getUser()];case 4:return a.apply(void 0,[(o.user=i.sent(),o)]),[7];case 5:return[2,n]}}))}))}),[s]),b=(0,t.useCallback)((function(){return s.getIdTokenClaims()}),[s]),w=(0,t.useCallback)((function(e){return ke(void 0,void 0,void 0,(function(){var t,n,r;return Se(this,(function(a){switch(a.label){case 0:return a.trys.push([0,2,3,5]),[4,s.handleRedirectCallback(e)];case 1:return[2,a.sent()];case 2:throw t=a.sent(),Pt(t);case 3:return n=f,r={type:"HANDLE_REDIRECT_COMPLETE"},[4,s.getUser()];case 4:return n.apply(void 0,[(r.user=a.sent(),r)]),[7];case 5:return[2]}}))}))}),[s]),k=(0,t.useMemo)((function(){return we(we({},d),{getAccessTokenSilently:v,getAccessTokenWithPopup:y,getIdTokenClaims:b,loginWithRedirect:h,loginWithPopup:m,logout:g,handleRedirectCallback:w})}),[d,v,y,b,h,m,g,w]);return t.createElement(l.Provider,{value:k},n)}),{domain:cr,clientId:dr,authorizationParams:{redirect_uri:"http://localhost:6955/"}},t.createElement((function(n){let{basename:r,children:a,future:o,window:i}=n,c=t.useRef();var h;null==c.current&&(c.current=(void 0===(h={window:i,v5Compat:!0})&&(h={}),function(t,n,r,a){void 0===a&&(a={});let{window:o=document.defaultView,v5Compat:i=!1}=a,c=o.history,h=e.Pop,m=null,g=v();function v(){return(c.state||{idx:null}).idx}function y(){h=e.Pop;let t=v(),n=null==t?null:t-g;g=t,m&&m({action:h,location:w.location,delta:n})}function b(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:p(e);return n=n.replace(/ $/,"%20"),s(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==g&&(g=0,c.replaceState(l({},c.state,{idx:g}),""));let w={get action(){return h},get location(){return t(o,c)},listen(e){if(m)throw new Error("A history only accepts one active listener");return o.addEventListener(u,y),m=e,()=>{o.removeEventListener(u,y),m=null}},createHref:e=>n(o,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){h=e.Push;let a=f(w.location,t,n);r&&r(a,t),g=v()+1;let l=d(a,g),u=w.createHref(a);try{c.pushState(l,"",u)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(u)}i&&m&&m({action:h,location:w.location,delta:1})},replace:function(t,n){h=e.Replace;let a=f(w.location,t,n);r&&r(a,t),g=v();let o=d(a,g),l=w.createHref(a);c.replaceState(o,"",l),i&&m&&m({action:h,location:w.location,delta:0})},go:e=>c.go(e)};return w}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return f("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:p(t)}),null,h)));let m=c.current,[g,v]=t.useState({action:m.action,location:m.location}),{v7_startTransition:y}=o||{},b=t.useCallback((e=>{y&&pe?pe((()=>v(e))):v(e)}),[v,y]);return t.useLayoutEffect((()=>m.listen(b)),[m,b]),t.createElement(ue,{basename:r,children:a,location:g.location,navigationType:g.action,navigator:m,future:o})}),null,t.createElement(lr,null))))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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OWxCLElBQzVDLGdCQUFvQixHQUFRLENBQzlDaUgsU0FBVUEsRUFDVjNxQyxTQUFVQSxFQUNWckwsU0FBVW85QixFQUFNcDlCLFNBQ2hCcWdELGVBQWdCampCLEVBQU05RSxPQUN0Qm9aLFVBQVdtakIsRUFDWHRYLE9BQVFBLEdBRVosR3VCdm5CUyxLQUNMLGdCQUFDb2hCLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnRhcHAvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnRhcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2NsaWVudGFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vbm9kZV9tb2R1bGVzL0ByZW1peC1ydW4vcm91dGVyL2Rpc3Qvcm91dGVyLmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9AYXV0aDAvYXV0aDAtcmVhY3QvZGlzdC9hdXRoMC1yZWFjdC5lc20uanMiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vc3JjL3NlcnZpY2VzL1dlYXRoZXJGb3JlY2FzdC50cyIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9zcmMvY29tcG9uZW50cy9XZWF0aGVyRm9yZWNhc3QvV2VhdGhlckZvcmVjYXN0LnRzeCIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9zcmMvY29tcG9uZW50cy9ob21lL0hvbWUudHN4Iiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdHN0cmFwL2VzbS91dGlscy5qcyIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9ub2RlX21vZHVsZXMvcmVhY3RzdHJhcC9lc20vQ29udGFpbmVyLmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdHN0cmFwL2VzbS9OYXZiYXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0c3RyYXAvZXNtL05hdmJhckJyYW5kLmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdHN0cmFwL2VzbS9OYXZiYXJUb2dnbGVyLmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vY29uZmlnLmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS91dGlscy9yZWZsb3cuanMiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vY2xpZW50YXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0c3RyYXAvZXNtL0NvbGxhcHNlLmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdHN0cmFwL2VzbS9OYXZJdGVtLmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdHN0cmFwL2VzbS9OYXZMaW5rLmpzIiwid2VicGFjazovL2NsaWVudGFwcC8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9OYXZNZW51LnRzeCIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9zcmMvY29tcG9uZW50cy9jb21tb24vTGF5b3V0LnRzeCIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9zcmMvY29tcG9uZW50cy9jb21tb24vQXBwLnRzeCIsIndlYnBhY2s6Ly9jbGllbnRhcHAvLi9zcmMvY29tcG9uZW50cy9jb21tb24vaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBiaWdpbnQ6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksY2E9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBkYT1uZXcgU2V0LGVhPXt9O2Z1bmN0aW9uIGZhKGEsYil7aGEoYSxiKTtoYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gaGEoYSxiKXtlYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZGEuYWRkKGJbYV0pfVxudmFyIGlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxqYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGthPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYT1cbnt9LG1hPXt9O2Z1bmN0aW9uIG9hKGEpe2lmKGphLmNhbGwobWEsYSkpcmV0dXJuITA7aWYoamEuY2FsbChsYSxhKSlyZXR1cm4hMTtpZihrYS50ZXN0KGEpKXJldHVybiBtYVthXT0hMDtsYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIHo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07eltiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciByYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLFxuc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuei54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gdGEoYSxiLGMsZCl7dmFyIGU9ei5oYXNPd25Qcm9wZXJ0eShiKT96W2JdOm51bGw7aWYobnVsbCE9PWU/MCE9PWUudHlwZTpkfHwhKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0pcWEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29hKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKX1cbnZhciB1YT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx2YT1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSx3YT1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHlhPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxDYT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLEZhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLEdhPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBJYT1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5jYWNoZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7dmFyIEphPVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBLYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9SmEmJmFbSmFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIEE9T2JqZWN0LmFzc2lnbixMYTtmdW5jdGlvbiBNYShhKXtpZih2b2lkIDA9PT1MYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtMYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTGErYX12YXIgTmE9ITE7XG5mdW5jdGlvbiBPYShhLGIpe2lmKCFhfHxOYSlyZXR1cm5cIlwiO05hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChsKXt2YXIgZD1sfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2gobCl7ZD1sfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2gobCl7ZD1sfWEoKX19Y2F0Y2gobCl7aWYobCYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBsLnN0YWNrKXtmb3IodmFyIGU9bC5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXt2YXIgaz1cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO2EuZGlzcGxheU5hbWUmJmsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSYmKGs9ay5yZXBsYWNlKFwiPGFub255bW91cz5cIixhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGt9d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e05hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TWEoYSk6XCJcIn1cbmZ1bmN0aW9uIFBhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBNYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE1hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBNYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE1hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1PYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1PYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1PYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFFhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2Ugd2E6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEFhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgRWE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgRmE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQ2E6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgQmE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgRGE6dmFyIGI9YS5yZW5kZXI7YT1hLmRpc3BsYXlOYW1lO2F8fChhPWIuZGlzcGxheU5hbWV8fFxuYi5uYW1lfHxcIlwiLGE9XCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO3JldHVybiBhO2Nhc2UgR2E6cmV0dXJuIGI9YS5kaXNwbGF5TmFtZXx8bnVsbCxudWxsIT09Yj9iOlFhKGEudHlwZSl8fFwiTWVtb1wiO2Nhc2UgSGE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFFhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSYShhKXt2YXIgYj1hLnR5cGU7c3dpdGNoKGEudGFnKXtjYXNlIDI0OnJldHVyblwiQ2FjaGVcIjtjYXNlIDk6cmV0dXJuKGIuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgMTA6cmV0dXJuKGIuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgMTg6cmV0dXJuXCJEZWh5ZHJhdGVkRnJhZ21lbnRcIjtjYXNlIDExOnJldHVybiBhPWIucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLGIuZGlzcGxheU5hbWV8fChcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSA3OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVyblwiUG9ydGFsXCI7Y2FzZSAzOnJldHVyblwiUm9vdFwiO2Nhc2UgNjpyZXR1cm5cIlRleHRcIjtjYXNlIDE2OnJldHVybiBRYShiKTtjYXNlIDg6cmV0dXJuIGI9PT16YT9cIlN0cmljdE1vZGVcIjpcIk1vZGVcIjtjYXNlIDIyOnJldHVyblwiT2Zmc2NyZWVuXCI7XG5jYXNlIDEyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIDIxOnJldHVyblwiU2NvcGVcIjtjYXNlIDEzOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIDE5OnJldHVyblwiU3VzcGVuc2VMaXN0XCI7Y2FzZSAyNTpyZXR1cm5cIlRyYWNpbmdNYXJrZXJcIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gYWIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYmIoYSxiKXthYihhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2NiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmNiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBlYj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IocCg5MSkpO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHAoOTIpKTtpZihlYihjKSl7aWYoMTxjLmxlbmd0aCl0aHJvdyBFcnJvcihwKDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX1mdW5jdGlvbiBrYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxuZnVuY3Rpb24gbGIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2tiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG1iLG5iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIhPT1hLm5hbWVzcGFjZVVSSXx8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21iPW1ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW1iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9iKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGFzcGVjdFJhdGlvOiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCxcbnpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGJbYl09cGJbYV19KX0pO2Z1bmN0aW9uIHJiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxwYi5oYXNPd25Qcm9wZXJ0eShhKSYmcGJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gc2IoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9cmIoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdGI9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHViKGEsYil7aWYoYil7aWYodGJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcihwKDYwKSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwhKFwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcihwKDYyKSk7fX1cbmZ1bmN0aW9uIHZiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgd2I9bnVsbDtmdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHAoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKCl7fXZhciBJYj0hMTtmdW5jdGlvbiBKYihhLGIsYyl7aWYoSWIpcmV0dXJuIGEoYixjKTtJYj0hMDt0cnl7cmV0dXJuIEdiKGEsYixjKX1maW5hbGx5e2lmKEliPSExLG51bGwhPT16Ynx8bnVsbCE9PUFiKUhiKCksRmIoKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHAoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgTGI9ITE7aWYoaWEpdHJ5e3ZhciBNYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0xiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYil9Y2F0Y2goYSl7TGI9ITF9ZnVuY3Rpb24gTmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIE9iPSExLFBiPW51bGwsUWI9ITEsUmI9bnVsbCxTYj17b25FcnJvcjpmdW5jdGlvbihhKXtPYj0hMDtQYj1hfX07ZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe09iPSExO1BiPW51bGw7TmIuYXBwbHkoU2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFViKGEsYixjLGQsZSxmLGcsaCxrKXtUYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoT2Ipe2lmKE9iKXt2YXIgbD1QYjtPYj0hMTtQYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IocCgxOTgpKTtRYnx8KFFiPSEwLFJiPWwpfX1mdW5jdGlvbiBWYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmNDA5OCkmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIFdiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGIoYSl7aWYoVmIoYSkhPT1hKXRocm93IEVycm9yKHAoMTg4KSk7fVxuZnVuY3Rpb24gWWIoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9VmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gWGIoZSksYTtpZihmPT09ZClyZXR1cm4gWGIoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcihwKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHAoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IocCgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBaYihhKXthPVliKGEpO3JldHVybiBudWxsIT09YT8kYihhKTpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhO2ZvcihhPWEuY2hpbGQ7bnVsbCE9PWE7KXt2YXIgYj0kYihhKTtpZihudWxsIT09YilyZXR1cm4gYjthPWEuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciBhYz1jYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGJjPWNhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLGNjPWNhLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGRjPWNhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxCPWNhLnVuc3RhYmxlX25vdyxlYz1jYS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxmYz1jYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxnYz1jYS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxoYz1jYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxpYz1jYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxqYz1jYS51bnN0YWJsZV9JZGxlUHJpb3JpdHksa2M9bnVsbCxsYz1udWxsO2Z1bmN0aW9uIG1jKGEpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclJvb3QpdHJ5e2xjLm9uQ29tbWl0RmliZXJSb290KGtjLGEsdm9pZCAwLDEyOD09PShhLmN1cnJlbnQuZmxhZ3MmMTI4KSl9Y2F0Y2goYil7fX1cbnZhciBvYz1NYXRoLmNsejMyP01hdGguY2x6MzI6bmMscGM9TWF0aC5sb2cscWM9TWF0aC5MTjI7ZnVuY3Rpb24gbmMoYSl7YT4+Pj0wO3JldHVybiAwPT09YT8zMjozMS0ocGMoYSkvcWN8MCl8MH12YXIgcmM9NjQsc2M9NDE5NDMwNDtcbmZ1bmN0aW9uIHRjKGEpe3N3aXRjaChhJi1hKXtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSY0MTk0MjQwO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuIGEmMTMwMDIzNDI0O2Nhc2UgMTM0MjE3NzI4OnJldHVybiAxMzQyMTc3Mjg7Y2FzZSAyNjg0MzU0NTY6cmV0dXJuIDI2ODQzNTQ1NjtjYXNlIDUzNjg3MDkxMjpyZXR1cm4gNTM2ODcwOTEyO2Nhc2UgMTA3Mzc0MTgyNDpyZXR1cm4gMTA3Mzc0MTgyNDtcbmRlZmF1bHQ6cmV0dXJuIGF9fWZ1bmN0aW9uIHVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIDA7dmFyIGQ9MCxlPWEuc3VzcGVuZGVkTGFuZXMsZj1hLnBpbmdlZExhbmVzLGc9YyYyNjg0MzU0NTU7aWYoMCE9PWcpe3ZhciBoPWcmfmU7MCE9PWg/ZD10YyhoKTooZiY9ZywwIT09ZiYmKGQ9dGMoZikpKX1lbHNlIGc9YyZ+ZSwwIT09Zz9kPXRjKGcpOjAhPT1mJiYoZD10YyhmKSk7aWYoMD09PWQpcmV0dXJuIDA7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZSkmJihlPWQmLWQsZj1iJi1iLGU+PWZ8fDE2PT09ZSYmMCE9PShmJjQxOTQyNDApKSlyZXR1cm4gYjswIT09KGQmNCkmJihkfD1jJjE2KTtiPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLW9jKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gdmMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuIGIrMjUwO2Nhc2UgODpjYXNlIDE2OmNhc2UgMzI6Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYis1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4tMTtjYXNlIDEzNDIxNzcyODpjYXNlIDI2ODQzNTQ1NjpjYXNlIDUzNjg3MDkxMjpjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuLTE7ZGVmYXVsdDpyZXR1cm4tMX19XG5mdW5jdGlvbiB3YyhhLGIpe2Zvcih2YXIgYz1hLnN1c3BlbmRlZExhbmVzLGQ9YS5waW5nZWRMYW5lcyxlPWEuZXhwaXJhdGlvblRpbWVzLGY9YS5wZW5kaW5nTGFuZXM7MDxmOyl7dmFyIGc9MzEtb2MoZiksaD0xPDxnLGs9ZVtnXTtpZigtMT09PWspe2lmKDA9PT0oaCZjKXx8MCE9PShoJmQpKWVbZ109dmMoaCxiKX1lbHNlIGs8PWImJihhLmV4cGlyZWRMYW5lc3w9aCk7ZiY9fmh9fWZ1bmN0aW9uIHhjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiB5Yygpe3ZhciBhPXJjO3JjPDw9MTswPT09KHJjJjQxOTQyNDApJiYocmM9NjQpO3JldHVybiBhfWZ1bmN0aW9uIHpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gQWMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLW9jKGIpO2FbYl09Y31mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzJn5iO2EucGVuZGluZ0xhbmVzPWI7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9YjthLm11dGFibGVSZWFkTGFuZXMmPWI7YS5lbnRhbmdsZWRMYW5lcyY9YjtiPWEuZW50YW5nbGVtZW50czt2YXIgZD1hLmV2ZW50VGltZXM7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxjOyl7dmFyIGU9MzEtb2MoYyksZj0xPDxlO2JbZV09MDtkW2VdPS0xO2FbZV09LTE7YyY9fmZ9fVxuZnVuY3Rpb24gQ2MoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtb2MoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEM9MDtmdW5jdGlvbiBEYyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfXZhciBFYyxGYyxHYyxIYyxJYyxKYz0hMSxLYz1bXSxMYz1udWxsLE1jPW51bGwsTmM9bnVsbCxPYz1uZXcgTWFwLFBjPW5ldyBNYXAsUWM9W10sUmM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gU2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6TWM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6TmM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOk9jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlBjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gVGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT17YmxvY2tlZE9uOmIsZG9tRXZlbnROYW1lOmMsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmYsdGFyZ2V0Q29udGFpbmVyczpbZV19LG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmRmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gVWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4gTGM9VGMoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIE1jPVRjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBOYz1UYyhOYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO09jLnNldChmLFRjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxQYy5zZXQoZixUYyhQYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1XYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVZiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPVdiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO0ljKGEucHJpb3JpdHksZnVuY3Rpb24oKXtHYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiBYYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9WWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbD09PWMpe2M9YS5uYXRpdmVFdmVudDt2YXIgZD1uZXcgYy5jb25zdHJ1Y3RvcihjLnR5cGUsYyk7d2I9ZDtjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO3diPW51bGx9ZWxzZSByZXR1cm4gYj1DYihjKSxudWxsIT09YiYmRmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gWmMoYSxiLGMpe1hjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiAkYygpe0pjPSExO251bGwhPT1MYyYmWGMoTGMpJiYoTGM9bnVsbCk7bnVsbCE9PU1jJiZYYyhNYykmJihNYz1udWxsKTtudWxsIT09TmMmJlhjKE5jKSYmKE5jPW51bGwpO09jLmZvckVhY2goWmMpO1BjLmZvckVhY2goWmMpfVxuZnVuY3Rpb24gYWQoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLEpjfHwoSmM9ITAsY2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhjYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSwkYykpKX1cbmZ1bmN0aW9uIGJkKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIGFkKGIsYSl9aWYoMDxLYy5sZW5ndGgpe2FkKEtjWzBdLGEpO2Zvcih2YXIgYz0xO2M8S2MubGVuZ3RoO2MrKyl7dmFyIGQ9S2NbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1MYyYmYWQoTGMsYSk7bnVsbCE9PU1jJiZhZChNYyxhKTtudWxsIT09TmMmJmFkKE5jLGEpO09jLmZvckVhY2goYik7UGMuZm9yRWFjaChiKTtmb3IoYz0wO2M8UWMubGVuZ3RoO2MrKylkPVFjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxRYy5sZW5ndGgmJihjPVFjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmUWMuc2hpZnQoKX12YXIgY2Q9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsZGQ9ITA7XG5mdW5jdGlvbiBlZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9MSxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fWZ1bmN0aW9uIGdkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz00LGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19XG5mdW5jdGlvbiBmZChhLGIsYyxkKXtpZihkZCl7dmFyIGU9WWMoYSxiLGMsZCk7aWYobnVsbD09PWUpaGQoYSxiLGQsaWQsYyksU2MoYSxkKTtlbHNlIGlmKFVjKGUsYSxiLGMsZCkpZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKFNjKGEsZCksYiY0JiYtMTxSYy5pbmRleE9mKGEpKXtmb3IoO251bGwhPT1lOyl7dmFyIGY9Q2IoZSk7bnVsbCE9PWYmJkVjKGYpO2Y9WWMoYSxiLGMsZCk7bnVsbD09PWYmJmhkKGEsYixkLGlkLGMpO2lmKGY9PT1lKWJyZWFrO2U9Zn1udWxsIT09ZSYmZC5zdG9wUHJvcGFnYXRpb24oKX1lbHNlIGhkKGEsYixkLG51bGwsYyl9fXZhciBpZD1udWxsO1xuZnVuY3Rpb24gWWMoYSxiLGMsZCl7aWQ9bnVsbDthPXhiKGQpO2E9V2MoYSk7aWYobnVsbCE9PWEpaWYoYj1WYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1XYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7aWQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGpkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGVjKCkpe2Nhc2UgZmM6cmV0dXJuIDE7Y2FzZSBnYzpyZXR1cm4gNDtjYXNlIGhjOmNhc2UgaWM6cmV0dXJuIDE2O2Nhc2UgamM6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO2Z1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9QSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPUEoe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPUEoe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPUEoe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1BKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9QSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1BKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9QSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1BKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1BKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9QSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9QSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9aWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9aWEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoaWEpe3ZhciB4ZTtpZihpYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO0piKHJlLGIpfX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlO1xuZnVuY3Rpb24gSWUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWphLmNhbGwoYixlKXx8IUhlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gSmUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1KZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1KZShjKX19ZnVuY3Rpb24gTGUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9MZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBNZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBOZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gT2UoYSl7dmFyIGI9TWUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJkxlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZOZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1LZShjLGYpO3ZhciBnPUtlKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUGU9aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk5lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkllKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cbmZ1bmN0aW9uIFZlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFdlPXthbmltYXRpb25lbmQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpWZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFhlPXt9LFllPXt9O1xuaWEmJihZZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBXZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBXZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFplKGEpe2lmKFhlW2FdKXJldHVybiBYZVthXTtpZighV2VbYV0pcmV0dXJuIGE7dmFyIGI9V2VbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gWWUpcmV0dXJuIFhlW2FdPWJbY107cmV0dXJuIGF9dmFyICRlPVplKFwiYW5pbWF0aW9uZW5kXCIpLGFmPVplKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGJmPVplKFwiYW5pbWF0aW9uc3RhcnRcIiksY2Y9WmUoXCJ0cmFuc2l0aW9uZW5kXCIpLGRmPW5ldyBNYXAsZWY9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGZmKGEsYil7ZGYuc2V0KGEsYik7ZmEoYixbYV0pfWZvcih2YXIgZ2Y9MDtnZjxlZi5sZW5ndGg7Z2YrKyl7dmFyIGhmPWVmW2dmXSxqZj1oZi50b0xvd2VyQ2FzZSgpLGtmPWhmWzBdLnRvVXBwZXJDYXNlKCkraGYuc2xpY2UoMSk7ZmYoamYsXCJvblwiK2tmKX1mZigkZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2ZmKGFmLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7ZmYoYmYsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2ZmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7ZmYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2ZmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTtmZihjZixcIm9uVHJhbnNpdGlvbkVuZFwiKTtoYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmhhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZmEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtmYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgbGY9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxtZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChsZikpO1xuZnVuY3Rpb24gbmYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7VWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfX19aWYoUWIpdGhyb3cgYT1SYixRYj0hMSxSYj1udWxsLGE7fVxuZnVuY3Rpb24gRChhLGIpe3ZhciBjPWJbb2ZdO3ZvaWQgMD09PWMmJihjPWJbb2ZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwocGYoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7cGYoYyxhLGQsYil9dmFyIHJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gc2YoYSl7aWYoIWFbcmZdKXthW3JmXT0hMDtkYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYobWYuaGFzKGIpfHxxZihiLCExLGEpLHFmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbcmZdfHwoYltyZl09ITAscWYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24gcGYoYSxiLGMsZCl7c3dpdGNoKGpkKGIpKXtjYXNlIDE6dmFyIGU9ZWQ7YnJlYWs7Y2FzZSA0OmU9Z2Q7YnJlYWs7ZGVmYXVsdDplPWZkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFMYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1KYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9ZGYuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLG49YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bj1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpuPVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSAkZTpjYXNlIGFmOmNhc2UgYmY6az1IZDticmVhaztjYXNlIGNmOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHQ9MCE9PShiJjQpLEo9IXQmJlwic2Nyb2xsXCI9PT1hLHg9dD9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt0PVtdO2Zvcih2YXIgdz1kLHU7bnVsbCE9PVxudzspe3U9dzt2YXIgRj11LnN0YXRlTm9kZTs1PT09dS50YWcmJm51bGwhPT1GJiYodT1GLG51bGwhPT14JiYoRj1LYih3LHgpLG51bGwhPUYmJnQucHVzaCh0Zih3LEYsdSkpKSk7aWYoSilicmVhazt3PXcucmV0dXJufTA8dC5sZW5ndGgmJihoPW5ldyBrKGgsbixudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp0fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXdiJiYobj1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoV2Mobil8fG5bdWZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxuPW4/V2Mobik6bnVsbCxudWxsIT09XG5uJiYoSj1WYihuKSxuIT09Snx8NSE9PW4udGFnJiY2IT09bi50YWcpKW49bnVsbH1lbHNlIGs9bnVsbCxuPWQ7aWYoayE9PW4pe3Q9QmQ7Rj1cIm9uTW91c2VMZWF2ZVwiO3g9XCJvbk1vdXNlRW50ZXJcIjt3PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdD1UZCxGPVwib25Qb2ludGVyTGVhdmVcIix4PVwib25Qb2ludGVyRW50ZXJcIix3PVwicG9pbnRlclwiO0o9bnVsbD09az9oOnVlKGspO3U9bnVsbD09bj9oOnVlKG4pO2g9bmV3IHQoRix3K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9SjtoLnJlbGF0ZWRUYXJnZXQ9dTtGPW51bGw7V2MoZSk9PT1kJiYodD1uZXcgdCh4LHcrXCJlbnRlclwiLG4sYyxlKSx0LnRhcmdldD11LHQucmVsYXRlZFRhcmdldD1KLEY9dCk7Sj1GO2lmKGsmJm4pYjp7dD1rO3g9bjt3PTA7Zm9yKHU9dDt1O3U9dmYodSkpdysrO3U9MDtmb3IoRj14O0Y7Rj12ZihGKSl1Kys7Zm9yKDswPHctdTspdD12Zih0KSx3LS07Zm9yKDswPHUtdzspeD1cbnZmKHgpLHUtLTtmb3IoO3ctLTspe2lmKHQ9PT14fHxudWxsIT09eCYmdD09PXguYWx0ZXJuYXRlKWJyZWFrIGI7dD12Zih0KTt4PXZmKHgpfXQ9bnVsbH1lbHNlIHQ9bnVsbDtudWxsIT09ayYmd2YoZyxoLGssdCwhMSk7bnVsbCE9PW4mJm51bGwhPT1KJiZ3ZihnLEosbix0LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBuYT12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKW5hPUZlO2Vsc2V7bmE9RGU7dmFyIHhhPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYobmE9RWUpO2lmKG5hJiYobmE9bmEoYSxkKSkpe25lKGcsbmEsYyxlKTticmVhayBhfXhhJiZ4YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHhhPWguX3dyYXBwZXJTdGF0ZSkmJlxueGEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmY2IoaCxcIm51bWJlclwiLGgudmFsdWUpfXhhPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKHhhKXx8XCJ0cnVlXCI9PT14YS5jb250ZW50RWRpdGFibGUpUWU9eGEsUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciAkYTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmJhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpiYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWJhPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihiYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtiYSYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09YmE/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1iYSYmaWUmJigkYT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLHhhPW9lKGQsYmEpLDA8eGEubGVuZ3RoJiYoYmE9bmV3IExkKGJhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6YmEsbGlzdGVuZXJzOnhhfSksJGE/YmEuZGF0YT0kYTooJGE9aGUoYyksbnVsbCE9PSRhJiYoYmEuZGF0YT0kYSkpKSk7aWYoJGE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9JGEpfXNlKGcsYil9KX1mdW5jdGlvbiB0ZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9S2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQodGYoYSxmLGUpKSxmPUtiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHRmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdmYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHdmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9S2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQodGYoYyxrLGgpKSk6ZXx8KGs9S2IoYyxmKSxudWxsIT1rJiZnLnB1c2godGYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgeGY9L1xcclxcbj8vZyx5Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24gemYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh4ZixcIlxcblwiKS5yZXBsYWNlKHlmLFwiXCIpfWZ1bmN0aW9uIEFmKGEsYixjKXtiPXpmKGIpO2lmKHpmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBCZigpe31cbnZhciBDZj1udWxsLERmPW51bGw7ZnVuY3Rpb24gRWYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsR2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEhmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLEpmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEhmP2Z1bmN0aW9uKGEpe3JldHVybiBIZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSWYpfTpGZjtmdW5jdGlvbiBJZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2JkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTtiZChiKX1mdW5jdGlvbiBMZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTWYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE9mPVwiX19yZWFjdEZpYmVyJFwiK05mLFBmPVwiX19yZWFjdFByb3BzJFwiK05mLHVmPVwiX19yZWFjdENvbnRhaW5lciRcIitOZixvZj1cIl9fcmVhY3RFdmVudHMkXCIrTmYsUWY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK05mLFJmPVwiX19yZWFjdEhhbmRsZXMkXCIrTmY7XG5mdW5jdGlvbiBXYyhhKXt2YXIgYj1hW09mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t1Zl18fGNbT2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TWYoYSk7bnVsbCE9PWE7KXtpZihjPWFbT2ZdKXJldHVybiBjO2E9TWYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVtPZl18fGFbdWZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVtQZl18fG51bGx9dmFyIFNmPVtdLFRmPS0xO2Z1bmN0aW9uIFVmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlRmfHwoYS5jdXJyZW50PVNmW1RmXSxTZltUZl09bnVsbCxUZi0tKX1mdW5jdGlvbiBHKGEsYil7VGYrKztTZltUZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBWZj17fSxIPVVmKFZmKSxXZj1VZighMSksWGY9VmY7ZnVuY3Rpb24gWWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBWZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFpmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gJGYoKXtFKFdmKTtFKEgpfWZ1bmN0aW9uIGFnKGEsYixjKXtpZihILmN1cnJlbnQhPT1WZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFdmLGMpfWZ1bmN0aW9uIGJnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUmEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gY2coYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFZmO1hmPUguY3VycmVudDtHKEgsYSk7RyhXZixXZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBkZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWJnKGEsYixYZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoV2YpLEUoSCksRyhILGEpKTpFKFdmKTtHKFdmLGMpfXZhciBlZz1udWxsLGZnPSExLGdnPSExO2Z1bmN0aW9uIGhnKGEpe251bGw9PT1lZz9lZz1bYV06ZWcucHVzaChhKX1mdW5jdGlvbiBpZyhhKXtmZz0hMDtoZyhhKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWdnJiZudWxsIT09ZWcpe2dnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1lZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWVnPW51bGw7Zmc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWVnJiYoZWc9ZWcuc2xpY2UoYSsxKSksYWMoZmMsamcpLGU7fWZpbmFsbHl7Qz1iLGdnPSExfX1yZXR1cm4gbnVsbH12YXIga2c9W10sbGc9MCxtZz1udWxsLG5nPTAsb2c9W10scGc9MCxxZz1udWxsLHJnPTEsc2c9XCJcIjtmdW5jdGlvbiB0ZyhhLGIpe2tnW2xnKytdPW5nO2tnW2xnKytdPW1nO21nPWE7bmc9Yn1cbmZ1bmN0aW9uIHVnKGEsYixjKXtvZ1twZysrXT1yZztvZ1twZysrXT1zZztvZ1twZysrXT1xZztxZz1hO3ZhciBkPXJnO2E9c2c7dmFyIGU9MzItb2MoZCktMTtkJj1+KDE8PGUpO2MrPTE7dmFyIGY9MzItb2MoYikrZTtpZigzMDxmKXt2YXIgZz1lLWUlNTtmPShkJigxPDxnKS0xKS50b1N0cmluZygzMik7ZD4+PWc7ZS09ZztyZz0xPDwzMi1vYyhiKStlfGM8PGV8ZDtzZz1mK2F9ZWxzZSByZz0xPDxmfGM8PGV8ZCxzZz1hfWZ1bmN0aW9uIHZnKGEpe251bGwhPT1hLnJldHVybiYmKHRnKGEsMSksdWcoYSwxLDApKX1mdW5jdGlvbiB3ZyhhKXtmb3IoO2E9PT1tZzspbWc9a2dbLS1sZ10sa2dbbGddPW51bGwsbmc9a2dbLS1sZ10sa2dbbGddPW51bGw7Zm9yKDthPT09cWc7KXFnPW9nWy0tcGddLG9nW3BnXT1udWxsLHNnPW9nWy0tcGddLG9nW3BnXT1udWxsLHJnPW9nWy0tcGddLG9nW3BnXT1udWxsfXZhciB4Zz1udWxsLHlnPW51bGwsST0hMSx6Zz1udWxsO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1CZyg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtiPWEuZGVsZXRpb25zO251bGw9PT1iPyhhLmRlbGV0aW9ucz1bY10sYS5mbGFnc3w9MTYpOmIucHVzaChjKX1cbmZ1bmN0aW9uIENnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9TGYoYi5maXJzdENoaWxkKSwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9bnVsbCwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4gYj04IT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGM9bnVsbCE9PXFnP3tpZDpyZyxvdmVyZmxvdzpzZ306bnVsbCxhLm1lbW9pemVkU3RhdGU9e2RlaHlkcmF0ZWQ6Yix0cmVlQ29udGV4dDpjLHJldHJ5TGFuZToxMDczNzQxODI0fSxjPUJnKDE4LG51bGwsbnVsbCwwKSxjLnN0YXRlTm9kZT1iLGMucmV0dXJuPWEsYS5jaGlsZD1jLHhnPWEseWc9XG5udWxsLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBEZyhhKXtyZXR1cm4gMCE9PShhLm1vZGUmMSkmJjA9PT0oYS5mbGFncyYxMjgpfWZ1bmN0aW9uIEVnKGEpe2lmKEkpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUNnKGEsYikpe2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7Yj1MZihjLm5leHRTaWJsaW5nKTt2YXIgZD14ZztiJiZDZyhhLGIpP0FnKGQsYyk6KGEuZmxhZ3M9YS5mbGFncyYtNDA5N3wyLEk9ITEseGc9YSl9fWVsc2V7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MjtJPSExO3hnPWF9fX1mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1cbmZ1bmN0aW9uIEdnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighSSlyZXR1cm4gRmcoYSksST0hMCwhMTt2YXIgYjsoYj0zIT09YS50YWcpJiYhKGI9NSE9PWEudGFnKSYmKGI9YS50eXBlLGI9XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFFZihhLnR5cGUsYS5tZW1vaXplZFByb3BzKSk7aWYoYiYmKGI9eWcpKXtpZihEZyhhKSl0aHJvdyBIZygpLEVycm9yKHAoNDE4KSk7Zm9yKDtiOylBZyhhLGIpLGI9TGYoYi5uZXh0U2libGluZyl9RmcoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXt5Zz1MZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfXlnPVxubnVsbH19ZWxzZSB5Zz14Zz9MZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBIZygpe2Zvcih2YXIgYT15ZzthOylhPUxmKGEubmV4dFNpYmxpbmcpfWZ1bmN0aW9uIElnKCl7eWc9eGc9bnVsbDtJPSExfWZ1bmN0aW9uIEpnKGEpe251bGw9PT16Zz96Zz1bYV06emcucHVzaChhKX12YXIgS2c9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7XG5mdW5jdGlvbiBMZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIE1nKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIE5nKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiBPZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1QZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVFnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJk5nKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9TGcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVJnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPUxnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9U2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVRnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVFnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPVJnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9TGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPVNnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1UZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtNZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO01nKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO01nKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJk5nKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1MZyhhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9VGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVJnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPUxnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVNnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO01nKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9UWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgVWc9T2coITApLFZnPU9nKCExKSxXZz1VZihudWxsKSxYZz1udWxsLFlnPW51bGwsWmc9bnVsbDtmdW5jdGlvbiAkZygpe1pnPVlnPVhnPW51bGx9ZnVuY3Rpb24gYWgoYSl7dmFyIGI9V2cuY3VycmVudDtFKFdnKTthLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBiaChhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fVxuZnVuY3Rpb24gY2goYSxiKXtYZz1hO1pnPVlnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoZGg9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfWZ1bmN0aW9uIGVoKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihaZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1ZZyl7aWYobnVsbD09PVhnKXRocm93IEVycm9yKHAoMzA4KSk7WWc9YTtYZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgWWc9WWcubmV4dD1hO3JldHVybiBifXZhciBmaD1udWxsO2Z1bmN0aW9uIGdoKGEpe251bGw9PT1maD9maD1bYV06ZmgucHVzaChhKX1cbmZ1bmN0aW9uIGhoKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLGdoKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBpaChhLGQpfWZ1bmN0aW9uIGloKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgamg9ITE7ZnVuY3Rpb24ga2goYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGxoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIG1oKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gbmgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIGloKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixnaChkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gaWgoYSxjKX1mdW5jdGlvbiBvaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gcGgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7amg9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6amg9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO3JofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBzaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciB0aD17fSx1aD1VZih0aCksdmg9VWYodGgpLHdoPVVmKHRoKTtmdW5jdGlvbiB4aChhKXtpZihhPT09dGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHloKGEsYil7Ryh3aCxiKTtHKHZoLGEpO0codWgsdGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RSh1aCk7Ryh1aCxiKX1mdW5jdGlvbiB6aCgpe0UodWgpO0UodmgpO0Uod2gpfWZ1bmN0aW9uIEFoKGEpe3hoKHdoLmN1cnJlbnQpO3ZhciBiPXhoKHVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcodmgsYSksRyh1aCxjKSl9ZnVuY3Rpb24gQmgoYSl7dmguY3VycmVudD09PWEmJihFKHVoKSxFKHZoKSl9dmFyIEw9VWYoMCk7XG5mdW5jdGlvbiBDaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgRGg9W107XG5mdW5jdGlvbiBFaCgpe2Zvcih2YXIgYT0wO2E8RGgubGVuZ3RoO2ErKylEaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO0RoLmxlbmd0aD0wfXZhciBGaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLEdoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEhoPTAsTT1udWxsLE49bnVsbCxPPW51bGwsSWg9ITEsSmg9ITEsS2g9MCxMaD0wO2Z1bmN0aW9uIFAoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBNaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gTmgoYSxiLGMsZCxlLGYpe0hoPWY7TT1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7RmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9PaDpQaDthPWMoZCxlKTtpZihKaCl7Zj0wO2Rve0poPSExO0toPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO089Tj1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtGaC5jdXJyZW50PVFoO2E9YyhkLGUpfXdoaWxlKEpoKX1GaC5jdXJyZW50PVJoO2I9bnVsbCE9PU4mJm51bGwhPT1OLm5leHQ7SGg9MDtPPU49TT1udWxsO0loPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBTaCgpe3ZhciBhPTAhPT1LaDtLaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gVGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09Tz9NLm1lbW9pemVkU3RhdGU9Tz1hOk89Ty5uZXh0PWE7cmV0dXJuIE99ZnVuY3Rpb24gVWgoKXtpZihudWxsPT09Til7dmFyIGE9TS5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ti5uZXh0O3ZhciBiPW51bGw9PT1PP00ubWVtb2l6ZWRTdGF0ZTpPLm5leHQ7aWYobnVsbCE9PWIpTz1iLE49YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tj1hO2E9e21lbW9pemVkU3RhdGU6Ti5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpOLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ti5iYXNlUXVldWUscXVldWU6Ti5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1PP00ubWVtb2l6ZWRTdGF0ZT1PPWE6Tz1PLm5leHQ9YX1yZXR1cm4gT31cbmZ1bmN0aW9uIFZoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gV2goYSl7dmFyIGI9VWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1OLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChIaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO00ubGFuZXN8PW07cmh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoZGg9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTS5sYW5lc3w9ZixyaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIFhoKGEpe3ZhciBiPVVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChkaD0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIFloKCl7fVxuZnVuY3Rpb24gWmgoYSxiKXt2YXIgYz1NLGQ9VWgoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLGRoPSEwKTtkPWQucXVldWU7JGgoYWkuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09TyYmTy5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2JpKDksY2kuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09USl0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oSGgmMzApfHxkaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gZGkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1NLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE0udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gY2koYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtlaShiKSYmZmkoYSl9ZnVuY3Rpb24gYWkoYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7ZWkoYikmJmZpKGEpfSl9ZnVuY3Rpb24gZWkoYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gZmkoYSl7dmFyIGI9aWgoYSwxKTtudWxsIT09YiYmZ2koYixhLDEsLTEpfVxuZnVuY3Rpb24gaGkoYSl7dmFyIGI9VGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpWaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPWlpLmJpbmQobnVsbCxNLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBiaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1NLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE0udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gamkoKXtyZXR1cm4gVWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIGtpKGEsYixjLGQpe3ZhciBlPVRoKCk7TS5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9YmkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe3ZhciBlPVVoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU4pe3ZhciBnPU4ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmTWgoZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9YmkoYixjLGYsZCk7cmV0dXJufX1NLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1iaSgxfGIsYyxmLGQpfWZ1bmN0aW9uIG1pKGEsYil7cmV0dXJuIGtpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uICRoKGEsYil7cmV0dXJuIGxpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIG5pKGEsYil7cmV0dXJuIGxpKDQsMixhLGIpfWZ1bmN0aW9uIG9pKGEsYil7cmV0dXJuIGxpKDQsNCxhLGIpfVxuZnVuY3Rpb24gcGkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBxaShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIGxpKDQsNCxwaS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiByaSgpe31mdW5jdGlvbiBzaShhLGIpe3ZhciBjPVVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZNaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRpKGEsYil7dmFyIGM9VWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJk1oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIHVpKGEsYixjKXtpZigwPT09KEhoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxkaD0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxNLmxhbmVzfD1jLHJofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiB2aShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1HaC50cmFuc2l0aW9uO0doLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxHaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIHdpKCl7cmV0dXJuIFVoKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIHhpKGEsYixjKXt2YXIgZD15aShhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZih6aShhKSlBaShiLGMpO2Vsc2UgaWYoYz1oaChhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9UigpO2dpKGMsYSxkLGUpO0JpKGMsYixkKX19XG5mdW5jdGlvbiBpaShhLGIsYyl7dmFyIGQ9eWkoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoemkoYSkpQWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsZ2goYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1oaChhLGIsZSxkKTtudWxsIT09YyYmKGU9UigpLGdpKGMsYSxkLGUpLEJpKGMsYixkKSl9fVxuZnVuY3Rpb24gemkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1NfHxudWxsIT09YiYmYj09PU19ZnVuY3Rpb24gQWkoYSxiKXtKaD1JaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEJpKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgUmg9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOlAsdXNlQ29udGV4dDpQLHVzZUVmZmVjdDpQLHVzZUltcGVyYXRpdmVIYW5kbGU6UCx1c2VJbnNlcnRpb25FZmZlY3Q6UCx1c2VMYXlvdXRFZmZlY3Q6UCx1c2VNZW1vOlAsdXNlUmVkdWNlcjpQLHVzZVJlZjpQLHVzZVN0YXRlOlAsdXNlRGVidWdWYWx1ZTpQLHVzZURlZmVycmVkVmFsdWU6UCx1c2VUcmFuc2l0aW9uOlAsdXNlTXV0YWJsZVNvdXJjZTpQLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlAsdXNlSWQ6UCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LE9oPXtyZWFkQ29udGV4dDplaCx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe1RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6ZWgsdXNlRWZmZWN0Om1pLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBraSg0MTk0MzA4LFxuNCxwaS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGtpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2koNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1UaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1UaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXhpLmJpbmQobnVsbCxNLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cblRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOmhpLHVzZURlYnVnVmFsdWU6cmksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gVGgoKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1oaSghMSksYj1hWzBdO2E9dmkuYmluZChudWxsLGFbMV0pO1RoKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TSxlPVRoKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVEpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KEhoJjMwKXx8ZGkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9ZjttaShhaS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2JpKDksY2kuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1UaCgpLGI9US5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1LaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9TGgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFBoPXtyZWFkQ29udGV4dDplaCx1c2VDYWxsYmFjazpzaSx1c2VDb250ZXh0OmVoLHVzZUVmZmVjdDokaCx1c2VJbXBlcmF0aXZlSGFuZGxlOnFpLHVzZUluc2VydGlvbkVmZmVjdDpuaSx1c2VMYXlvdXRFZmZlY3Q6b2ksdXNlTWVtbzp0aSx1c2VSZWR1Y2VyOldoLHVzZVJlZjpqaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBXaChWaCl9LFxudXNlRGVidWdWYWx1ZTpyaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVVoKCk7cmV0dXJuIHVpKGIsTi5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9V2goVmgpWzBdLGI9VWgoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOlloLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlpoLHVzZUlkOndpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUWg9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOnNpLHVzZUNvbnRleHQ6ZWgsdXNlRWZmZWN0OiRoLHVzZUltcGVyYXRpdmVIYW5kbGU6cWksdXNlSW5zZXJ0aW9uRWZmZWN0Om5pLHVzZUxheW91dEVmZmVjdDpvaSx1c2VNZW1vOnRpLHVzZVJlZHVjZXI6WGgsdXNlUmVmOmppLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIFhoKFZoKX0sdXNlRGVidWdWYWx1ZTpyaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVVoKCk7cmV0dXJuIG51bGw9PT1cbk4/Yi5tZW1vaXplZFN0YXRlPWE6dWkoYixOLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1YaChWaClbMF0sYj1VaCgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6WWgsdXNlU3luY0V4dGVybmFsU3RvcmU6WmgsdXNlSWQ6d2ksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBDaShhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn1mdW5jdGlvbiBEaShhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgRWk9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9UigpLGU9eWkoYSksZj1taChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPW5oKGEsZixlKTtudWxsIT09YiYmKGdpKGIsYSxlLGQpLG9oKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9UigpLGU9eWkoYSksZj1taChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9bmgoYSxmLGUpO251bGwhPT1iJiYoZ2koYixhLGUsZCksb2goYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1SKCksZD1cbnlpKGEpLGU9bWgoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPW5oKGEsZSxkKTtudWxsIT09YiYmKGdpKGIsYSxkLGMpLG9oKGIsYSxkKSl9fTtmdW5jdGlvbiBGaShhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPWVoKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1FaTthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEhpKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZFaS5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIElpKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9e307a2goYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1laChmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihEaShhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZFaS5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxxaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1mdW5jdGlvbiBKaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19XG5mdW5jdGlvbiBLaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1mdW5jdGlvbiBMaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gTmkoYSxiLGMpe2M9bWgoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7T2l8fChPaT0hMCxQaT1kKTtMaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFFpKGEsYixjKXtjPW1oKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0xpKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtMaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVJpP1JpPW5ldyBTZXQoW3RoaXNdKTpSaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBNaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVRpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFVpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9bWgoLTEsMSksYi50YWc9MixuaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgV2k9dWEuUmVhY3RDdXJyZW50T3duZXIsZGg9ITE7ZnVuY3Rpb24gWGkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9WZyhiLG51bGwsYyxkKTpVZyhiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFlpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtjaChiLGUpO2Q9TmgoYSxiLGMsZCxmLGUpO2M9U2goKTtpZihudWxsIT09YSYmIWRoKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsWmkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WGkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiAkaShhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFhaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixiaihhLGIsZixkLGUpO2E9UmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuIFppKGEsYixlKX1iLmZsYWdzfD0xO2E9UGcoZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBiaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihkaD0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoZGg9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxaaShhLGIsZSl9cmV0dXJuIGNqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBkaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZWosZmopLGZqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZWosZmopLGZqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhlaixmaik7Zmp8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGVqLGZqKSxmanw9ZDtYaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBnaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBjaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7Y2goYixlKTtjPU5oKGEsYixjLGQsZixlKTtkPVNoKCk7aWYobnVsbCE9PWEmJiFkaClyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLFppKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1hpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO2NoKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWlqKGEsYiksR2koYixjLGQpLElpKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPWVoKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZIaShiLGcsZCxsKTtqaD0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO3FoKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8amg/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRGkoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPWpofHxGaShiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtsaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkNpKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPWVoKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZIaShiLGcsZCxrKTtqaD0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7cWgoYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8amg/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoRGkoYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPWpofHxGaShiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4gamooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gamooYSxiLGMsZCxlLGYpe2dqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLFppKGEsYixmKTtkPWIuc3RhdGVOb2RlO1dpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9VWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1VZyhiLG51bGwsaCxmKSk6WGkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBraihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTt5aChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBsaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1hpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBtaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG5qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIG9qKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPUwuY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhMLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1waihnLGQsMCxudWxsKSxhPVRnKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW5qKGMpLGIubWVtb2l6ZWRTdGF0ZT1taixhKTpxaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiByaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9UGcoZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj1QZyhoLGYpOihmPVRnKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/bmooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW1qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPVBnKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHFqKGEsYil7Yj1waih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gc2ooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO1VnKGIsYS5jaGlsZCxudWxsLGMpO2E9cWooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHJqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9S2koRXJyb3IocCg0MjIpKSksc2ooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXBqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPVRnKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmVWcoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW5qKGcpO2IubWVtb2l6ZWRTdGF0ZT1tajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gc2ooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1LaShmLGQsdm9pZCAwKTtyZXR1cm4gc2ooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihkaHx8aCl7ZD1RO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsaWgoYSxlKSxnaShkLGEsZSwtMSkpfXRqKCk7ZD1LaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gc2ooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dWouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXFqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB2aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO2JoKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB3aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtYaShhLGIsZC5jaGlsZHJlbixjKTtkPUwuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ2aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXZqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhMLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1DaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3dqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09Q2goYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXdqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOndqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uIFppKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtyaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9UGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVBnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB5aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6a2ooYik7SWcoKTticmVhaztjYXNlIDU6QWgoYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDp5aChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coV2csZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKEwsTC5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBvaihhLGIsYyk7RyhMLEwuY3VycmVudCYxKTthPVppKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhMLEwuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geGooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTCxMLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxkaihhLGIsYyl9cmV0dXJuIFppKGEsYixjKX12YXIgemosQWosQmosQ2o7XG56aj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07QWo9ZnVuY3Rpb24oKXt9O1xuQmo9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO3hoKHVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtDaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIERqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBFaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7emgoKTtFKFdmKTtFKEgpO0VoKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihGaih6Zyksemc9bnVsbCkpO0FqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6QmgoYik7dmFyIGU9eGgod2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQmooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT14aCh1aC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7emooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPXhoKHdoLmN1cnJlbnQpO3hoKHVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEZqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShMLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnRqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiB6aCgpLFxuQWooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGFoKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShMKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKURqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1DaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0RqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhMLEwuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkdqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRGooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9Q2goZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxEaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+R2omJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRGooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPUwuY3VycmVudCxHKEwsZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIEhqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZmomMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIElqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiB6aCgpLEUoV2YpLEUoSCksRWgoKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBCaChiKSxudWxsO2Nhc2UgMTM6RShMKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShMKSxudWxsO2Nhc2UgNDpyZXR1cm4gemgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGFoKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIEhqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEpqPSExLFU9ITEsS2o9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIExqKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBNaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE5qPSExO1xuZnVuY3Rpb24gT2ooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpDaShiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU5qO05qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUGooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTWooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUWooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFJqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBTaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsU2ooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBUaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFVqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFRqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBWaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoVmooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylWaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspV2ooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWGo9ITE7ZnVuY3Rpb24gWWooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KVpqKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIFpqKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TGooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVhqO1g9bnVsbDtZaihhLGIsYyk7WD1kO1hqPWU7bnVsbCE9PVgmJihYaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWGo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1YajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WGo9ITA7XG5ZaihhLGIsYyk7WD1kO1hqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9NaihjLGIsZyk6MCE9PShmJjQpJiZNaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1ZaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTGooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVlqKGEsYixjKTticmVhaztjYXNlIDIxOllqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWWooYSxiLGMpLFU9ZCk6WWooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WWooYSxiLGMpfX1mdW5jdGlvbiBhayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBLaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWJrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gY2soYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WGo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1hqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztYaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTtaaihmLGcsZSk7WD1udWxsO1hqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZGsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGRrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNrKGIsYSk7ZWsoYSk7aWYoZCY0KXt0cnl7UGooMyxhLGEucmV0dXJuKSxRaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UGooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpjayhiLGEpO2VrKGEpO2QmNTEyJiZudWxsIT09YyYmTGooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmNrKGIsYSk7ZWsoYSk7ZCY1MTImJm51bGwhPT1jJiZMaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpjayhiLGEpO2VrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpjayhiLGEpO2VrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpjayhiLGEpO2VrKGEpO2JyZWFrO2Nhc2UgMTM6Y2soYixhKTtlayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGZrPUIoKSkpO2QmNCYmYWsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGNrKGIsYSksVT1sKTpjayhiLGEpO2VrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpQaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpMaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1OkxqKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7Z2socSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6Z2socSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpjayhiLGEpO2VrKGEpO2QmNCYmYWsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmNrKGIsXG5hKSxlayhhKX19ZnVuY3Rpb24gZWsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihUaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1VaihhKTtXaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VWooYSk7VmooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaGsoYSxiLGMpe1Y9YTtpayhhLGIsYyl9XG5mdW5jdGlvbiBpayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8Smo7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Kajt2YXIgbD1VO0pqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9qayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmprKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixpayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0pqPWg7VT1sfWtrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6a2soYSxiLGMpfX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UWooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpDaShiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZzaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9c2goYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlJqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGdrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBqayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtRaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1JqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7UmooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBsaz1NYXRoLmNlaWwsbWs9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixuaz11YS5SZWFjdEN1cnJlbnRPd25lcixvaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUT1udWxsLFk9bnVsbCxaPTAsZmo9MCxlaj1VZigwKSxUPTAscGs9bnVsbCxyaD0wLHFrPTAscms9MCxzaz1udWxsLHRrPW51bGwsZms9MCxHaj1JbmZpbml0eSx1az1udWxsLE9pPSExLFBpPW51bGwsUmk9bnVsbCx2az0hMSx3az1udWxsLHhrPTAseWs9MCx6az1udWxsLEFrPS0xLEJrPTA7ZnVuY3Rpb24gUigpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09QWs/QWs6QWs9QigpfVxuZnVuY3Rpb24geWkoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUJrJiYoQms9eWMoKSksQms7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIGdpKGEsYixjLGQpe2lmKDUwPHlrKXRocm93IHlrPTAsems9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1RKWE9PT1RJiYoMD09PShLJjIpJiYocWt8PWMpLDQ9PT1UJiZDayhhLFopKSxEayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihHaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIERrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1RP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEVrLmJpbmQobnVsbCxhKSk6aGcoRWsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9RmsoYyxHay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gR2soYSxiKXtBaz0tMTtCaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKEhrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1RP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUlrKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUprKCk7aWYoUSE9PWF8fFohPT1iKXVrPW51bGwsR2o9QigpKzUwMCxLayhhLGIpO2RvIHRyeXtMaygpO2JyZWFrfWNhdGNoKGgpe01rKGEsaCl9d2hpbGUoMSk7JGcoKTttay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUT1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1OayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1wayxLayhhLDApLENrKGEsZCksRGsoYSxCKCkpLGM7aWYoNj09PWIpQ2soYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFPayhlKSYmKGI9SWsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1OayhhLGYpKSksMT09PWIpKXRocm93IGM9cGssS2soYSwwKSxDayhhLGQpLERrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UGsoYSx0ayx1ayk7YnJlYWs7Y2FzZSAzOkNrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWZrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe1IoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFBrLmJpbmQobnVsbCxhLHRrLHVrKSxiKTticmVha31QayhhLHRrLHVrKTticmVhaztjYXNlIDQ6Q2soYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpsayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihQay5iaW5kKG51bGwsYSx0ayx1ayksZCk7YnJlYWt9UGsoYSx0ayx1ayk7YnJlYWs7Y2FzZSA1OlBrKGEsdGssdWspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1EayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Hay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE5rKGEsYil7dmFyIGM9c2s7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoS2soYSxiKS5mbGFnc3w9MjU2KTthPUlrKGEsYik7MiE9PWEmJihiPXRrLHRrPWMsbnVsbCE9PWImJkZqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBGaihhKXtudWxsPT09dGs/dGs9YTp0ay5wdXNoLmFwcGx5KHRrLGEpfVxuZnVuY3Rpb24gT2soYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIENrKGEsYil7YiY9fnJrO2ImPX5xazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBFayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtIaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBEayhhLEIoKSksbnVsbDt2YXIgYz1JayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9TmsoYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1wayxLayhhLDApLENrKGEsYiksRGsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1BrKGEsdGssdWspO0RrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFFrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEdqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBSayhhKXtudWxsIT09d2smJjA9PT13ay50YWcmJjA9PT0oSyY2KSYmSGsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9b2sudHJhbnNpdGlvbixkPUM7dHJ5e2lmKG9rLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLG9rLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBIaigpe2ZqPWVqLmN1cnJlbnQ7RShlail9XG5mdW5jdGlvbiBLayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzp6aCgpO0UoV2YpO0UoSCk7RWgoKTticmVhaztjYXNlIDU6QmgoZCk7YnJlYWs7Y2FzZSA0OnpoKCk7YnJlYWs7Y2FzZSAxMzpFKEwpO2JyZWFrO2Nhc2UgMTk6RShMKTticmVhaztjYXNlIDEwOmFoKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOkhqKCl9Yz1jLnJldHVybn1RPWE7WT1hPVBnKGEuY3VycmVudCxudWxsKTtaPWZqPWI7VD0wO3BrPW51bGw7cms9cWs9cmg9MDt0az1zaz1udWxsO2lmKG51bGwhPT1maCl7Zm9yKGI9XG4wO2I8ZmgubGVuZ3RoO2IrKylpZihjPWZoW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfWZoPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBNayhhLGIpe2Rve3ZhciBjPVk7dHJ5eyRnKCk7RmguY3VycmVudD1SaDtpZihJaCl7Zm9yKHZhciBkPU0ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9SWg9ITF9SGg9MDtPPU49TT1udWxsO0poPSExO0toPTA7bmsuY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtwaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1VaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztWaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZTaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1NpKGYsbCxiKTt0aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1VaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7VmkoSixnLGgsZixiKTtKZyhKaShrLGgpKTticmVhayBhfX1mPWs9SmkoayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXNrP3NrPVtmXTpzay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9TmkoZixrLGIpO3BoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Uml8fCFSaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1RaShmLGgsYik7cGgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1TayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEprKCl7dmFyIGE9bWsuY3VycmVudDttay5jdXJyZW50PVJoO3JldHVybiBudWxsPT09YT9SaDphfVxuZnVuY3Rpb24gdGooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09UXx8MD09PShyaCYyNjg0MzU0NTUpJiYwPT09KHFrJjI2ODQzNTQ1NSl8fENrKFEsWil9ZnVuY3Rpb24gSWsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9SmsoKTtpZihRIT09YXx8WiE9PWIpdWs9bnVsbCxLayhhLGIpO2RvIHRyeXtUaygpO2JyZWFrfWNhdGNoKGUpe01rKGEsZSl9d2hpbGUoMSk7JGcoKTtLPWM7bWsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7UT1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBUaygpe2Zvcig7bnVsbCE9PVk7KVVrKFkpfWZ1bmN0aW9uIExrKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVVrKFkpfWZ1bmN0aW9uIFVrKGEpe3ZhciBiPVZrKGEuYWx0ZXJuYXRlLGEsZmopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9TayhhKTpZPWI7bmsuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gU2soYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RWooYyxiLGZqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUlqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUGsoYSxiLGMpe3ZhciBkPUMsZT1vay50cmFuc2l0aW9uO3RyeXtvay50cmFuc2l0aW9uPW51bGwsQz0xLFdrKGEsYixjLGQpfWZpbmFsbHl7b2sudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdrKGEsYixjLGQpe2RvIEhrKCk7d2hpbGUobnVsbCE9PXdrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVEmJihZPVE9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8dmt8fCh2az0hMCxGayhoYyxmdW5jdGlvbigpe0hrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPW9rLnRyYW5zaXRpb247b2sudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O25rLmN1cnJlbnQ9bnVsbDtPaihhLGMpO2RrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztoayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO29rLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3ZrJiYodms9ITEsd2s9YSx4az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoUmk9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RGsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKE9pKXRocm93IE9pPSExLGE9UGksUGk9bnVsbCxhOzAhPT0oeGsmMSkmJjAhPT1hLnRhZyYmSGsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09ems/eWsrKzooeWs9MCx6az1hKTp5az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBIaygpe2lmKG51bGwhPT13ayl7dmFyIGE9RGMoeGspLGI9b2sudHJhbnNpdGlvbixjPUM7dHJ5e29rLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09d2spdmFyIGQ9ITE7ZWxzZXthPXdrO3drPW51bGw7eGs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpQaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47U2oobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UGooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxvay50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFhrKGEsYixjKXtiPUppKGMsYik7Yj1OaShhLGIsMSk7YT1uaChhLGIsMSk7Yj1SKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRGsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWGsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WGsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Uml8fCFSaS5oYXMoZCkpKXthPUppKGMsYSk7YT1RaShiLGEsMSk7Yj1uaChiLGEsMSk7YT1SKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRGsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPVIoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7UT09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZms/S2soYSwwKTpya3w9Yyk7RGsoYSxiKX1mdW5jdGlvbiBZayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPVIoKTthPWloKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRGsoYSxjKSl9ZnVuY3Rpb24gdWooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1lrKGEsYyl9XG5mdW5jdGlvbiBiayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtZayhhLGMpfXZhciBWaztcblZrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClkaD0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIGRoPSExLHlqKGEsYixjKTtkaD0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIGRoPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2lqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7Y2goYixjKTtlPU5oKG51bGwsYixkLGEsZSxjKTt2YXIgZj1TaCgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsa2goYiksZS51cGRhdGVyPUVpLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixJaShiLGQsYSxjKSxiPWpqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFhpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7aWooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz1aayhkKTthPUNpKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWNqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1oaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVlpKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9JGkobnVsbCxiLGQsQ2koZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLGNqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLGhqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2tqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtsaChhLGIpO3FoKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUppKEVycm9yKHAoNDIzKSksYik7Yj1saihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1KaShFcnJvcihwKDQyNCkpLGIpO2I9bGooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1WZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPVppKGEsYixjKTticmVhayBhfVhpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEFoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuZ2ooYSxiKSxYaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gb2ooYSxiLGMpO2Nhc2UgNDpyZXR1cm4geWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9VWcoYixudWxsLGQsYyk6WGkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLFlpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKFdnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPVppKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPW1oKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtiaChmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtiaChnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WGkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjaChiLGMpLGU9ZWgoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWGkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9Q2koZCxiLnBlbmRpbmdQcm9wcyksZT1DaShkLnR5cGUsZSksJGkoYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBiaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksaWooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLGNoKGIsYyksR2koYixkLGUpLElpKGIsZCxlLGMpLGpqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geGooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGRqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gRmsoYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uICRrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgJGsoYSxiLGMsZCl9ZnVuY3Rpb24gYWooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIFprKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBQZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBSZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYWooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIFRnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBwaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFRnKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHBqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24gUWcoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gU2coYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhbChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBibChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYWwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2toKGYpO3JldHVybiBhfWZ1bmN0aW9uIGNsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBkbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGVsKGEsYixjLGQsZSxmLGcsaCxrKXthPWJsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWRsKG51bGwpO2M9YS5jdXJyZW50O2Q9UigpO2U9eWkoYyk7Zj1taChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO25oKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RGsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBmbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1SKCksZz15aShlKTtjPWRsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9bWgoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1uaChlLGIsZyk7bnVsbCE9PWEmJihnaShhLGUsZyxmKSxvaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gZ2woYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBobChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gaWwoYSxiKXtobChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaGwoYSxiKX1mdW5jdGlvbiBqbCgpe3JldHVybiBudWxsfXZhciBrbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbGwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5tbC5wcm90b3R5cGUucmVuZGVyPWxsLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7ZmwoYSxiLG51bGwsbnVsbCl9O21sLnByb3RvdHlwZS51bm1vdW50PWxsLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87UmsoZnVuY3Rpb24oKXtmbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm1sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gbmwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIG9sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBwbCgpe31cbmZ1bmN0aW9uIHFsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWdsKGcpO2YuY2FsbChhKX19dmFyIGc9ZWwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscGwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7UmsoKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWdsKGspO2guY2FsbChhKX19dmFyIGs9YmwoYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHBsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1JrKGZ1bmN0aW9uKCl7ZmwoYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWdsKGcpO2guY2FsbChhKX19ZmwoYixnLGEsZSl9ZWxzZSBnPXFsKGMsYixhLGUsZCk7cmV0dXJuIGdsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLERrKGIsQigpKSwwPT09KEsmNikmJihHaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlJrKGZ1bmN0aW9uKCl7dmFyIGI9aWgoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9UigpO2dpKGIsYSwxLGMpfX0pLGlsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWloKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9UigpO2dpKGIsYSwxMzQyMTc3MjgsYyl9aWwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9eWkoYSksYz1paChhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1SKCk7Z2koYyxhLGIsZCl9aWwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9UWs7SGI9Ums7XG52YXIgc2w9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFFrXX0sdGw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMy4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB1bD17YnVuZGxlVHlwZTp0bC5idW5kbGVUeXBlLHZlcnNpb246dGwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnRsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dGwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5qbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMy4xLW5leHQtZjEzMzhmODA4MC0yMDI0MDQyNlwifTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHZsPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZighdmwuaXNEaXNhYmxlZCYmdmwuc3VwcG9ydHNGaWJlcil0cnl7a2M9dmwuaW5qZWN0KHVsKSxsYz12bH1jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9c2w7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFubChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBjbChhLGIsbnVsbCxjKX07ZXhwb3J0cy5jcmVhdGVSb290PWZ1bmN0aW9uKGEsYil7aWYoIW5sKGEpKXRocm93IEVycm9yKHAoMjk5KSk7dmFyIGM9ITEsZD1cIlwiLGU9a2w7bnVsbCE9PWImJnZvaWQgMCE9PWImJighMD09PWIudW5zdGFibGVfc3RyaWN0TW9kZSYmKGM9ITApLHZvaWQgMCE9PWIuaWRlbnRpZmllclByZWZpeCYmKGQ9Yi5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1iLm9uUmVjb3ZlcmFibGVFcnJvciYmKGU9Yi5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWJsKGEsMSwhMSxudWxsLG51bGwsYywhMSxkLGUpO2FbdWZdPWIuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7cmV0dXJuIG5ldyBsbChiKX07XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHAoMTg4KSk7YT1PYmplY3Qua2V5cyhhKS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihwKDI2OCxhKSk7fWE9WmIoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhKXtyZXR1cm4gUmsoYSl9O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHJsKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3Q9ZnVuY3Rpb24oYSxiLGMpe2lmKCFubChhKSl0aHJvdyBFcnJvcihwKDQwNSkpO3ZhciBkPW51bGwhPWMmJmMuaHlkcmF0ZWRTb3VyY2VzfHxudWxsLGU9ITEsZj1cIlwiLGc9a2w7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJighMD09PWMudW5zdGFibGVfc3RyaWN0TW9kZSYmKGU9ITApLHZvaWQgMCE9PWMuaWRlbnRpZmllclByZWZpeCYmKGY9Yy5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1jLm9uUmVjb3ZlcmFibGVFcnJvciYmKGc9Yy5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWVsKGIsbnVsbCxhLDEsbnVsbCE9Yz9jOm51bGwsZSwhMSxmLGcpO2FbdWZdPWIuY3VycmVudDtzZihhKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspYz1kW2FdLGU9Yy5fZ2V0VmVyc2lvbixlPWUoYy5fc291cmNlKSxudWxsPT1iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtjLGVdOmIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGMsXG5lKTtyZXR1cm4gbmV3IG1sKGIpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHJsKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhSayhmdW5jdGlvbigpe3JsKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt1Zl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVFrO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighb2woYykpdGhyb3cgRXJyb3IocCgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcihwKDM4KSk7cmV0dXJuIHJsKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxOC4zLjEtbmV4dC1mMTMzOGY4MDgwLTIwMjQwNDI2XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZnVuY3Rpb24gWCgpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fVxuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtleHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O1xuZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO2V4cG9ydHMuYWN0PVg7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsZSl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIithK1wiLlwiKTt2YXIgZD1DKHt9LGEucHJvcHMpLGM9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSi5jYWxsKGIsZikmJiFMLmhhc093blByb3BlcnR5KGYpJiYoZFtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtcbmZvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmMscmVmOmsscHJvcHM6ZCxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhKXthPXskJHR5cGVvZjp1LF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCxfZGVmYXVsdFZhbHVlOm51bGwsX2dsb2JhbE5hbWU6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O1xuZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO2V4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlR9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eCx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb249e307dHJ5e2EoKX1maW5hbGx5e1YudHJhbnNpdGlvbj1ifX07ZXhwb3J0cy51bnN0YWJsZV9hY3Q9WDtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpfTtcbmV4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O2V4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VJbnNlcnRpb25FZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUxheW91dEVmZmVjdChhLGIpfTtcbmV4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtleHBvcnRzLnVzZVRyYW5zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZVRyYW5zaXRpb24oKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMy4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7ZnVuY3Rpb24gZihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7MDxjOyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYoMDxnKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBoKGEpe3JldHVybiAwPT09YS5sZW5ndGg/bnVsbDphWzBdfWZ1bmN0aW9uIGsoYSl7aWYoMD09PWEubGVuZ3RoKXJldHVybiBudWxsO3ZhciBiPWFbMF0sYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoLHc9ZT4+PjE7ZDx3Oyl7dmFyIG09MiooZCsxKS0xLEM9YVttXSxuPW0rMSx4PWFbbl07aWYoMD5nKEMsYykpbjxlJiYwPmcoeCxDKT8oYVtkXT14LGFbbl09YyxkPW4pOihhW2RdPUMsYVttXT1jLGQ9bSk7ZWxzZSBpZihuPGUmJjA+Zyh4LGMpKWFbZF09eCxhW25dPWMsZD1uO2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9XG5mdW5jdGlvbiBnKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfWlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX12YXIgcj1bXSx0PVtdLHU9MSx2PW51bGwseT0zLHo9ITEsQT0hMSxCPSExLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpudWxsLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6bnVsbCxGPVwidW5kZWZpbmVkXCIhPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpudWxsO1xuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyYmbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcuYmluZChuYXZpZ2F0b3Iuc2NoZWR1bGluZyk7ZnVuY3Rpb24gRyhhKXtmb3IodmFyIGI9aCh0KTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKWsodCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlrKHQpLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsZihyLGIpO2Vsc2UgYnJlYWs7Yj1oKHQpfX1mdW5jdGlvbiBIKGEpe0I9ITE7RyhhKTtpZighQSlpZihudWxsIT09aChyKSlBPSEwLEkoSik7ZWxzZXt2YXIgYj1oKHQpO251bGwhPT1iJiZLKEgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gSihhLGIpe0E9ITE7QiYmKEI9ITEsRShMKSxMPS0xKTt6PSEwO3ZhciBjPXk7dHJ5e0coYik7Zm9yKHY9aChyKTtudWxsIT09diYmKCEodi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIU0oKSk7KXt2YXIgZD12LmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2LmNhbGxiYWNrPW51bGw7eT12LnByaW9yaXR5TGV2ZWw7dmFyIGU9ZCh2LmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/di5jYWxsYmFjaz1lOnY9PT1oKHIpJiZrKHIpO0coYil9ZWxzZSBrKHIpO3Y9aChyKX1pZihudWxsIT09dil2YXIgdz0hMDtlbHNle3ZhciBtPWgodCk7bnVsbCE9PW0mJksoSCxtLnN0YXJ0VGltZS1iKTt3PSExfXJldHVybiB3fWZpbmFsbHl7dj1udWxsLHk9Yyx6PSExfX12YXIgTj0hMSxPPW51bGwsTD0tMSxQPTUsUT0tMTtcbmZ1bmN0aW9uIE0oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKS1RPFA/ITE6ITB9ZnVuY3Rpb24gUigpe2lmKG51bGwhPT1PKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1E9YTt2YXIgYj0hMDt0cnl7Yj1PKCEwLGEpfWZpbmFsbHl7Yj9TKCk6KE49ITEsTz1udWxsKX19ZWxzZSBOPSExfXZhciBTO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBGKVM9ZnVuY3Rpb24oKXtGKFIpfTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9UjtTPWZ1bmN0aW9uKCl7VS5wb3N0TWVzc2FnZShudWxsKX19ZWxzZSBTPWZ1bmN0aW9uKCl7RChSLDApfTtmdW5jdGlvbiBJKGEpe089YTtOfHwoTj0hMCxTKCkpfWZ1bmN0aW9uIEsoYSxiKXtMPUQoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtBfHx6fHwoQT0hMCxJKEopKX07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpQPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gaChyKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaCh5KXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj15fXZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7eT1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz15O3k9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e3k9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDp1KyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxmKHQsYSksbnVsbD09PWgocikmJmE9PT1oKHQpJiYoQj8oRShMKSxMPS0xKTpCPSEwLEsoSCxjLWQpKSk6KGEuc29ydEluZGV4PWUsZihyLGEpLEF8fHp8fChBPSEwLEkoSikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPU07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9eTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7eT1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qIVxuXHRDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cblx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcblx0aHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9ICcnO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoYXJnKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSBhcHBlbmRDbGFzcyhjbGFzc2VzLCBwYXJzZVZhbHVlKGFyZykpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VWYWx1ZSAoYXJnKSB7XG5cdFx0aWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG5cdFx0XHRyZXR1cm4gYXJnO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgYXJnICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZy50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyAmJiAhYXJnLnRvU3RyaW5nLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ1tuYXRpdmUgY29kZV0nKSkge1xuXHRcdFx0cmV0dXJuIGFyZy50b1N0cmluZygpO1xuXHRcdH1cblxuXHRcdHZhciBjbGFzc2VzID0gJyc7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdGNsYXNzZXMgPSBhcHBlbmRDbGFzcyhjbGFzc2VzLCBrZXkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXBwZW5kQ2xhc3MgKHZhbHVlLCBuZXdDbGFzcykge1xuXHRcdGlmICghbmV3Q2xhc3MpIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdFxuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlICsgJyAnICsgbmV3Q2xhc3M7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdmFsdWUgKyBuZXdDbGFzcztcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8qKlxuICogQHJlbWl4LXJ1bi9yb3V0ZXIgdjEuMjAuMFxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBUeXBlcyBhbmQgQ29uc3RhbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBBY3Rpb25zIHJlcHJlc2VudCB0aGUgdHlwZSBvZiBjaGFuZ2UgdG8gYSBsb2NhdGlvbiB2YWx1ZS5cbiAqL1xudmFyIEFjdGlvbjtcbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcbiAgICogQSBQVVNIIGluZGljYXRlcyBhIG5ldyBlbnRyeSBiZWluZyBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaCBhcyB3aGVuXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXG4gICAqL1xuICBBY3Rpb25bXCJQdXNoXCJdID0gXCJQVVNIXCI7XG4gIC8qKlxuICAgKiBBIFJFUExBQ0UgaW5kaWNhdGVzIHRoZSBlbnRyeSBhdCB0aGUgY3VycmVudCBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFja1xuICAgKiBiZWluZyByZXBsYWNlZCBieSBhIG5ldyBvbmUuXG4gICAqL1xuICBBY3Rpb25bXCJSZXBsYWNlXCJdID0gXCJSRVBMQUNFXCI7XG59KShBY3Rpb24gfHwgKEFjdGlvbiA9IHt9KSk7XG5jb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcbi8qKlxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgbGV0IHtcbiAgICBpbml0aWFsRW50cmllcyA9IFtcIi9cIl0sXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIHY1Q29tcGF0ID0gZmFsc2VcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBlbnRyaWVzOyAvLyBEZWNsYXJlIHNvIHdlIGNhbiBhY2Nlc3MgZnJvbSBjcmVhdGVNZW1vcnlMb2NhdGlvblxuICBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKChlbnRyeSwgaW5kZXgpID0+IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKGVudHJ5LCB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsIGluZGV4ID09PSAwID8gXCJkZWZhdWx0XCIgOiB1bmRlZmluZWQpKTtcbiAgbGV0IGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuICBmdW5jdGlvbiBjbGFtcEluZGV4KG4pIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgMCksIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uKCkge1xuICAgIHJldHVybiBlbnRyaWVzW2luZGV4XTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGVudHJpZXMgPyBnZXRDdXJyZW50TG9jYXRpb24oKS5wYXRobmFtZSA6IFwiL1wiLCB0bywgc3RhdGUsIGtleSk7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeTogXCIgKyBKU09OLnN0cmluZ2lmeSh0bykpO1xuICAgIHJldHVybiBsb2NhdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmLFxuICAgIGNyZWF0ZVVSTCh0bykge1xuICAgICAgcmV0dXJuIG5ldyBVUkwoY3JlYXRlSHJlZih0byksIFwiaHR0cDovL2xvY2FsaG9zdFwiKTtcbiAgICB9LFxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLnBhdGhuYW1lIHx8IFwiXCIsXG4gICAgICAgIHNlYXJjaDogcGF0aC5zZWFyY2ggfHwgXCJcIixcbiAgICAgICAgaGFzaDogcGF0aC5oYXNoIHx8IFwiXCJcbiAgICAgIH07XG4gICAgfSxcbiAgICBwdXNoKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGluZGV4ICs9IDE7XG4gICAgICBlbnRyaWVzLnNwbGljZShpbmRleCwgZW50cmllcy5sZW5ndGgsIG5leHRMb2NhdGlvbik7XG4gICAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhOiAxXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSk7XG4gICAgICBlbnRyaWVzW2luZGV4XSA9IG5leHRMb2NhdGlvbjtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGE6IDBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnbyhkZWx0YSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICAgIGxldCBuZXh0SW5kZXggPSBjbGFtcEluZGV4KGluZGV4ICsgZGVsdGEpO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGVudHJpZXNbbmV4dEluZGV4XTtcbiAgICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxpc3Rlbihmbikge1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8qKlxuICogQnJvd3NlciBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gcmVndWxhciBVUkxzLiBUaGlzIGlzIHRoZSBzdGFuZGFyZCBmb3JcbiAqIG1vc3Qgd2ViIGFwcHMsIGJ1dCBpdCByZXF1aXJlcyBzb21lIGNvbmZpZ3VyYXRpb24gb24gdGhlIHNlcnZlciB0byBlbnN1cmUgeW91XG4gKiBzZXJ2ZSB0aGUgc2FtZSBhcHAgYXQgbXVsdGlwbGUgVVJMcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWJyb3dzZXJoaXN0b3J5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VyTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0gPSB3aW5kb3cubG9jYXRpb247XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sXG4gICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VySHJlZih3aW5kb3csIHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cbiAgcmV0dXJuIGdldFVybEJhc2VkSGlzdG9yeShjcmVhdGVCcm93c2VyTG9jYXRpb24sIGNyZWF0ZUJyb3dzZXJIcmVmLCBudWxsLCBvcHRpb25zKTtcbn1cbi8qKlxuICogSGFzaCBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gd2luZG93LmxvY2F0aW9uLmhhc2guIFRoaXMgbWFrZXMgaXQgaWRlYWxcbiAqIGZvciBzaXR1YXRpb25zIHdoZXJlIHlvdSBkb24ndCB3YW50IHRvIHNlbmQgdGhlIGxvY2F0aW9uIHRvIHRoZSBzZXJ2ZXIgZm9yXG4gKiBzb21lIHJlYXNvbiwgZWl0aGVyIGJlY2F1c2UgeW91IGRvIGNhbm5vdCBjb25maWd1cmUgaXQgb3IgdGhlIFVSTCBzcGFjZSBpc1xuICogcmVzZXJ2ZWQgZm9yIHNvbWV0aGluZyBlbHNlLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlaGFzaGhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgICBoYXNoID0gXCJcIlxuICAgIH0gPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcbiAgICAvLyBIYXNoIFVSTCBzaG91bGQgYWx3YXlzIGhhdmUgYSBsZWFkaW5nIC8ganVzdCBsaWtlIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZVxuICAgIC8vIGRvZXMsIHNvIGlmIGFuIGFwcCBlbmRzIHVwIGF0IGEgcm91dGUgbGlrZSAvI3NvbWV0aGluZyB0aGVuIHdlIGFkZCBhXG4gICAgLy8gbGVhZGluZyBzbGFzaCBzbyBhbGwgb2Ygb3VyIHBhdGgtbWF0Y2hpbmcgYmVoYXZlcyB0aGUgc2FtZSBhcyBpZiBpdCB3b3VsZFxuICAgIC8vIGluIGEgYnJvd3NlciByb3V0ZXIuICBUaGlzIGlzIHBhcnRpY3VsYXJseSBpbXBvcnRhbnQgd2hlbiB0aGVyZSBleGlzdHMgYVxuICAgIC8vIHJvb3Qgc3BsYXQgcm91dGUgKDxSb3V0ZSBwYXRoPVwiKlwiPikgc2luY2UgdGhhdCBtYXRjaGVzIGludGVybmFsbHkgYWdhaW5zdFxuICAgIC8vIFwiLypcIiBhbmQgd2UnZCBleHBlY3QgLyNzb21ldGhpbmcgdG8gNDA0IGluIGEgaGFzaCByb3V0ZXIgYXBwLlxuICAgIGlmICghcGF0aG5hbWUuc3RhcnRzV2l0aChcIi9cIikgJiYgIXBhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuXCIpKSB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiICsgcGF0aG5hbWU7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LFxuICAgIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaEhyZWYod2luZG93LCB0bykge1xuICAgIGxldCBiYXNlID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpO1xuICAgIGxldCBocmVmID0gXCJcIjtcbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gaHJlZiArIFwiI1wiICsgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0bykpO1xuICB9XG4gIGZ1bmN0aW9uIHZhbGlkYXRlSGFzaExvY2F0aW9uKGxvY2F0aW9uLCB0bykge1xuICAgIHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnB1c2goXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIik7XG4gIH1cbiAgcmV0dXJuIGdldFVybEJhc2VkSGlzdG9yeShjcmVhdGVIYXNoTG9jYXRpb24sIGNyZWF0ZUhhc2hIcmVmLCB2YWxpZGF0ZUhhc2hMb2NhdGlvbiwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBpbnZhcmlhbnQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2UsIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDgpO1xufVxuLyoqXG4gKiBGb3IgYnJvd3Nlci1iYXNlZCBoaXN0b3JpZXMsIHdlIGNvbWJpbmUgdGhlIHN0YXRlIGFuZCBrZXkgaW50byBhbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCkge1xuICByZXR1cm4ge1xuICAgIHVzcjogbG9jYXRpb24uc3RhdGUsXG4gICAga2V5OiBsb2NhdGlvbi5rZXksXG4gICAgaWR4OiBpbmRleFxuICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgTG9jYXRpb24gb2JqZWN0IHdpdGggYSB1bmlxdWUga2V5IGZyb20gdGhlIGdpdmVuIFBhdGhcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oY3VycmVudCwgdG8sIHN0YXRlLCBrZXkpIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IG51bGw7XG4gIH1cbiAgbGV0IGxvY2F0aW9uID0gX2V4dGVuZHMoe1xuICAgIHBhdGhuYW1lOiB0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIiA/IGN1cnJlbnQgOiBjdXJyZW50LnBhdGhuYW1lLFxuICAgIHNlYXJjaDogXCJcIixcbiAgICBoYXNoOiBcIlwiXG4gIH0sIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bywge1xuICAgIHN0YXRlLFxuICAgIC8vIFRPRE86IFRoaXMgY291bGQgYmUgY2xlYW5lZCB1cC4gIHB1c2gvcmVwbGFjZSBzaG91bGQgcHJvYmFibHkganVzdCB0YWtlXG4gICAgLy8gZnVsbCBMb2NhdGlvbnMgbm93IGFuZCBhdm9pZCB0aGUgbmVlZCB0byBydW4gdGhyb3VnaCB0aGlzIGZsb3cgYXQgYWxsXG4gICAgLy8gQnV0IHRoYXQncyBhIHByZXR0eSBiaWcgcmVmYWN0b3IgdG8gdGhlIGN1cnJlbnQgdGVzdCBzdWl0ZSBzbyBnb2luZyB0b1xuICAgIC8vIGtlZXAgYXMgaXMgZm9yIHRoZSB0aW1lIGJlaW5nIGFuZCBqdXN0IGxldCBhbnkgaW5jb21pbmcga2V5cyB0YWtlIHByZWNlZGVuY2VcbiAgICBrZXk6IHRvICYmIHRvLmtleSB8fCBrZXkgfHwgY3JlYXRlS2V5KClcbiAgfSk7XG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVQYXRoKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IF9yZWY7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSBcIj9cIikgcGF0aG5hbWUgKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gXCI/XCIgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gXCIjXCIpIHBhdGhuYW1lICs9IGhhc2guY2hhckF0KDApID09PSBcIiNcIiA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRobmFtZTtcbn1cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0ge307XG4gIGlmIChwYXRoKSB7XG4gICAgbGV0IGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZihcIiNcIik7XG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuICAgIGxldCBzZWFyY2hJbmRleCA9IHBhdGguaW5kZXhPZihcIj9cIik7XG4gICAgaWYgKHNlYXJjaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguc2VhcmNoID0gcGF0aC5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgICB9XG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHBhcnNlZFBhdGgucGF0aG5hbWUgPSBwYXRoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cbmZ1bmN0aW9uIGdldFVybEJhc2VkSGlzdG9yeShnZXRMb2NhdGlvbiwgY3JlYXRlSHJlZiwgdmFsaWRhdGVMb2NhdGlvbiwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGxldCB7XG4gICAgd2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGxldCBpbmRleCA9IGdldEluZGV4KCk7XG4gIC8vIEluZGV4IHNob3VsZCBvbmx5IGJlIG51bGwgd2hlbiB3ZSBpbml0aWFsaXplLiBJZiBub3QsIGl0J3MgYmVjYXVzZSB0aGVcbiAgLy8gdXNlciBjYWxsZWQgaGlzdG9yeS5wdXNoU3RhdGUgb3IgaGlzdG9yeS5yZXBsYWNlU3RhdGUgZGlyZWN0bHksIGluIHdoaWNoXG4gIC8vIGNhc2Ugd2Ugc2hvdWxkIGxvZyBhIHdhcm5pbmcgYXMgaXQgd2lsbCByZXN1bHQgaW4gYnVncy5cbiAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICBpbmRleCA9IDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoX2V4dGVuZHMoe30sIGdsb2JhbEhpc3Rvcnkuc3RhdGUsIHtcbiAgICAgIGlkeDogaW5kZXhcbiAgICB9KSwgXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0SW5kZXgoKSB7XG4gICAgbGV0IHN0YXRlID0gZ2xvYmFsSGlzdG9yeS5zdGF0ZSB8fCB7XG4gICAgICBpZHg6IG51bGxcbiAgICB9O1xuICAgIHJldHVybiBzdGF0ZS5pZHg7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgbGV0IG5leHRJbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGRlbHRhID0gbmV4dEluZGV4ID09IG51bGwgPyBudWxsIDogbmV4dEluZGV4IC0gaW5kZXg7XG4gICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgaW5kZXggPSBnZXRJbmRleCgpICsgMTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiB0aGUgZXhjZXB0aW9uIGlzIGJlY2F1c2UgYHN0YXRlYCBjYW4ndCBiZSBzZXJpYWxpemVkLCBsZXQgdGhhdCB0aHJvd1xuICAgICAgLy8gb3V0d2FyZHMganVzdCBsaWtlIGEgcmVwbGFjZSBjYWxsIHdvdWxkIHNvIHRoZSBkZXYga25vd3MgdGhlIGNhdXNlXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9uYXYtaGlzdG9yeS1hcGlzLmh0bWwjc2hhcmVkLWhpc3RvcnktcHVzaC9yZXBsYWNlLXN0YXRlLXN0ZXBzXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zdHJ1Y3R1cmVkLWRhdGEuaHRtbCNzdHJ1Y3R1cmVkc2VyaWFsaXplaW50ZXJuYWxcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiBlcnJvci5uYW1lID09PSBcIkRhdGFDbG9uZUVycm9yXCIpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgIH1cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBpbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVVUkwodG8pIHtcbiAgICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgICAvLyB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIG5vdGFibHkgd2hlbiBzZXJ2aW5nIGZyb20gYSBsb2NhbCBIVE1MIGZpbGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODc4Mjk3XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSBcIm51bGxcIiA/IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gOiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBsZXQgaHJlZiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gICAgLy8gVHJlYXRpbmcgdGhpcyBhcyBhIGZ1bGwgVVJMIHdpbGwgc3RyaXAgYW55IHRyYWlsaW5nIHNwYWNlcyBzbyB3ZSBuZWVkIHRvXG4gICAgLy8gcHJlLWVuY29kZSB0aGVtIHNpbmNlIHRoZXkgbWlnaHQgYmUgcGFydCBvZiBhIG1hdGNoaW5nIHNwbGF0IHBhcmFtIGZyb21cbiAgICAvLyBhbiBhbmNlc3RvciByb3V0ZVxuICAgIGhyZWYgPSBocmVmLnJlcGxhY2UoLyAkLywgXCIlMjBcIik7XG4gICAgaW52YXJpYW50KGJhc2UsIFwiTm8gd2luZG93LmxvY2F0aW9uLihvcmlnaW58aHJlZikgYXZhaWxhYmxlIHRvIGNyZWF0ZSBVUkwgZm9yIGhyZWY6IFwiICsgaHJlZik7XG4gICAgcmV0dXJuIG5ldyBVUkwoaHJlZiwgYmFzZSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0TG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KTtcbiAgICB9LFxuICAgIGxpc3Rlbihmbikge1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgaGlzdG9yeSBvbmx5IGFjY2VwdHMgb25lIGFjdGl2ZSBsaXN0ZW5lclwiKTtcbiAgICAgIH1cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlSHJlZih0bykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUhyZWYod2luZG93LCB0byk7XG4gICAgfSxcbiAgICBjcmVhdGVVUkwsXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIC8vIEVuY29kZSBhIExvY2F0aW9uIHRoZSBzYW1lIHdheSB3aW5kb3cubG9jYXRpb24gd291bGRcbiAgICAgIGxldCB1cmwgPSBjcmVhdGVVUkwodG8pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHVybC5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoOiB1cmwuc2VhcmNoLFxuICAgICAgICBoYXNoOiB1cmwuaGFzaFxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2gsXG4gICAgcmVwbGFjZSxcbiAgICBnbyhuKSB7XG4gICAgICByZXR1cm4gZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLy8jZW5kcmVnaW9uXG5cbnZhciBSZXN1bHRUeXBlO1xuKGZ1bmN0aW9uIChSZXN1bHRUeXBlKSB7XG4gIFJlc3VsdFR5cGVbXCJkYXRhXCJdID0gXCJkYXRhXCI7XG4gIFJlc3VsdFR5cGVbXCJkZWZlcnJlZFwiXSA9IFwiZGVmZXJyZWRcIjtcbiAgUmVzdWx0VHlwZVtcInJlZGlyZWN0XCJdID0gXCJyZWRpcmVjdFwiO1xuICBSZXN1bHRUeXBlW1wiZXJyb3JcIl0gPSBcImVycm9yXCI7XG59KShSZXN1bHRUeXBlIHx8IChSZXN1bHRUeXBlID0ge30pKTtcbmNvbnN0IGltbXV0YWJsZVJvdXRlS2V5cyA9IG5ldyBTZXQoW1wibGF6eVwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJwYXRoXCIsIFwiaWRcIiwgXCJpbmRleFwiLCBcImNoaWxkcmVuXCJdKTtcbmZ1bmN0aW9uIGlzSW5kZXhSb3V0ZShyb3V0ZSkge1xuICByZXR1cm4gcm91dGUuaW5kZXggPT09IHRydWU7XG59XG4vLyBXYWxrIHRoZSByb3V0ZSB0cmVlIGdlbmVyYXRpbmcgdW5pcXVlIElEcyB3aGVyZSBuZWNlc3NhcnksIHNvIHdlIGFyZSB3b3JraW5nXG4vLyBzb2xlbHkgd2l0aCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCdzIHdpdGhpbiB0aGUgUm91dGVyXG5mdW5jdGlvbiBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCBwYXJlbnRQYXRoLCBtYW5pZmVzdCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGlmIChtYW5pZmVzdCA9PT0gdm9pZCAwKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgfVxuICByZXR1cm4gcm91dGVzLm1hcCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIFN0cmluZyhpbmRleCldO1xuICAgIGxldCBpZCA9IHR5cGVvZiByb3V0ZS5pZCA9PT0gXCJzdHJpbmdcIiA/IHJvdXRlLmlkIDogdHJlZVBhdGguam9pbihcIi1cIik7XG4gICAgaW52YXJpYW50KHJvdXRlLmluZGV4ICE9PSB0cnVlIHx8ICFyb3V0ZS5jaGlsZHJlbiwgXCJDYW5ub3Qgc3BlY2lmeSBjaGlsZHJlbiBvbiBhbiBpbmRleCByb3V0ZVwiKTtcbiAgICBpbnZhcmlhbnQoIW1hbmlmZXN0W2lkXSwgXCJGb3VuZCBhIHJvdXRlIGlkIGNvbGxpc2lvbiBvbiBpZCBcXFwiXCIgKyBpZCArIFwiXFxcIi4gIFJvdXRlIFwiICsgXCJpZCdzIG11c3QgYmUgZ2xvYmFsbHkgdW5pcXVlIHdpdGhpbiBEYXRhIFJvdXRlciB1c2FnZXNcIik7XG4gICAgaWYgKGlzSW5kZXhSb3V0ZShyb3V0ZSkpIHtcbiAgICAgIGxldCBpbmRleFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLCB7XG4gICAgICAgIGlkXG4gICAgICB9KTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IGluZGV4Um91dGU7XG4gICAgICByZXR1cm4gaW5kZXhSb3V0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBhdGhPckxheW91dFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLCB7XG4gICAgICAgIGlkLFxuICAgICAgICBjaGlsZHJlbjogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IHBhdGhPckxheW91dFJvdXRlO1xuICAgICAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgICAgIHBhdGhPckxheW91dFJvdXRlLmNoaWxkcmVuID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgbWFwUm91dGVQcm9wZXJ0aWVzLCB0cmVlUGF0aCwgbWFuaWZlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdGhPckxheW91dFJvdXRlO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcm91dGVzXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZW5hbWUgPSBcIi9cIjtcbiAgfVxuICByZXR1cm4gbWF0Y2hSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcsIGJhc2VuYW1lLCBmYWxzZSk7XG59XG5mdW5jdGlvbiBtYXRjaFJvdXRlc0ltcGwocm91dGVzLCBsb2NhdGlvbkFyZywgYmFzZW5hbWUsIGFsbG93UGFydGlhbCkge1xuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcbiAgaWYgKHBhdGhuYW1lID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBsZXQgYnJhbmNoZXMgPSBmbGF0dGVuUm91dGVzKHJvdXRlcyk7XG4gIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKTtcbiAgbGV0IG1hdGNoZXMgPSBudWxsO1xuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIC8vIEluY29taW5nIHBhdGhuYW1lcyBhcmUgZ2VuZXJhbGx5IGVuY29kZWQgZnJvbSBlaXRoZXIgd2luZG93LmxvY2F0aW9uXG4gICAgLy8gb3IgZnJvbSByb3V0ZXIubmF2aWdhdGUsIGJ1dCB3ZSB3YW50IHRvIG1hdGNoIGFnYWluc3QgdGhlIHVuZW5jb2RlZFxuICAgIC8vIHBhdGhzIGluIHRoZSByb3V0ZSBkZWZpbml0aW9ucy4gIE1lbW9yeSByb3V0ZXIgbG9jYXRpb25zIHdvbid0IGJlXG4gICAgLy8gZW5jb2RlZCBoZXJlIGJ1dCB0aGVyZSBhbHNvIHNob3VsZG4ndCBiZSBhbnl0aGluZyB0byBkZWNvZGUgc28gdGhpc1xuICAgIC8vIHNob3VsZCBiZSBhIHNhZmUgb3BlcmF0aW9uLiAgVGhpcyBhdm9pZHMgbmVlZGluZyBtYXRjaFJvdXRlcyB0byBiZVxuICAgIC8vIGhpc3RvcnktYXdhcmUuXG4gICAgbGV0IGRlY29kZWQgPSBkZWNvZGVQYXRoKHBhdGhuYW1lKTtcbiAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSwgZGVjb2RlZCwgYWxsb3dQYXJ0aWFsKTtcbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn1cbmZ1bmN0aW9uIGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG1hdGNoLCBsb2FkZXJEYXRhKSB7XG4gIGxldCB7XG4gICAgcm91dGUsXG4gICAgcGF0aG5hbWUsXG4gICAgcGFyYW1zXG4gIH0gPSBtYXRjaDtcbiAgcmV0dXJuIHtcbiAgICBpZDogcm91dGUuaWQsXG4gICAgcGF0aG5hbWUsXG4gICAgcGFyYW1zLFxuICAgIGRhdGE6IGxvYWRlckRhdGFbcm91dGUuaWRdLFxuICAgIGhhbmRsZTogcm91dGUuaGFuZGxlXG4gIH07XG59XG5mdW5jdGlvbiBmbGF0dGVuUm91dGVzKHJvdXRlcywgYnJhbmNoZXMsIHBhcmVudHNNZXRhLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChicmFuY2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgYnJhbmNoZXMgPSBbXTtcbiAgfVxuICBpZiAocGFyZW50c01ldGEgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudHNNZXRhID0gW107XG4gIH1cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG4gIGxldCBmbGF0dGVuUm91dGUgPSAocm91dGUsIGluZGV4LCByZWxhdGl2ZVBhdGgpID0+IHtcbiAgICBsZXQgbWV0YSA9IHtcbiAgICAgIHJlbGF0aXZlUGF0aDogcmVsYXRpdmVQYXRoID09PSB1bmRlZmluZWQgPyByb3V0ZS5wYXRoIHx8IFwiXCIgOiByZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZVxuICAgIH07XG4gICAgaWYgKG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICBpbnZhcmlhbnQobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChwYXJlbnRQYXRoKSwgXCJBYnNvbHV0ZSByb3V0ZSBwYXRoIFxcXCJcIiArIG1ldGEucmVsYXRpdmVQYXRoICsgXCJcXFwiIG5lc3RlZCB1bmRlciBwYXRoIFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIiBpcyBub3QgdmFsaWQuIEFuIGFic29sdXRlIGNoaWxkIHJvdXRlIHBhdGggXCIpICsgXCJtdXN0IHN0YXJ0IHdpdGggdGhlIGNvbWJpbmVkIHBhdGggb2YgYWxsIGl0cyBwYXJlbnQgcm91dGVzLlwiKTtcbiAgICAgIG1ldGEucmVsYXRpdmVQYXRoID0gbWV0YS5yZWxhdGl2ZVBhdGguc2xpY2UocGFyZW50UGF0aC5sZW5ndGgpO1xuICAgIH1cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTtcbiAgICAvLyBBZGQgdGhlIGNoaWxkcmVuIGJlZm9yZSBhZGRpbmcgdGhpcyByb3V0ZSB0byB0aGUgYXJyYXksIHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAvLyBPdXIgdHlwZXMga25vdyBiZXR0ZXIsIGJ1dCBydW50aW1lIEpTIG1heSBub3QhXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICByb3V0ZS5pbmRleCAhPT0gdHJ1ZSwgXCJJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgXCIgKyAoXCJhbGwgY2hpbGQgcm91dGVzIGZyb20gcm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiLlwiKSk7XG4gICAgICBmbGF0dGVuUm91dGVzKHJvdXRlLmNoaWxkcmVuLCBicmFuY2hlcywgcm91dGVzTWV0YSwgcGF0aCk7XG4gICAgfVxuICAgIC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH07XG4gIHJvdXRlcy5mb3JFYWNoKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICB2YXIgX3JvdXRlJHBhdGg7XG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhKChfcm91dGUkcGF0aCA9IHJvdXRlLnBhdGgpICE9IG51bGwgJiYgX3JvdXRlJHBhdGguaW5jbHVkZXMoXCI/XCIpKSkge1xuICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGV4cGxvZGVkIG9mIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJvdXRlLnBhdGgpKSB7XG4gICAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgsIGV4cGxvZGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cbmZ1bmN0aW9uIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHBhdGgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgbGV0IFtmaXJzdCwgLi4ucmVzdF0gPSBzZWdtZW50cztcbiAgLy8gT3B0aW9uYWwgcGF0aCBzZWdtZW50cyBhcmUgZGVub3RlZCBieSBhIHRyYWlsaW5nIGA/YFxuICBsZXQgaXNPcHRpb25hbCA9IGZpcnN0LmVuZHNXaXRoKFwiP1wiKTtcbiAgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2BcbiAgbGV0IHJlcXVpcmVkID0gZmlyc3QucmVwbGFjZSgvXFw/JC8sIFwiXCIpO1xuICBpZiAocmVzdC5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJbnRlcHJldCBlbXB0eSBzdHJpbmcgYXMgb21pdHRpbmcgYW4gb3B0aW9uYWwgc2VnbWVudFxuICAgIC8vIGBbXCJvbmVcIiwgXCJcIiwgXCJ0aHJlZVwiXWAgY29ycmVzcG9uZHMgdG8gb21pdHRpbmcgYDp0d29gIGZyb20gYC9vbmUvOnR3bz8vdGhyZWVgIC0+IGAvb25lL3RocmVlYFxuICAgIHJldHVybiBpc09wdGlvbmFsID8gW3JlcXVpcmVkLCBcIlwiXSA6IFtyZXF1aXJlZF07XG4gIH1cbiAgbGV0IHJlc3RFeHBsb2RlZCA9IGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJlc3Quam9pbihcIi9cIikpO1xuICBsZXQgcmVzdWx0ID0gW107XG4gIC8vIEFsbCBjaGlsZCBwYXRocyB3aXRoIHRoZSBwcmVmaXguICBEbyB0aGlzIGZvciBhbGwgY2hpbGRyZW4gYmVmb3JlIHRoZVxuICAvLyBvcHRpb25hbCB2ZXJzaW9uIGZvciBhbGwgY2hpbGRyZW4sIHNvIHdlIGdldCBjb25zaXN0ZW50IG9yZGVyaW5nIHdoZXJlIHRoZVxuICAvLyBwYXJlbnQgb3B0aW9uYWwgYXNwZWN0IGlzIHByZWZlcnJlZCBhcyByZXF1aXJlZC4gIE90aGVyd2lzZSwgd2UgY2FuIGdldFxuICAvLyBjaGlsZCBzZWN0aW9ucyBpbnRlcnNwZXJzZWQgd2hlcmUgZGVlcGVyIG9wdGlvbmFsIHNlZ21lbnRzIGFyZSBoaWdoZXIgdGhhblxuICAvLyBwYXJlbnQgb3B0aW9uYWwgc2VnbWVudHMsIHdoZXJlIGZvciBleGFtcGxlLCAvOnR3byB3b3VsZCBleHBsb2RlIF9lYXJsaWVyX1xuICAvLyB0aGVuIC86b25lLiAgQnkgYWx3YXlzIGluY2x1ZGluZyB0aGUgcGFyZW50IGFzIHJlcXVpcmVkIF9mb3IgYWxsIGNoaWxkcmVuX1xuICAvLyBmaXJzdCwgd2UgYXZvaWQgdGhpcyBpc3N1ZVxuICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQubWFwKHN1YnBhdGggPT4gc3VicGF0aCA9PT0gXCJcIiA/IHJlcXVpcmVkIDogW3JlcXVpcmVkLCBzdWJwYXRoXS5qb2luKFwiL1wiKSkpO1xuICAvLyBUaGVuLCBpZiB0aGlzIGlzIGFuIG9wdGlvbmFsIHZhbHVlLCBhZGQgYWxsIGNoaWxkIHZlcnNpb25zIHdpdGhvdXRcbiAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQpO1xuICB9XG4gIC8vIGZvciBhYnNvbHV0ZSBwYXRocywgZW5zdXJlIGAvYCBpbnN0ZWFkIG9mIGVtcHR5IHNlZ21lbnRcbiAgcmV0dXJuIHJlc3VsdC5tYXAoZXhwbG9kZWQgPT4gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSAmJiBleHBsb2RlZCA9PT0gXCJcIiA/IFwiL1wiIDogZXhwbG9kZWQpO1xufVxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuY29uc3QgcGFyYW1SZSA9IC9eOltcXHctXSskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5jb25zdCBpc1NwbGF0ID0gcyA9PiBzID09PSBcIipcIjtcbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG4gIGlmIChpbmRleCkge1xuICAgIGluaXRpYWxTY29yZSArPSBpbmRleFJvdXRlVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID9cbiAgLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDpcbiAgLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cbmZ1bmN0aW9uIG1hdGNoUm91dGVCcmFuY2goYnJhbmNoLCBwYXRobmFtZSwgYWxsb3dQYXJ0aWFsKSB7XG4gIGlmIChhbGxvd1BhcnRpYWwgPT09IHZvaWQgMCkge1xuICAgIGFsbG93UGFydGlhbCA9IGZhbHNlO1xuICB9XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVzTWV0YS5sZW5ndGg7ICsraSkge1xuICAgIGxldCBtZXRhID0gcm91dGVzTWV0YVtpXTtcbiAgICBsZXQgZW5kID0gaSA9PT0gcm91dGVzTWV0YS5sZW5ndGggLSAxO1xuICAgIGxldCByZW1haW5pbmdQYXRobmFtZSA9IG1hdGNoZWRQYXRobmFtZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKG1hdGNoZWRQYXRobmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoUGF0aCh7XG4gICAgICBwYXRoOiBtZXRhLnJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IG1ldGEuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVuZFxuICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIGlmICghbWF0Y2ggJiYgZW5kICYmIGFsbG93UGFydGlhbCAmJiAhcm91dGVzTWV0YVtyb3V0ZXNNZXRhLmxlbmd0aCAtIDFdLnJvdXRlLmluZGV4KSB7XG4gICAgICBtYXRjaCA9IG1hdGNoUGF0aCh7XG4gICAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICAgIGVuZDogZmFsc2VcbiAgICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICB9XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgLy8gVE9ETzogQ2FuIHRoaXMgYXMgYmUgYXZvaWRlZD9cbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyxcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogbm9ybWFsaXplUGF0aG5hbWUoam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pKSxcbiAgICAgIHJvdXRlXG4gICAgfSk7XG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2dlbmVyYXRlLXBhdGhcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG9yaWdpbmFsUGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG4gIGxldCBwYXRoID0gb3JpZ2luYWxQYXRoO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikgJiYgcGF0aCAhPT0gXCIqXCIgJiYgIXBhdGguZW5kc1dpdGgoXCIvKlwiKSkge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKTtcbiAgfVxuICAvLyBlbnN1cmUgYC9gIGlzIGFkZGVkIGF0IHRoZSBiZWdpbm5pbmcgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGVcbiAgY29uc3QgcHJlZml4ID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIjtcbiAgY29uc3Qgc3RyaW5naWZ5ID0gcCA9PiBwID09IG51bGwgPyBcIlwiIDogdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyBwIDogU3RyaW5nKHApO1xuICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoL1xcLysvKS5tYXAoKHNlZ21lbnQsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgIGNvbnN0IGlzTGFzdFNlZ21lbnQgPSBpbmRleCA9PT0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAvLyBvbmx5IGFwcGx5IHRoZSBzcGxhdCBpZiBpdCdzIHRoZSBsYXN0IHNlZ21lbnRcbiAgICBpZiAoaXNMYXN0U2VnbWVudCAmJiBzZWdtZW50ID09PSBcIipcIikge1xuICAgICAgY29uc3Qgc3RhciA9IFwiKlwiO1xuICAgICAgLy8gQXBwbHkgdGhlIHNwbGF0XG4gICAgICByZXR1cm4gc3RyaW5naWZ5KHBhcmFtc1tzdGFyXSk7XG4gICAgfVxuICAgIGNvbnN0IGtleU1hdGNoID0gc2VnbWVudC5tYXRjaCgvXjooW1xcdy1dKykoXFw/PykkLyk7XG4gICAgaWYgKGtleU1hdGNoKSB7XG4gICAgICBjb25zdCBbLCBrZXksIG9wdGlvbmFsXSA9IGtleU1hdGNoO1xuICAgICAgbGV0IHBhcmFtID0gcGFyYW1zW2tleV07XG4gICAgICBpbnZhcmlhbnQob3B0aW9uYWwgPT09IFwiP1wiIHx8IHBhcmFtICE9IG51bGwsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBhbnkgb3B0aW9uYWwgbWFya2VycyBmcm9tIG9wdGlvbmFsIHN0YXRpYyBzZWdtZW50c1xuICAgIHJldHVybiBzZWdtZW50LnJlcGxhY2UoL1xcPyQvZywgXCJcIik7XG4gIH0pXG4gIC8vIFJlbW92ZSBlbXB0eSBzZWdtZW50c1xuICAuZmlsdGVyKHNlZ21lbnQgPT4gISFzZWdtZW50KTtcbiAgcmV0dXJuIHByZWZpeCArIHNlZ21lbnRzLmpvaW4oXCIvXCIpO1xufVxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1wYXRoXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuICBsZXQgW21hdGNoZXIsIGNvbXBpbGVkUGFyYW1zXSA9IGNvbXBpbGVQYXRoKHBhdHRlcm4ucGF0aCwgcGF0dGVybi5jYXNlU2Vuc2l0aXZlLCBwYXR0ZXJuLmVuZCk7XG4gIGxldCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IG1hdGNoWzBdO1xuICBsZXQgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgbGV0IGNhcHR1cmVHcm91cHMgPSBtYXRjaC5zbGljZSgxKTtcbiAgbGV0IHBhcmFtcyA9IGNvbXBpbGVkUGFyYW1zLnJlZHVjZSgobWVtbywgX3JlZiwgaW5kZXgpID0+IHtcbiAgICBsZXQge1xuICAgICAgcGFyYW1OYW1lLFxuICAgICAgaXNPcHRpb25hbFxuICAgIH0gPSBfcmVmO1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XTtcbiAgICBpZiAoaXNPcHRpb25hbCAmJiAhdmFsdWUpIHtcbiAgICAgIG1lbW9bcGFyYW1OYW1lXSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVtb1twYXJhbU5hbWVdID0gKHZhbHVlIHx8IFwiXCIpLnJlcGxhY2UoLyUyRi9nLCBcIi9cIik7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhdGhuYW1lOiBtYXRjaGVkUGF0aG5hbWUsXG4gICAgcGF0aG5hbWVCYXNlLFxuICAgIHBhdHRlcm5cbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG4gIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgIGVuZCA9IHRydWU7XG4gIH1cbiAgd2FybmluZyhwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gIGxldCBwYXJhbXMgPSBbXTtcbiAgbGV0IHJlZ2V4cFNvdXJjZSA9IFwiXlwiICsgcGF0aC5yZXBsYWNlKC9cXC8qXFwqPyQvLCBcIlwiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvd1xuICAucmVwbGFjZSgvXlxcLyovLCBcIi9cIikgLy8gTWFrZSBzdXJlIGl0IGhhcyBhIGxlYWRpbmcgL1xuICAucmVwbGFjZSgvW1xcXFwuKiteJHt9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoL1xcLzooW1xcdy1dKykoXFw/KT8vZywgKF8sIHBhcmFtTmFtZSwgaXNPcHRpb25hbCkgPT4ge1xuICAgIHBhcmFtcy5wdXNoKHtcbiAgICAgIHBhcmFtTmFtZSxcbiAgICAgIGlzT3B0aW9uYWw6IGlzT3B0aW9uYWwgIT0gbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiBpc09wdGlvbmFsID8gXCIvPyhbXlxcXFwvXSspP1wiIDogXCIvKFteXFxcXC9dKylcIjtcbiAgfSk7XG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSkge1xuICAgIHBhcmFtcy5wdXNoKHtcbiAgICAgIHBhcmFtTmFtZTogXCIqXCJcbiAgICB9KTtcbiAgICByZWdleHBTb3VyY2UgKz0gcGF0aCA9PT0gXCIqXCIgfHwgcGF0aCA9PT0gXCIvKlwiID8gXCIoLiopJFwiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0XG4gICAgOiBcIig/OlxcXFwvKC4rKXxcXFxcLyopJFwiOyAvLyBEb24ndCBpbmNsdWRlIHRoZSAvIGluIHBhcmFtc1tcIipcIl1cbiAgfSBlbHNlIGlmIChlbmQpIHtcbiAgICAvLyBXaGVuIG1hdGNoaW5nIHRvIHRoZSBlbmQsIGlnbm9yZSB0cmFpbGluZyBzbGFzaGVzXG4gICAgcmVnZXhwU291cmNlICs9IFwiXFxcXC8qJFwiO1xuICB9IGVsc2UgaWYgKHBhdGggIT09IFwiXCIgJiYgcGF0aCAhPT0gXCIvXCIpIHtcbiAgICAvLyBJZiBvdXIgcGF0aCBpcyBub24tZW1wdHkgYW5kIGNvbnRhaW5zIGFueXRoaW5nIGJleW9uZCBhbiBpbml0aWFsIHNsYXNoLFxuICAgIC8vIHRoZW4gd2UgaGF2ZSBfc29tZV8gZm9ybSBvZiBwYXRoIGluIG91ciByZWdleCwgc28gd2Ugc2hvdWxkIGV4cGVjdCB0b1xuICAgIC8vIG1hdGNoIG9ubHkgaWYgd2UgZmluZCB0aGUgZW5kIG9mIHRoaXMgcGF0aCBzZWdtZW50LiAgTG9vayBmb3IgYW4gb3B0aW9uYWxcbiAgICAvLyBub24tY2FwdHVyZWQgdHJhaWxpbmcgc2xhc2ggKHRvIG1hdGNoIGEgcG9ydGlvbiBvZiB0aGUgVVJMKSBvciB0aGUgZW5kXG4gICAgLy8gb2YgdGhlIHBhdGggKGlmIHdlJ3ZlIG1hdGNoZWQgdG8gdGhlIGVuZCkuICBXZSB1c2VkIHRvIGRvIHRoaXMgd2l0aCBhXG4gICAgLy8gd29yZCBib3VuZGFyeSBidXQgdGhhdCBnaXZlcyBmYWxzZSBwb3NpdGl2ZXMgb24gcm91dGVzIGxpa2VcbiAgICAvLyAvdXNlci1wcmVmZXJlbmNlcyBzaW5jZSBgLWAgY291bnRzIGFzIGEgd29yZCBib3VuZGFyeS5cbiAgICByZWdleHBTb3VyY2UgKz0gXCIoPzooPz1cXFxcL3wkKSlcIjtcbiAgfSBlbHNlIDtcbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbXNdO1xufVxuZnVuY3Rpb24gZGVjb2RlUGF0aCh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiB2YWx1ZS5zcGxpdChcIi9cIikubWFwKHYgPT4gZGVjb2RlVVJJQ29tcG9uZW50KHYpLnJlcGxhY2UoL1xcLy9nLCBcIiUyRlwiKSkuam9pbihcIi9cIik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgVVJMIHBhdGggXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIFwiICsgXCJtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgXCIgKyAoXCJlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gV2Ugd2FudCB0byBsZWF2ZSB0cmFpbGluZyBzbGFzaCBiZWhhdmlvciBpbiB0aGUgdXNlcidzIGNvbnRyb2wsIHNvIGlmIHRoZXlcbiAgLy8gc3BlY2lmeSBhIGJhc2VuYW1lIHdpdGggYSB0cmFpbGluZyBzbGFzaCwgd2Ugc2hvdWxkIHN1cHBvcnQgaXRcbiAgbGV0IHN0YXJ0SW5kZXggPSBiYXNlbmFtZS5lbmRzV2l0aChcIi9cIikgPyBiYXNlbmFtZS5sZW5ndGggLSAxIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBwYXRobmFtZS5zbGljZShzdGFydEluZGV4KSB8fCBcIi9cIjtcbn1cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL3Jlc29sdmUtcGF0aFxuICovXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKSA6IGZyb21QYXRobmFtZTtcbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZShyZWxhdGl2ZVBhdGgsIGZyb21QYXRobmFtZSkge1xuICBsZXQgc2VnbWVudHMgPSBmcm9tUGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIGxldCByZWxhdGl2ZVNlZ21lbnRzID0gcmVsYXRpdmVQYXRoLnNwbGl0KFwiL1wiKTtcbiAgcmVsYXRpdmVTZWdtZW50cy5mb3JFYWNoKHNlZ21lbnQgPT4ge1xuICAgIGlmIChzZWdtZW50ID09PSBcIi4uXCIpIHtcbiAgICAgIC8vIEtlZXAgdGhlIHJvb3QgXCJcIiBzZWdtZW50IHNvIHRoZSBwYXRobmFtZSBzdGFydHMgYXQgL1xuICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDEpIHNlZ21lbnRzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gXCIuXCIpIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA+IDEgPyBzZWdtZW50cy5qb2luKFwiL1wiKSA6IFwiL1wiO1xufVxuZnVuY3Rpb24gZ2V0SW52YWxpZFBhdGhFcnJvcihjaGFyLCBmaWVsZCwgZGVzdCwgcGF0aCkge1xuICByZXR1cm4gXCJDYW5ub3QgaW5jbHVkZSBhICdcIiArIGNoYXIgKyBcIicgY2hhcmFjdGVyIGluIGEgbWFudWFsbHkgc3BlY2lmaWVkIFwiICsgKFwiYHRvLlwiICsgZmllbGQgKyBcImAgZmllbGQgW1wiICsgSlNPTi5zdHJpbmdpZnkocGF0aCkgKyBcIl0uICBQbGVhc2Ugc2VwYXJhdGUgaXQgb3V0IHRvIHRoZSBcIikgKyAoXCJgdG8uXCIgKyBkZXN0ICsgXCJgIGZpZWxkLiBBbHRlcm5hdGl2ZWx5IHlvdSBtYXkgcHJvdmlkZSB0aGUgZnVsbCBwYXRoIGFzIFwiKSArIFwiYSBzdHJpbmcgaW4gPExpbmsgdG89XFxcIi4uLlxcXCI+IGFuZCB0aGUgcm91dGVyIHdpbGwgcGFyc2UgaXQgZm9yIHlvdS5cIjtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBXaGVuIHByb2Nlc3NpbmcgcmVsYXRpdmUgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIGlnbm9yZSBhbmNlc3RvciByb3V0ZXMgdGhhdFxuICogZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIHBhdGgsIHN1Y2ggdGhhdCBpbmRleC9wYXRobGVzcyBsYXlvdXQgcm91dGVzIGRvbid0XG4gKiBpbnRlcmZlcmUuXG4gKlxuICogRm9yIGV4YW1wbGUsIHdoZW4gbW92aW5nIGEgcm91dGUgZWxlbWVudCBpbnRvIGFuIGluZGV4IHJvdXRlIGFuZC9vciBhXG4gKiBwYXRobGVzcyBsYXlvdXQgcm91dGUsIHJlbGF0aXZlIGxpbmsgYmVoYXZpb3IgY29udGFpbmVkIHdpdGhpbiBzaG91bGQgc3RheVxuICogdGhlIHNhbWUuICBCb3RoIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgc2hvdWxkIGxpbmsgYmFjayB0byB0aGUgcm9vdDpcbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIiBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9PlxuICogICA8L1JvdXRlPlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiPlxuICogICAgICAgPFJvdXRlIGVsZW1lbnQ9ezxBY2NvdW50c0xheW91dCAvPn0+ICAgICAgIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICAgIDxSb3V0ZSBpbmRleCBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9IC8+ICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgPC9Sb3V0ZVxuICogICAgIDwvUm91dGU+XG4gKiAgIDwvUm91dGU+XG4gKi9cbmZ1bmN0aW9uIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIG1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IGluZGV4ID09PSAwIHx8IG1hdGNoLnJvdXRlLnBhdGggJiYgbWF0Y2gucm91dGUucGF0aC5sZW5ndGggPiAwKTtcbn1cbi8vIFJldHVybiB0aGUgYXJyYXkgb2YgcGF0aG5hbWVzIGZvciB0aGUgY3VycmVudCByb3V0ZSBtYXRjaGVzIC0gdXNlZCB0b1xuLy8gZ2VuZXJhdGUgdGhlIHJvdXRlUGF0aG5hbWVzIGlucHV0IGZvciByZXNvbHZlVG8oKVxuZnVuY3Rpb24gZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhtYXRjaGVzLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgLy8gV2hlbiB2N19yZWxhdGl2ZVNwbGF0UGF0aCBpcyBlbmFibGVkLCB1c2UgdGhlIGZ1bGwgcGF0aG5hbWUgZm9yIHRoZSBsZWFmXG4gIC8vIG1hdGNoIHNvIHdlIGluY2x1ZGUgc3BsYXQgdmFsdWVzIGZvciBcIi5cIiBsaW5rcy4gIFNlZTpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzExMDUyI2lzc3VlY29tbWVudC0xODM2NTg5MzI5XG4gIGlmICh2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICAgIHJldHVybiBwYXRoTWF0Y2hlcy5tYXAoKG1hdGNoLCBpZHgpID0+IGlkeCA9PT0gcGF0aE1hdGNoZXMubGVuZ3RoIC0gMSA/IG1hdGNoLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlKTtcbiAgfVxuICByZXR1cm4gcGF0aE1hdGNoZXMubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVUbyh0b0FyZywgcm91dGVQYXRobmFtZXMsIGxvY2F0aW9uUGF0aG5hbWUsIGlzUGF0aFJlbGF0aXZlKSB7XG4gIGlmIChpc1BhdGhSZWxhdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNQYXRoUmVsYXRpdmUgPSBmYWxzZTtcbiAgfVxuICBsZXQgdG87XG4gIGlmICh0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICB0byA9IHBhcnNlUGF0aCh0b0FyZyk7XG4gIH0gZWxzZSB7XG4gICAgdG8gPSBfZXh0ZW5kcyh7fSwgdG9BcmcpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiP1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIj9cIiwgXCJwYXRobmFtZVwiLCBcInNlYXJjaFwiLCB0bykpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJwYXRobmFtZVwiLCBcImhhc2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnNlYXJjaCB8fCAhdG8uc2VhcmNoLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJzZWFyY2hcIiwgXCJoYXNoXCIsIHRvKSk7XG4gIH1cbiAgbGV0IGlzRW1wdHlQYXRoID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCI7XG4gIGxldCB0b1BhdGhuYW1lID0gaXNFbXB0eVBhdGggPyBcIi9cIiA6IHRvLnBhdGhuYW1lO1xuICBsZXQgZnJvbTtcbiAgLy8gUm91dGluZyBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwYXRobmFtZSBpZiBleHBsaWNpdGx5IHJlcXVlc3RlZC5cbiAgLy9cbiAgLy8gSWYgYSBwYXRobmFtZSBpcyBleHBsaWNpdGx5IHByb3ZpZGVkIGluIGB0b2AsIGl0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGVcbiAgLy8gcm91dGUgY29udGV4dC4gVGhpcyBpcyBleHBsYWluZWQgaW4gYE5vdGUgb24gYDxMaW5rIHRvPmAgdmFsdWVzYCBpbiBvdXJcbiAgLy8gbWlncmF0aW9uIGd1aWRlIGZyb20gdjUgYXMgYSBtZWFucyBvZiBkaXNhbWJpZ3VhdGlvbiBiZXR3ZWVuIGB0b2AgdmFsdWVzXG4gIC8vIHRoYXQgYmVnaW4gd2l0aCBgL2AgYW5kIHRob3NlIHRoYXQgZG8gbm90LiBIb3dldmVyLCB0aGlzIGlzIHByb2JsZW1hdGljIGZvclxuICAvLyBgdG9gIHZhbHVlcyB0aGF0IGRvIG5vdCBwcm92aWRlIGEgcGF0aG5hbWUuIGB0b2AgY2FuIHNpbXBseSBiZSBhIHNlYXJjaCBvclxuICAvLyBoYXNoIHN0cmluZywgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgYXNzdW1lIHRoYXQgdGhlIG5hdmlnYXRpb24gaXMgcmVsYXRpdmVcbiAgLy8gdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24ncyBwYXRobmFtZSBhbmQgKm5vdCogdGhlIHJvdXRlIHBhdGhuYW1lLlxuICBpZiAodG9QYXRobmFtZSA9PSBudWxsKSB7XG4gICAgZnJvbSA9IGxvY2F0aW9uUGF0aG5hbWU7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJvdXRlUGF0aG5hbWVJbmRleCA9IHJvdXRlUGF0aG5hbWVzLmxlbmd0aCAtIDE7XG4gICAgLy8gV2l0aCByZWxhdGl2ZT1cInJvdXRlXCIgKHRoZSBkZWZhdWx0KSwgZWFjaCBsZWFkaW5nIC4uIHNlZ21lbnQgbWVhbnNcbiAgICAvLyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmUgVVJMIHNlZ21lbnRcIi4gIFRoaXMgaXMgYSBrZXlcbiAgICAvLyBkaWZmZXJlbmNlIGZyb20gaG93IDxhIGhyZWY+IHdvcmtzIGFuZCBhIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYVxuICAgIC8vIFwidG9cIiB2YWx1ZSBpbnN0ZWFkIG9mIGEgXCJocmVmXCIuXG4gICAgaWYgKCFpc1BhdGhSZWxhdGl2ZSAmJiB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgIHdoaWxlICh0b1NlZ21lbnRzWzBdID09PSBcIi4uXCIpIHtcbiAgICAgICAgdG9TZWdtZW50cy5zaGlmdCgpO1xuICAgICAgICByb3V0ZVBhdGhuYW1lSW5kZXggLT0gMTtcbiAgICAgIH1cbiAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKFwiL1wiKTtcbiAgICB9XG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pO1xuICAvLyBFbnN1cmUgdGhlIHBhdGhuYW1lIGhhcyBhIHRyYWlsaW5nIHNsYXNoIGlmIHRoZSBvcmlnaW5hbCBcInRvXCIgaGFkIG9uZVxuICBsZXQgaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoID0gdG9QYXRobmFtZSAmJiB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgLy8gT3IgaWYgdGhpcyB3YXMgYSBsaW5rIHRvIHRoZSBjdXJyZW50IHBhdGggd2hpY2ggaGFzIGEgdHJhaWxpbmcgc2xhc2hcbiAgbGV0IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoID0gKGlzRW1wdHlQYXRoIHx8IHRvUGF0aG5hbWUgPT09IFwiLlwiKSAmJiBsb2NhdGlvblBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgaWYgKCFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJiAoaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIHx8IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoKSkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldFRvUGF0aG5hbWUodG8pIHtcbiAgLy8gRW1wdHkgc3RyaW5ncyBzaG91bGQgYmUgdHJlYXRlZCB0aGUgc2FtZSBhcyAvIHBhdGhzXG4gIHJldHVybiB0byA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIiA/IFwiL1wiIDogdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKS5wYXRobmFtZSA6IHRvLnBhdGhuYW1lO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgbm9ybWFsaXplUGF0aG5hbWUgPSBwYXRobmFtZSA9PiBwYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVTZWFyY2ggPSBzZWFyY2ggPT4gIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiID8gXCJcIiA6IHNlYXJjaC5zdGFydHNXaXRoKFwiP1wiKSA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbi8qKlxuICogVGhpcyBpcyBhIHNob3J0Y3V0IGZvciBjcmVhdGluZyBgYXBwbGljYXRpb24vanNvbmAgcmVzcG9uc2VzLiBDb252ZXJ0cyBgZGF0YWBcbiAqIHRvIEpTT04gYW5kIHNldHMgdGhlIGBDb250ZW50LVR5cGVgIGhlYWRlci5cbiAqL1xuY29uc3QganNvbiA9IGZ1bmN0aW9uIGpzb24oZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBzdGF0dXM6IGluaXRcbiAgfSA6IGluaXQ7XG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpO1xuICB9XG4gIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9leHRlbmRzKHt9LCByZXNwb25zZUluaXQsIHtcbiAgICBoZWFkZXJzXG4gIH0pKTtcbn07XG5jbGFzcyBEYXRhV2l0aFJlc3BvbnNlSW5pdCB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIGluaXQpIHtcbiAgICB0aGlzLnR5cGUgPSBcIkRhdGFXaXRoUmVzcG9uc2VJbml0XCI7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmluaXQgPSBpbml0IHx8IG51bGw7XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlIFwicmVzcG9uc2VzXCIgdGhhdCBjb250YWluIGBzdGF0dXNgL2BoZWFkZXJzYCB3aXRob3V0IGZvcmNpbmdcbiAqIHNlcmlhbGl6YXRpb24gaW50byBhbiBhY3R1YWwgYFJlc3BvbnNlYCAtIHVzZWQgYnkgUmVtaXggc2luZ2xlIGZldGNoXG4gKi9cbmZ1bmN0aW9uIGRhdGEoZGF0YSwgaW5pdCkge1xuICByZXR1cm4gbmV3IERhdGFXaXRoUmVzcG9uc2VJbml0KGRhdGEsIHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdCk7XG59XG5jbGFzcyBBYm9ydGVkRGVmZXJyZWRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5jbGFzcyBEZWZlcnJlZERhdGEge1xuICBjb25zdHJ1Y3RvcihkYXRhLCByZXNwb25zZUluaXQpIHtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0ID0gbmV3IFNldCgpO1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5kZWZlcnJlZEtleXMgPSBbXTtcbiAgICBpbnZhcmlhbnQoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShkYXRhKSwgXCJkZWZlcigpIG9ubHkgYWNjZXB0cyBwbGFpbiBvYmplY3RzXCIpO1xuICAgIC8vIFNldCB1cCBhbiBBYm9ydENvbnRyb2xsZXIgKyBQcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3QgdG8gZXhpdCBlYXJseVxuICAgIC8vIGNhbmNlbGxhdGlvblxuICAgIGxldCByZWplY3Q7XG4gICAgdGhpcy5hYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7XG4gICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBvbkFib3J0ID0gKCkgPT4gcmVqZWN0KG5ldyBBYm9ydGVkRGVmZXJyZWRFcnJvcihcIkRlZmVycmVkIGRhdGEgYWJvcnRlZFwiKSk7XG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgdGhpcy5jb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgdGhpcy5kYXRhID0gT2JqZWN0LmVudHJpZXMoZGF0YSkucmVkdWNlKChhY2MsIF9yZWYyKSA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjI7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gQWxsIGluY29taW5nIHZhbHVlcyB3ZXJlIHJlc29sdmVkXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG4gICAgdGhpcy5pbml0ID0gcmVzcG9uc2VJbml0O1xuICB9XG4gIHRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLmRlZmVycmVkS2V5cy5wdXNoKGtleSk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5hZGQoa2V5KTtcbiAgICAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuICAgIGxldCBwcm9taXNlID0gUHJvbWlzZS5yYWNlKFt2YWx1ZSwgdGhpcy5hYm9ydFByb21pc2VdKS50aGVuKGRhdGEgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIHVuZGVmaW5lZCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpO1xuICAgIC8vIFJlZ2lzdGVyIHJlamVjdGlvbiBsaXN0ZW5lcnMgdG8gYXZvaWQgdW5jYXVnaHQgcHJvbWlzZSByZWplY3Rpb25zIG9uXG4gICAgLy8gZXJyb3JzIG9yIGFib3J0ZWQgZGVmZXJyZWQgdmFsdWVzXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgb25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvciwgZGF0YSkge1xuICAgIGlmICh0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQgJiYgZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGtleSk7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuICAgIC8vIElmIHRoZSBwcm9taXNlIHdhcyByZXNvbHZlZC9yZWplY3RlZCB3aXRoIHVuZGVmaW5lZCwgd2UnbGwgdGhyb3cgYW4gZXJyb3IgYXMgeW91XG4gICAgLy8gc2hvdWxkIGFsd2F5cyByZXNvbHZlIHdpdGggYSB2YWx1ZSBvciBudWxsXG4gICAgaWYgKGVycm9yID09PSB1bmRlZmluZWQgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdW5kZWZpbmVkRXJyb3IgPSBuZXcgRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJlc29sdmVkL3JlamVjdGVkIHdpdGggYHVuZGVmaW5lZGAsIFwiICsgXCJ5b3UgbXVzdCByZXNvbHZlL3JlamVjdCB3aXRoIGEgdmFsdWUgb3IgYG51bGxgLlwiKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdW5kZWZpbmVkRXJyb3JcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHVuZGVmaW5lZEVycm9yKTtcbiAgICB9XG4gICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7XG4gICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgZW1pdChhYm9ydGVkLCBzZXR0bGVkS2V5KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7XG4gIH1cbiAgc3Vic2NyaWJlKGZuKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiB0aGlzLnN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZm9yRWFjaCgodiwgaykgPT4gdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoaykpO1xuICAgIHRoaXMuZW1pdCh0cnVlKTtcbiAgfVxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWwpIHtcbiAgICBsZXQgYWJvcnRlZCA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICBsZXQgb25BYm9ydCA9ICgpID0+IHRoaXMuY2FuY2VsKCk7XG4gICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgYWJvcnRlZCA9IGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0aGlzLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhYm9ydGVkO1xuICB9XG4gIGdldCBkb25lKCkge1xuICAgIHJldHVybiB0aGlzLnBlbmRpbmdLZXlzU2V0LnNpemUgPT09IDA7XG4gIH1cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCIpO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMykgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYzO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuICBnZXQgcGVuZGluZ0tleXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wZW5kaW5nS2V5c1NldCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5fdHJhY2tlZCA9PT0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIGlmICghaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlLl9lcnJvcikge1xuICAgIHRocm93IHZhbHVlLl9lcnJvcjtcbiAgfVxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG5jb25zdCBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGRhdGEsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSB7fTtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICByZXR1cm4gbmV3IERlZmVycmVkRGF0YShkYXRhLCByZXNwb25zZUluaXQpO1xufTtcbi8qKlxuICogQSByZWRpcmVjdCByZXNwb25zZS4gU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmNvbnN0IHJlZGlyZWN0ID0gZnVuY3Rpb24gcmVkaXJlY3QodXJsLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gMzAyO1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSBpbml0O1xuICBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJlc3BvbnNlSW5pdCA9IHtcbiAgICAgIHN0YXR1czogcmVzcG9uc2VJbml0XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0LnN0YXR1cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJlc3BvbnNlSW5pdC5zdGF0dXMgPSAzMDI7XG4gIH1cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlIHRoYXQgd2lsbCBmb3JjZSBhIGRvY3VtZW50IHJlbG9hZCB0byB0aGUgbmV3IGxvY2F0aW9uLlxuICogU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmNvbnN0IHJlZGlyZWN0RG9jdW1lbnQgPSAodXJsLCBpbml0KSA9PiB7XG4gIGxldCByZXNwb25zZSA9IHJlZGlyZWN0KHVybCwgaW5pdCk7XG4gIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIiwgXCJ0cnVlXCIpO1xuICByZXR1cm4gcmVzcG9uc2U7XG59O1xuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlIHRoYXQgd2lsbCBwZXJmb3JtIGEgYGhpc3RvcnkucmVwbGFjZVN0YXRlYCBpbnN0ZWFkIG9mIGFcbiAqIGBoaXN0b3J5LnB1c2hTdGF0ZWAgZm9yIGNsaWVudC1zaWRlIG5hdmlnYXRpb24gcmVkaXJlY3RzLlxuICogU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmNvbnN0IHJlcGxhY2UgPSAodXJsLCBpbml0KSA9PiB7XG4gIGxldCByZXNwb25zZSA9IHJlZGlyZWN0KHVybCwgaW5pdCk7XG4gIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiWC1SZW1peC1SZXBsYWNlXCIsIFwidHJ1ZVwiKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbi8qKlxuICogQHByaXZhdGVcbiAqIFV0aWxpdHkgY2xhc3Mgd2UgdXNlIHRvIGhvbGQgYXV0by11bndyYXBwZWQgNHh4LzV4eCBSZXNwb25zZSBib2RpZXNcbiAqXG4gKiBXZSBkb24ndCBleHBvcnQgdGhlIGNsYXNzIGZvciBwdWJsaWMgdXNlIHNpbmNlIGl0J3MgYW4gaW1wbGVtZW50YXRpb25cbiAqIGRldGFpbCwgYnV0IHdlIGV4cG9ydCB0aGUgaW50ZXJmYWNlIGFib3ZlIHNvIGZvbGtzIGNhbiBidWlsZCB0aGVpciBvd25cbiAqIGFic3RyYWN0aW9ucyBhcm91bmQgaW5zdGFuY2VzIHZpYSBpc1JvdXRlRXJyb3JSZXNwb25zZSgpXG4gKi9cbmNsYXNzIEVycm9yUmVzcG9uc2VJbXBsIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBzdGF0dXNUZXh0LCBkYXRhLCBpbnRlcm5hbCkge1xuICAgIGlmIChpbnRlcm5hbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpbnRlcm5hbCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBzdGF0dXNUZXh0IHx8IFwiXCI7XG4gICAgdGhpcy5pbnRlcm5hbCA9IGludGVybmFsO1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYW4gRXJyb3JSZXNwb25zZSBnZW5lcmF0ZWQgZnJvbSBhIDR4eC81eHhcbiAqIFJlc3BvbnNlIHRocm93biBmcm9tIGFuIGFjdGlvbi9sb2FkZXJcbiAqL1xuZnVuY3Rpb24gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpIHtcbiAgcmV0dXJuIGVycm9yICE9IG51bGwgJiYgdHlwZW9mIGVycm9yLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZXJyb3Iuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgZXJyb3IuaW50ZXJuYWwgPT09IFwiYm9vbGVhblwiICYmIFwiZGF0YVwiIGluIGVycm9yO1xufVxuXG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kc0FyciA9IFtcInBvc3RcIiwgXCJwdXRcIiwgXCJwYXRjaFwiLCBcImRlbGV0ZVwiXTtcbmNvbnN0IHZhbGlkTXV0YXRpb25NZXRob2RzID0gbmV3IFNldCh2YWxpZE11dGF0aW9uTWV0aG9kc0Fycik7XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzQXJyID0gW1wiZ2V0XCIsIC4uLnZhbGlkTXV0YXRpb25NZXRob2RzQXJyXTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIpO1xuY29uc3QgcmVkaXJlY3RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XSk7XG5jb25zdCByZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDcsIDMwOF0pO1xuY29uc3QgSURMRV9OQVZJR0FUSU9OID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfRkVUQ0hFUiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfQkxPQ0tFUiA9IHtcbiAgc3RhdGU6IFwidW5ibG9ja2VkXCIsXG4gIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgbG9jYXRpb246IHVuZGVmaW5lZFxufTtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbmNvbnN0IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXMgPSByb3V0ZSA9PiAoe1xuICBoYXNFcnJvckJvdW5kYXJ5OiBCb29sZWFuKHJvdXRlLmhhc0Vycm9yQm91bmRhcnkpXG59KTtcbmNvbnN0IFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZID0gXCJyZW1peC1yb3V0ZXItdHJhbnNpdGlvbnNcIjtcbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVSb3V0ZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIENyZWF0ZSBhIHJvdXRlciBhbmQgbGlzdGVuIHRvIGhpc3RvcnkgUE9QIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihpbml0KSB7XG4gIGNvbnN0IHJvdXRlcldpbmRvdyA9IGluaXQud2luZG93ID8gaW5pdC53aW5kb3cgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdW5kZWZpbmVkO1xuICBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygcm91dGVyV2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHJvdXRlcldpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuICBjb25zdCBpc1NlcnZlciA9ICFpc0Jyb3dzZXI7XG4gIGludmFyaWFudChpbml0LnJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVJvdXRlclwiKTtcbiAgbGV0IG1hcFJvdXRlUHJvcGVydGllcztcbiAgaWYgKGluaXQubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gaW5pdC5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAoaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBpbml0LmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICAvLyBSb3V0ZXMga2V5ZWQgYnkgSURcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIC8vIFJvdXRlcyBpbiB0cmVlIGZvcm1hdCBmb3IgbWF0Y2hpbmdcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKGluaXQucm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICBsZXQgaW5GbGlnaHREYXRhUm91dGVzO1xuICBsZXQgYmFzZW5hbWUgPSBpbml0LmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVN0cmF0ZWd5SW1wbCA9IGluaXQuZGF0YVN0cmF0ZWd5IHx8IGRlZmF1bHREYXRhU3RyYXRlZ3k7XG4gIGxldCBwYXRjaFJvdXRlc09uTmF2aWdhdGlvbkltcGwgPSBpbml0LnBhdGNoUm91dGVzT25OYXZpZ2F0aW9uO1xuICAvLyBDb25maWcgZHJpdmVuIGJlaGF2aW9yIGZsYWdzXG4gIGxldCBmdXR1cmUgPSBfZXh0ZW5kcyh7XG4gICAgdjdfZmV0Y2hlclBlcnNpc3Q6IGZhbHNlLFxuICAgIHY3X25vcm1hbGl6ZUZvcm1NZXRob2Q6IGZhbHNlLFxuICAgIHY3X3BhcnRpYWxIeWRyYXRpb246IGZhbHNlLFxuICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogZmFsc2UsXG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlLFxuICAgIHY3X3NraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbjogZmFsc2VcbiAgfSwgaW5pdC5mdXR1cmUpO1xuICAvLyBDbGVhbnVwIGZ1bmN0aW9uIGZvciBoaXN0b3J5XG4gIGxldCB1bmxpc3Rlbkhpc3RvcnkgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9ucyB0byBjYWxsIG9uIGFsbCBzdGF0ZSBjaGFuZ2VzXG4gIGxldCBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBvYmplY3QgdG8gaG9sZCBzY3JvbGwgcmVzdG9yYXRpb24gbG9jYXRpb25zIGR1cmluZyByb3V0aW5nXG4gIGxldCBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IHNjcm9sbCByZXN0b3JhdGlvbiBrZXlzXG4gIGxldCBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG4gIGxldCBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gIC8vIE9uZS10aW1lIGZsYWcgdG8gY29udHJvbCB0aGUgaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLiAgQmVjYXVzZVxuICAvLyB3ZSBkb24ndCBnZXQgdGhlIHNhdmVkIHBvc2l0aW9ucyBmcm9tIDxTY3JvbGxSZXN0b3JhdGlvbiAvPiB1bnRpbCBfYWZ0ZXJfXG4gIC8vIHRoZSBpbml0aWFsIHJlbmRlciwgd2UgbmVlZCB0byBtYW51YWxseSB0cmlnZ2VyIGEgc2VwYXJhdGUgdXBkYXRlU3RhdGUgdG9cbiAgLy8gc2VuZCBhbG9uZyB0aGUgcmVzdG9yZVNjcm9sbFBvc2l0aW9uXG4gIC8vIFNldCB0byB0cnVlIGlmIHdlIGhhdmUgYGh5ZHJhdGlvbkRhdGFgIHNpbmNlIHdlIGFzc3VtZSB3ZSB3ZXJlIFNTUidkIGFuZCB0aGF0XG4gIC8vIFNTUiBkaWQgdGhlIGluaXRpYWwgc2Nyb2xsIHJlc3RvcmF0aW9uLlxuICBsZXQgaW5pdGlhbFNjcm9sbFJlc3RvcmVkID0gaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG4gIGxldCBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGluaXQuaGlzdG9yeS5sb2NhdGlvbiwgYmFzZW5hbWUpO1xuICBsZXQgaW5pdGlhbEVycm9ycyA9IG51bGw7XG4gIGlmIChpbml0aWFsTWF0Y2hlcyA9PSBudWxsICYmICFwYXRjaFJvdXRlc09uTmF2aWdhdGlvbkltcGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgIHBhdGhuYW1lOiBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWVcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJvdXRlXG4gICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGluaXRpYWxFcnJvcnMgPSB7XG4gICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgIH07XG4gIH1cbiAgLy8gSW4gU1BBIGFwcHMsIGlmIHRoZSB1c2VyIHByb3ZpZGVkIGEgcGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb24gaW1wbGVtZW50YXRpb24gYW5kXG4gIC8vIG91ciBpbml0aWFsIG1hdGNoIGlzIGEgc3BsYXQgcm91dGUsIGNsZWFyIHRoZW0gb3V0IHNvIHdlIHJ1biB0aHJvdWdoIGxhenlcbiAgLy8gZGlzY292ZXJ5IG9uIGh5ZHJhdGlvbiBpbiBjYXNlIHRoZXJlJ3MgYSBtb3JlIGFjY3VyYXRlIGxhenkgcm91dGUgbWF0Y2guXG4gIC8vIEluIFNTUiBhcHBzICh3aXRoIGBoeWRyYXRpb25EYXRhYCksIHdlIGV4cGVjdCB0aGF0IHRoZSBzZXJ2ZXIgd2lsbCBzZW5kXG4gIC8vIHVwIHRoZSBwcm9wZXIgbWF0Y2hlZCByb3V0ZXMgc28gd2UgZG9uJ3Qgd2FudCB0byBydW4gbGF6eSBkaXNjb3Zlcnkgb25cbiAgLy8gaW5pdGlhbCBoeWRyYXRpb24gYW5kIHdhbnQgdG8gaHlkcmF0ZSBpbnRvIHRoZSBzcGxhdCByb3V0ZS5cbiAgaWYgKGluaXRpYWxNYXRjaGVzICYmICFpbml0Lmh5ZHJhdGlvbkRhdGEpIHtcbiAgICBsZXQgZm9nT2ZXYXIgPSBjaGVja0ZvZ09mV2FyKGluaXRpYWxNYXRjaGVzLCBkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIGlmIChmb2dPZldhci5hY3RpdmUpIHtcbiAgICAgIGluaXRpYWxNYXRjaGVzID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgbGV0IGluaXRpYWxpemVkO1xuICBpZiAoIWluaXRpYWxNYXRjaGVzKSB7XG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IFtdO1xuICAgIC8vIElmIHBhcnRpYWwgaHlkcmF0aW9uIGFuZCBmb2cgb2Ygd2FyIGlzIGVuYWJsZWQsIHdlIHdpbGwgYmUgcnVubmluZ1xuICAgIC8vIGBwYXRjaFJvdXRlc09uTmF2aWdhdGlvbmAgZHVyaW5nIGh5ZHJhdGlvbiBzbyBpbmNsdWRlIGFueSBwYXJ0aWFsIG1hdGNoZXMgYXNcbiAgICAvLyB0aGUgaW5pdGlhbCBtYXRjaGVzIHNvIHdlIGNhbiBwcm9wZXJseSByZW5kZXIgYEh5ZHJhdGVGYWxsYmFja2Anc1xuICAgIGlmIChmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbikge1xuICAgICAgbGV0IGZvZ09mV2FyID0gY2hlY2tGb2dPZldhcihudWxsLCBkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgaWYgKGZvZ09mV2FyLmFjdGl2ZSAmJiBmb2dPZldhci5tYXRjaGVzKSB7XG4gICAgICAgIGluaXRpYWxNYXRjaGVzID0gZm9nT2ZXYXIubWF0Y2hlcztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubGF6eSkpIHtcbiAgICAvLyBBbGwgaW5pdGlhbE1hdGNoZXMgbmVlZCB0byBiZSBsb2FkZWQgYmVmb3JlIHdlJ3JlIHJlYWR5LiAgSWYgd2UgaGF2ZSBsYXp5XG4gICAgLy8gZnVuY3Rpb25zIGFyb3VuZCBzdGlsbCB0aGVuIHdlJ2xsIG5lZWQgdG8gcnVuIHRoZW0gaW4gaW5pdGlhbGl6ZSgpXG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgfSBlbHNlIGlmICghaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubG9hZGVyKSkge1xuICAgIC8vIElmIHdlJ3ZlIGdvdCBubyBsb2FkZXJzIHRvIHJ1biwgdGhlbiB3ZSdyZSBnb29kIHRvIGdvXG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uKSB7XG4gICAgLy8gSWYgcGFydGlhbCBoeWRyYXRpb24gaXMgZW5hYmxlZCwgd2UncmUgaW5pdGlhbGl6ZWQgc28gbG9uZyBhcyB3ZSB3ZXJlXG4gICAgLy8gcHJvdmlkZWQgd2l0aCBoeWRyYXRpb25EYXRhIGZvciBldmVyeSByb3V0ZSB3aXRoIGEgbG9hZGVyLCBhbmQgbm8gbG9hZGVyc1xuICAgIC8vIHdlcmUgbWFya2VkIGZvciBleHBsaWNpdCBoeWRyYXRpb25cbiAgICBsZXQgbG9hZGVyRGF0YSA9IGluaXQuaHlkcmF0aW9uRGF0YSA/IGluaXQuaHlkcmF0aW9uRGF0YS5sb2FkZXJEYXRhIDogbnVsbDtcbiAgICBsZXQgZXJyb3JzID0gaW5pdC5oeWRyYXRpb25EYXRhID8gaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyA6IG51bGw7XG4gICAgLy8gSWYgZXJyb3JzIGV4aXN0LCBkb24ndCBjb25zaWRlciByb3V0ZXMgYmVsb3cgdGhlIGJvdW5kYXJ5XG4gICAgaWYgKGVycm9ycykge1xuICAgICAgbGV0IGlkeCA9IGluaXRpYWxNYXRjaGVzLmZpbmRJbmRleChtID0+IGVycm9yc1ttLnJvdXRlLmlkXSAhPT0gdW5kZWZpbmVkKTtcbiAgICAgIGluaXRpYWxpemVkID0gaW5pdGlhbE1hdGNoZXMuc2xpY2UoMCwgaWR4ICsgMSkuZXZlcnkobSA9PiAhc2hvdWxkTG9hZFJvdXRlT25IeWRyYXRpb24obS5yb3V0ZSwgbG9hZGVyRGF0YSwgZXJyb3JzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXRpYWxpemVkID0gaW5pdGlhbE1hdGNoZXMuZXZlcnkobSA9PiAhc2hvdWxkTG9hZFJvdXRlT25IeWRyYXRpb24obS5yb3V0ZSwgbG9hZGVyRGF0YSwgZXJyb3JzKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdpdGhvdXQgcGFydGlhbCBoeWRyYXRpb24gLSB3ZSdyZSBpbml0aWFsaXplZCBpZiB3ZSB3ZXJlIHByb3ZpZGVkIGFueVxuICAgIC8vIGh5ZHJhdGlvbkRhdGEgLSB3aGljaCBpcyBleHBlY3RlZCB0byBiZSBjb21wbGV0ZVxuICAgIGluaXRpYWxpemVkID0gaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG4gIH1cbiAgbGV0IHJvdXRlcjtcbiAgbGV0IHN0YXRlID0ge1xuICAgIGhpc3RvcnlBY3Rpb246IGluaXQuaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGluaXQuaGlzdG9yeS5sb2NhdGlvbixcbiAgICBtYXRjaGVzOiBpbml0aWFsTWF0Y2hlcyxcbiAgICBpbml0aWFsaXplZCxcbiAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgLy8gRG9uJ3QgcmVzdG9yZSBvbiBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgaWYgd2Ugd2VyZSBTU1InZFxuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwgPyBmYWxzZSA6IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKSxcbiAgICBibG9ja2VyczogbmV3IE1hcCgpXG4gIH07XG4gIC8vIC0tIFN0YXRlZnVsIGludGVybmFsIHZhcmlhYmxlcyB0byBtYW5hZ2UgbmF2aWdhdGlvbnMgLS1cbiAgLy8gQ3VycmVudCBuYXZpZ2F0aW9uIGluIHByb2dyZXNzICh0byBiZSBjb21taXR0ZWQgaW4gY29tcGxldGVOYXZpZ2F0aW9uKVxuICBsZXQgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIC8vIFNob3VsZCB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHByZXZlbnQgdGhlIHNjcm9sbCByZXNldCBpZiBzY3JvbGwgY2Fubm90XG4gIC8vIGJlIHJlc3RvcmVkP1xuICBsZXQgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAvLyBBYm9ydENvbnRyb2xsZXIgZm9yIHRoZSBhY3RpdmUgbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyO1xuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBlbmFibGUgZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbj9cbiAgbGV0IHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgLy8gU3RvcmUgYXBwbGllZCB2aWV3IHRyYW5zaXRpb25zIHNvIHdlIGNhbiBhcHBseSB0aGVtIG9uIFBPUFxuICBsZXQgYXBwbGllZFZpZXdUcmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgcGVyc2lzdGluZyBhcHBsaWVkIHRyYW5zaXRpb25zIHRvIHNlc3Npb25TdG9yYWdlXG4gIGxldCByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSBudWxsO1xuICAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG4gIGxldCBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgZmxhZyB0byBmb3JjZSByZXZhbGlkYXRpb24gb2YgYWxsIGxvYWRlcnM6XG4gIC8vICAtIHN1Ym1pc3Npb25zIChjb21wbGV0ZWQgb3IgaW50ZXJydXB0ZWQpXG4gIC8vICAtIHVzZVJldmFsaWRhdG9yKClcbiAgLy8gIC0gWC1SZW1peC1SZXZhbGlkYXRlIChmcm9tIHJlZGlyZWN0KVxuICBsZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG4gIGxldCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBuZXcgU2V0KCk7XG4gIC8vIEFib3J0Q29udHJvbGxlcnMgZm9yIGFueSBpbi1mbGlnaHQgZmV0Y2hlcnNcbiAgbGV0IGZldGNoQ29udHJvbGxlcnMgPSBuZXcgTWFwKCk7XG4gIC8vIFRyYWNrIGxvYWRzIGJhc2VkIG9uIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IHN0YXJ0ZWRcbiAgbGV0IGluY3JlbWVudGluZ0xvYWRJZCA9IDA7XG4gIC8vIFRyYWNrIHRoZSBvdXRzdGFuZGluZyBwZW5kaW5nIG5hdmlnYXRpb24gZGF0YSBsb2FkIHRvIGJlIGNvbXBhcmVkIGFnYWluc3RcbiAgLy8gdGhlIGdsb2JhbGx5IGluY3JlbWVudGluZyBsb2FkIHdoZW4gYSBmZXRjaGVyIGxvYWQgbGFuZHMgYWZ0ZXIgYSBjb21wbGV0ZWRcbiAgLy8gbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSAtMTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcbiAgbGV0IGZldGNoUmVsb2FkSWRzID0gbmV3IE1hcCgpO1xuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCByZWRpcmVjdCBuYXZpZ2F0aW9uc1xuICBsZXQgZmV0Y2hSZWRpcmVjdElkcyA9IG5ldyBTZXQoKTtcbiAgLy8gTW9zdCByZWNlbnQgaHJlZi9tYXRjaCBmb3IgZmV0Y2hlci5sb2FkIGNhbGxzIGZvciBmZXRjaGVyc1xuICBsZXQgZmV0Y2hMb2FkTWF0Y2hlcyA9IG5ldyBNYXAoKTtcbiAgLy8gUmVmLWNvdW50IG1vdW50ZWQgZmV0Y2hlcnMgc28gd2Uga25vdyB3aGVuIGl0J3Mgb2sgdG8gY2xlYW4gdGhlbSB1cFxuICBsZXQgYWN0aXZlRmV0Y2hlcnMgPSBuZXcgTWFwKCk7XG4gIC8vIEZldGNoZXJzIHRoYXQgaGF2ZSByZXF1ZXN0ZWQgYSBkZWxldGUgd2hlbiB1c2luZyB2N19mZXRjaGVyUGVyc2lzdCxcbiAgLy8gdGhleSdsbCBiZSBvZmZpY2lhbGx5IHJlbW92ZWQgYWZ0ZXIgdGhleSByZXR1cm4gdG8gaWRsZVxuICBsZXQgZGVsZXRlZEZldGNoZXJzID0gbmV3IFNldCgpO1xuICAvLyBTdG9yZSBEZWZlcnJlZERhdGEgaW5zdGFuY2VzIGZvciBhY3RpdmUgcm91dGUgbWF0Y2hlcy4gIFdoZW4gYVxuICAvLyByb3V0ZSBsb2FkZXIgcmV0dXJucyBkZWZlcigpIHdlIHN0aWNrIG9uZSBpbiBoZXJlLiAgVGhlbiwgd2hlbiBhIG5lc3RlZFxuICAvLyBwcm9taXNlIHJlc29sdmVzIHdlIHVwZGF0ZSBsb2FkZXJEYXRhLiAgSWYgYSBuZXcgbmF2aWdhdGlvbiBzdGFydHMgd2VcbiAgLy8gY2FuY2VsIGFjdGl2ZSBkZWZlcnJlZHMgZm9yIGVsaW1pbmF0ZWQgcm91dGVzLlxuICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpO1xuICAvLyBTdG9yZSBibG9ja2VyIGZ1bmN0aW9ucyBpbiBhIHNlcGFyYXRlIE1hcCBvdXRzaWRlIG9mIHJvdXRlciBzdGF0ZSBzaW5jZVxuICAvLyB3ZSBkb24ndCBuZWVkIHRvIHVwZGF0ZSBVSSBzdGF0ZSBpZiB0aGV5IGNoYW5nZVxuICBsZXQgYmxvY2tlckZ1bmN0aW9ucyA9IG5ldyBNYXAoKTtcbiAgLy8gRmxhZyB0byBpZ25vcmUgdGhlIG5leHQgaGlzdG9yeSB1cGRhdGUsIHNvIHdlIGNhbiByZXZlcnQgdGhlIFVSTCBjaGFuZ2Ugb25cbiAgLy8gYSBQT1AgbmF2aWdhdGlvbiB0aGF0IHdhcyBibG9ja2VkIGJ5IHRoZSB1c2VyIHdpdGhvdXQgdG91Y2hpbmcgcm91dGVyIHN0YXRlXG4gIGxldCB1bmJsb2NrQmxvY2tlckhpc3RvcnlVcGRhdGUgPSB1bmRlZmluZWQ7XG4gIC8vIEluaXRpYWxpemUgdGhlIHJvdXRlciwgYWxsIHNpZGUgZWZmZWN0cyBzaG91bGQgYmUga2lja2VkIG9mZiBmcm9tIGhlcmUuXG4gIC8vIEltcGxlbWVudGVkIGFzIGEgRmx1ZW50IEFQSSBmb3IgZWFzZSBvZjpcbiAgLy8gICBsZXQgcm91dGVyID0gY3JlYXRlUm91dGVyKGluaXQpLmluaXRpYWxpemUoKTtcbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAvLyBJZiBoaXN0b3J5IGluZm9ybXMgdXMgb2YgYSBQT1AgbmF2aWdhdGlvbiwgc3RhcnQgdGhlIG5hdmlnYXRpb24gYnV0IGRvIG5vdCB1cGRhdGVcbiAgICAvLyBzdGF0ZS4gIFdlJ2xsIHVwZGF0ZSBvdXIgb3duIHN0YXRlIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgdW5saXN0ZW5IaXN0b3J5ID0gaW5pdC5oaXN0b3J5Lmxpc3RlbihfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGFjdGlvbjogaGlzdG9yeUFjdGlvbixcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIGRlbHRhXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIC8vIElnbm9yZSB0aGlzIGV2ZW50IGlmIGl0IHdhcyBqdXN0IHVzIHJlc2V0dGluZyB0aGUgVVJMIGZyb20gYVxuICAgICAgLy8gYmxvY2tlZCBQT1AgbmF2aWdhdGlvblxuICAgICAgaWYgKHVuYmxvY2tCbG9ja2VySGlzdG9yeVVwZGF0ZSkge1xuICAgICAgICB1bmJsb2NrQmxvY2tlckhpc3RvcnlVcGRhdGUoKTtcbiAgICAgICAgdW5ibG9ja0Jsb2NrZXJIaXN0b3J5VXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3YXJuaW5nKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA9PT0gMCB8fCBkZWx0YSAhPSBudWxsLCBcIllvdSBhcmUgdHJ5aW5nIHRvIHVzZSBhIGJsb2NrZXIgb24gYSBQT1AgbmF2aWdhdGlvbiB0byBhIGxvY2F0aW9uIFwiICsgXCJ0aGF0IHdhcyBub3QgY3JlYXRlZCBieSBAcmVtaXgtcnVuL3JvdXRlci4gVGhpcyB3aWxsIGZhaWwgc2lsZW50bHkgaW4gXCIgKyBcInByb2R1Y3Rpb24uIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgYXJlIG5hdmlnYXRpbmcgb3V0c2lkZSB0aGUgcm91dGVyIFwiICsgXCJ2aWEgYHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZWAvYHdpbmRvdy5sb2NhdGlvbi5oYXNoYCBpbnN0ZWFkIG9mIHVzaW5nIFwiICsgXCJyb3V0ZXIgbmF2aWdhdGlvbiBBUElzLiAgVGhpcyBjYW4gYWxzbyBoYXBwZW4gaWYgeW91IGFyZSB1c2luZyBcIiArIFwiY3JlYXRlSGFzaFJvdXRlciBhbmQgdGhlIHVzZXIgbWFudWFsbHkgY2hhbmdlcyB0aGUgVVJMLlwiKTtcbiAgICAgIGxldCBibG9ja2VyS2V5ID0gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKHtcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaGlzdG9yeUFjdGlvblxuICAgICAgfSk7XG4gICAgICBpZiAoYmxvY2tlcktleSAmJiBkZWx0YSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFJlc3RvcmUgdGhlIFVSTCB0byBtYXRjaCB0aGUgY3VycmVudCBVSSwgYnV0IGRvbid0IHVwZGF0ZSByb3V0ZXIgc3RhdGVcbiAgICAgICAgbGV0IG5leHRIaXN0b3J5VXBkYXRlUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgIHVuYmxvY2tCbG9ja2VySGlzdG9yeVVwZGF0ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgbG9jYXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gUmUtZG8gdGhlIHNhbWUgUE9QIG5hdmlnYXRpb24gd2UganVzdCBibG9ja2VkLCBhZnRlciB0aGUgdXJsXG4gICAgICAgICAgICAvLyByZXN0b3JhdGlvbiBpcyBhbHNvIGNvbXBsZXRlLiAgU2VlOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzExNjEzXG4gICAgICAgICAgICBuZXh0SGlzdG9yeVVwZGF0ZVByb21pc2UudGhlbigoKSA9PiBpbml0Lmhpc3RvcnkuZ28oZGVsdGEpKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgICAgICAgICBibG9ja2Vycy5zZXQoYmxvY2tlcktleSwgSURMRV9CTE9DS0VSKTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgICAgYmxvY2tlcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24pO1xuICAgIH0pO1xuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIC8vIEZJWE1FOiBUaGlzIGZlZWxzIGdyb3NzLiAgSG93IGNhbiB3ZSBjbGVhbnVwIHRoZSBsaW5lcyBiZXR3ZWVuXG4gICAgICAvLyBzY3JvbGxSZXN0b3JhdGlvbi9hcHBsaWVkVHJhbnNpdGlvbnMgcGVyc2lzdGFuY2U/XG4gICAgICByZXN0b3JlQXBwbGllZFRyYW5zaXRpb25zKHJvdXRlcldpbmRvdywgYXBwbGllZFZpZXdUcmFuc2l0aW9ucyk7XG4gICAgICBsZXQgX3NhdmVBcHBsaWVkVHJhbnNpdGlvbnMgPSAoKSA9PiBwZXJzaXN0QXBwbGllZFRyYW5zaXRpb25zKHJvdXRlcldpbmRvdywgYXBwbGllZFZpZXdUcmFuc2l0aW9ucyk7XG4gICAgICByb3V0ZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9zYXZlQXBwbGllZFRyYW5zaXRpb25zKTtcbiAgICAgIHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lciA9ICgpID0+IHJvdXRlcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX3NhdmVBcHBsaWVkVHJhbnNpdGlvbnMpO1xuICAgIH1cbiAgICAvLyBLaWNrIG9mZiBpbml0aWFsIGRhdGEgbG9hZCBpZiBuZWVkZWQuICBVc2UgUG9wIHRvIGF2b2lkIG1vZGlmeWluZyBoaXN0b3J5XG4gICAgLy8gTm90ZSB3ZSBkb24ndCBkbyBhbnkgaGFuZGxpbmcgb2YgbGF6eSBoZXJlLiAgRm9yIFNQQSdzIGl0J2xsIGdldCBoYW5kbGVkXG4gICAgLy8gaW4gdGhlIG5vcm1hbCBuYXZpZ2F0aW9uIGZsb3cuICBGb3IgU1NSIGl0J3MgZXhwZWN0ZWQgdGhhdCBsYXp5IG1vZHVsZXMgYXJlXG4gICAgLy8gcmVzb2x2ZWQgcHJpb3IgdG8gcm91dGVyIGNyZWF0aW9uIHNpbmNlIHdlIGNhbid0IGdvIGludG8gYSBmYWxsYmFja0VsZW1lbnRcbiAgICAvLyBVSSBmb3IgU1NSJ2QgYXBwc1xuICAgIGlmICghc3RhdGUuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihBY3Rpb24uUG9wLCBzdGF0ZS5sb2NhdGlvbiwge1xuICAgICAgICBpbml0aWFsSHlkcmF0aW9uOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuICAvLyBDbGVhbiB1cCBhIHJvdXRlciBhbmQgaXQncyBzaWRlIGVmZmVjdHNcbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG4gICAgaWYgKHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgcmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyKCk7XG4gICAgfVxuICAgIHN1YnNjcmliZXJzLmNsZWFyKCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHN0YXRlLmZldGNoZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlRmV0Y2hlcihrZXkpKTtcbiAgICBzdGF0ZS5ibG9ja2Vycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUJsb2NrZXIoa2V5KSk7XG4gIH1cbiAgLy8gU3Vic2NyaWJlIHRvIHN0YXRlIHVwZGF0ZXMgZm9yIHRoZSByb3V0ZXJcbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGZuKSB7XG4gICAgc3Vic2NyaWJlcnMuYWRkKGZuKTtcbiAgICByZXR1cm4gKCkgPT4gc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuICAvLyBVcGRhdGUgb3VyIHN0YXRlIGFuZCBub3RpZnkgdGhlIGNhbGxpbmcgY29udGV4dCBvZiB0aGUgY2hhbmdlXG4gIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKG5ld1N0YXRlLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgIC8vIFByZXAgZmV0Y2hlciBjbGVhbnVwIHNvIHdlIGNhbiB0ZWxsIHRoZSBVSSB3aGljaCBmZXRjaGVyIGRhdGEgZW50cmllc1xuICAgIC8vIGNhbiBiZSByZW1vdmVkXG4gICAgbGV0IGNvbXBsZXRlZEZldGNoZXJzID0gW107XG4gICAgbGV0IGRlbGV0ZWRGZXRjaGVyc0tleXMgPSBbXTtcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChmZXRjaGVyLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICAgICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgLy8gVW5tb3VudGVkIGZyb20gdGhlIFVJIGFuZCBjYW4gYmUgdG90YWxseSByZW1vdmVkXG4gICAgICAgICAgICBkZWxldGVkRmV0Y2hlcnNLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUmV0dXJuZWQgdG8gaWRsZSBidXQgc3RpbGwgbW91bnRlZCBpbiB0aGUgVUksIHNvIHNlbWktcmVtYWlucyBmb3JcbiAgICAgICAgICAgIC8vIHJldmFsaWRhdGlvbnMgYW5kIHN1Y2hcbiAgICAgICAgICAgIGNvbXBsZXRlZEZldGNoZXJzLnB1c2goa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBJdGVyYXRlIG92ZXIgYSBsb2NhbCBjb3B5IHNvIHRoYXQgaWYgZmx1c2hTeW5jIGlzIHVzZWQgYW5kIHdlIGVuZCB1cFxuICAgIC8vIHJlbW92aW5nIGFuZCBhZGRpbmcgYSBuZXcgc3Vic2NyaWJlciBkdWUgdG8gdGhlIHVzZUNhbGxiYWNrIGRlcGVuZGVuY2llcyxcbiAgICAvLyB3ZSBkb24ndCBnZXQgb3Vyc2VsdmVzIGludG8gYSBsb29wIGNhbGxpbmcgdGhlIG5ldyBzdWJzY3JpYmVyIGltbWVkaWF0ZWx5XG4gICAgWy4uLnN1YnNjcmliZXJzXS5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihzdGF0ZSwge1xuICAgICAgZGVsZXRlZEZldGNoZXJzOiBkZWxldGVkRmV0Y2hlcnNLZXlzLFxuICAgICAgdmlld1RyYW5zaXRpb25PcHRzOiBvcHRzLnZpZXdUcmFuc2l0aW9uT3B0cyxcbiAgICAgIGZsdXNoU3luYzogb3B0cy5mbHVzaFN5bmMgPT09IHRydWVcbiAgICB9KSk7XG4gICAgLy8gUmVtb3ZlIGlkbGUgZmV0Y2hlcnMgZnJvbSBzdGF0ZSBzaW5jZSB3ZSBvbmx5IGNhcmUgYWJvdXQgaW4tZmxpZ2h0IGZldGNoZXJzLlxuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGNvbXBsZXRlZEZldGNoZXJzLmZvckVhY2goa2V5ID0+IHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpKTtcbiAgICAgIGRlbGV0ZWRGZXRjaGVyc0tleXMuZm9yRWFjaChrZXkgPT4gZGVsZXRlRmV0Y2hlcihrZXkpKTtcbiAgICB9XG4gIH1cbiAgLy8gQ29tcGxldGUgYSBuYXZpZ2F0aW9uIHJldHVybmluZyB0aGUgc3RhdGUubmF2aWdhdGlvbiBiYWNrIHRvIHRoZSBJRExFX05BVklHQVRJT05cbiAgLy8gYW5kIHNldHRpbmcgc3RhdGUuW2hpc3RvcnlBY3Rpb24vbG9jYXRpb24vbWF0Y2hlc10gdG8gdGhlIG5ldyByb3V0ZS5cbiAgLy8gLSBMb2NhdGlvbiBpcyBhIHJlcXVpcmVkIHBhcmFtXG4gIC8vIC0gTmF2aWdhdGlvbiB3aWxsIGFsd2F5cyBiZSBzZXQgdG8gSURMRV9OQVZJR0FUSU9OXG4gIC8vIC0gQ2FuIHBhc3MgYW55IG90aGVyIHN0YXRlIGluIG5ld1N0YXRlXG4gIGZ1bmN0aW9uIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUsIF90ZW1wKSB7XG4gICAgdmFyIF9sb2NhdGlvbiRzdGF0ZSwgX2xvY2F0aW9uJHN0YXRlMjtcbiAgICBsZXQge1xuICAgICAgZmx1c2hTeW5jXG4gICAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAgIC8vIERlZHVjZSBpZiB3ZSdyZSBpbiBhIGxvYWRpbmcvYWN0aW9uUmVsb2FkIHN0YXRlOlxuICAgIC8vIC0gV2UgaGF2ZSBjb21taXR0ZWQgYWN0aW9uRGF0YSBpbiB0aGUgc3RvcmVcbiAgICAvLyAtIFRoZSBjdXJyZW50IG5hdmlnYXRpb24gd2FzIGEgbXV0YXRpb24gc3VibWlzc2lvblxuICAgIC8vIC0gV2UncmUgcGFzdCB0aGUgc3VibWl0dGluZyBzdGF0ZSBhbmQgaW50byB0aGUgbG9hZGluZyBzdGF0ZVxuICAgIC8vIC0gVGhlIGxvY2F0aW9uIGJlaW5nIGxvYWRlZCBpcyBub3QgdGhlIHJlc3VsdCBvZiBhIHJlZGlyZWN0XG4gICAgbGV0IGlzQWN0aW9uUmVsb2FkID0gc3RhdGUuYWN0aW9uRGF0YSAhPSBudWxsICYmIHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJiBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiAoKF9sb2NhdGlvbiRzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlLl9pc1JlZGlyZWN0KSAhPT0gdHJ1ZTtcbiAgICBsZXQgYWN0aW9uRGF0YTtcbiAgICBpZiAobmV3U3RhdGUuYWN0aW9uRGF0YSkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWN0aW9uRGF0YSA9IG5ld1N0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbXB0eSBhY3Rpb25EYXRhIC0+IGNsZWFyIHByaW9yIGFjdGlvbkRhdGEgZHVlIHRvIGFuIGFjdGlvbiBlcnJvclxuICAgICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQWN0aW9uUmVsb2FkKSB7XG4gICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IGRhdGEgaWYgd2UncmUgd3JhcHBpbmcgdXAgdGhlIGFjdGlvbiByZWxvYWRcbiAgICAgIGFjdGlvbkRhdGEgPSBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDbGVhciBhY3Rpb25EYXRhIG9uIGFueSBvdGhlciBjb21wbGV0ZWQgbmF2aWdhdGlvbnNcbiAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgIH1cbiAgICAvLyBBbHdheXMgcHJlc2VydmUgYW55IGV4aXN0aW5nIGxvYWRlckRhdGEgZnJvbSByZS11c2VkIHJvdXRlc1xuICAgIGxldCBsb2FkZXJEYXRhID0gbmV3U3RhdGUubG9hZGVyRGF0YSA/IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCBuZXdTdGF0ZS5sb2FkZXJEYXRhLCBuZXdTdGF0ZS5tYXRjaGVzIHx8IFtdLCBuZXdTdGF0ZS5lcnJvcnMpIDogc3RhdGUubG9hZGVyRGF0YTtcbiAgICAvLyBPbiBhIHN1Y2Nlc3NmdWwgbmF2aWdhdGlvbiB3ZSBjYW4gYXNzdW1lIHdlIGdvdCB0aHJvdWdoIGFsbCBibG9ja2Vyc1xuICAgIC8vIHNvIHdlIGNhbiBzdGFydCBmcmVzaFxuICAgIGxldCBibG9ja2VycyA9IHN0YXRlLmJsb2NrZXJzO1xuICAgIGlmIChibG9ja2Vycy5zaXplID4gMCkge1xuICAgICAgYmxvY2tlcnMgPSBuZXcgTWFwKGJsb2NrZXJzKTtcbiAgICAgIGJsb2NrZXJzLmZvckVhY2goKF8sIGspID0+IGJsb2NrZXJzLnNldChrLCBJRExFX0JMT0NLRVIpKTtcbiAgICB9XG4gICAgLy8gQWx3YXlzIHJlc3BlY3QgdGhlIHVzZXIgZmxhZy4gIE90aGVyd2lzZSBkb24ndCByZXNldCBvbiBtdXRhdGlvblxuICAgIC8vIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnMgdW5sZXNzIHRoZXkgcmVkaXJlY3RcbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSB8fCBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgKChfbG9jYXRpb24kc3RhdGUyID0gbG9jYXRpb24uc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfbG9jYXRpb24kc3RhdGUyLl9pc1JlZGlyZWN0KSAhPT0gdHJ1ZTtcbiAgICAvLyBDb21taXQgYW55IGluLWZsaWdodCByb3V0ZXMgYXQgdGhlIGVuZCBvZiB0aGUgSE1SIHJldmFsaWRhdGlvbiBcIm5hdmlnYXRpb25cIlxuICAgIGlmIChpbkZsaWdodERhdGFSb3V0ZXMpIHtcbiAgICAgIGRhdGFSb3V0ZXMgPSBpbkZsaWdodERhdGFSb3V0ZXM7XG4gICAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUHVzaCkge1xuICAgICAgaW5pdC5oaXN0b3J5LnB1c2gobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5SZXBsYWNlKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH1cbiAgICBsZXQgdmlld1RyYW5zaXRpb25PcHRzO1xuICAgIC8vIE9uIFBPUCwgZW5hYmxlIHRyYW5zaXRpb25zIGlmIHRoZXkgd2VyZSBlbmFibGVkIG9uIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uXG4gICAgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIHtcbiAgICAgIC8vIEZvcndhcmQgdGFrZXMgcHJlY2VkZW5jZSBzbyB0aGV5IGJlaGF2ZSBsaWtlIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uXG4gICAgICBsZXQgcHJpb3JQYXRocyA9IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuZ2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIGlmIChwcmlvclBhdGhzICYmIHByaW9yUGF0aHMuaGFzKGxvY2F0aW9uLnBhdGhuYW1lKSkge1xuICAgICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuaGFzKGxvY2F0aW9uLnBhdGhuYW1lKSkge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgcHJldmlvdXMgZm9yd2FyZCBuYXYsIGFzc3VtZSB3ZSdyZSBwb3BwaW5nIGJhY2sgdG9cbiAgICAgICAgLy8gdGhlIG5ldyBsb2NhdGlvbiBhbmQgZW5hYmxlIGlmIHRoYXQgbG9jYXRpb24gcHJldmlvdXNseSBlbmFibGVkXG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogc3RhdGUubG9jYXRpb25cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQpIHtcbiAgICAgIC8vIFN0b3JlIHRoZSBhcHBsaWVkIHRyYW5zaXRpb24gb24gUFVTSC9SRVBMQUNFXG4gICAgICBsZXQgdG9QYXRocyA9IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuZ2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIGlmICh0b1BhdGhzKSB7XG4gICAgICAgIHRvUGF0aHMuYWRkKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvUGF0aHMgPSBuZXcgU2V0KFtsb2NhdGlvbi5wYXRobmFtZV0pO1xuICAgICAgICBhcHBsaWVkVmlld1RyYW5zaXRpb25zLnNldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSwgdG9QYXRocyk7XG4gICAgICB9XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgYWN0aW9uRGF0YSxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG5ld1N0YXRlLm1hdGNoZXMgfHwgc3RhdGUubWF0Y2hlcyksXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBibG9ja2Vyc1xuICAgIH0pLCB7XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICBmbHVzaFN5bmM6IGZsdXNoU3luYyA9PT0gdHJ1ZVxuICAgIH0pO1xuICAgIC8vIFJlc2V0IHN0YXRlZnVsIG5hdmlnYXRpb24gdmFyc1xuICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgICBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkID0gZmFsc2U7XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gIH1cbiAgLy8gVHJpZ2dlciBhIG5hdmlnYXRpb24gZXZlbnQsIHdoaWNoIGNhbiBlaXRoZXIgYmUgYSBudW1lcmljYWwgUE9QIG9yIGEgUFVTSFxuICAvLyByZXBsYWNlIHdpdGggYW4gb3B0aW9uYWwgc3VibWlzc2lvblxuICBhc3luYyBmdW5jdGlvbiBuYXZpZ2F0ZSh0bywgb3B0cykge1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVRvKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSwgdG8sIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mcm9tUm91dGVJZCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5yZWxhdGl2ZSk7XG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZXJyb3JcbiAgICB9ID0gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKGZ1dHVyZS52N19ub3JtYWxpemVGb3JtTWV0aG9kLCBmYWxzZSwgbm9ybWFsaXplZFBhdGgsIG9wdHMpO1xuICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHBhdGgsIG9wdHMgJiYgb3B0cy5zdGF0ZSk7XG4gICAgLy8gV2hlbiB1c2luZyBuYXZpZ2F0ZSBhcyBhIFBVU0gvUkVQTEFDRSB3ZSBhcmVuJ3QgcmVhZGluZyBhbiBhbHJlYWR5LWVuY29kZWRcbiAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yXG4gICAgLy8gcmVtYWlucyB0aGUgc2FtZSBhcyBQT1AgYW5kIG5vbi1kYXRhLXJvdXRlciB1c2FnZXMuICBuZXcgVVJMKCkgZG9lcyBhbGxcbiAgICAvLyB0aGUgc2FtZSBlbmNvZGluZyB3ZSdkIGdldCBmcm9tIGEgaGlzdG9yeS5wdXNoU3RhdGUvd2luZG93LmxvY2F0aW9uIHJlYWRcbiAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5XG4gICAgbmV4dExvY2F0aW9uID0gX2V4dGVuZHMoe30sIG5leHRMb2NhdGlvbiwgaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKG5leHRMb2NhdGlvbikpO1xuICAgIGxldCB1c2VyUmVwbGFjZSA9IG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwgPyBvcHRzLnJlcGxhY2UgOiB1bmRlZmluZWQ7XG4gICAgbGV0IGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBpZiAodXNlclJlcGxhY2UgPT09IHRydWUpIHtcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9IGVsc2UgaWYgKHVzZXJSZXBsYWNlID09PSBmYWxzZSkgOyBlbHNlIGlmIChzdWJtaXNzaW9uICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpICYmIHN1Ym1pc3Npb24uZm9ybUFjdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIC8vIEJ5IGRlZmF1bHQgb24gc3VibWlzc2lvbnMgdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24gd2UgUkVQTEFDRSBzbyB0aGF0XG4gICAgICAvLyB1c2VycyBkb24ndCBoYXZlIHRvIGRvdWJsZS1jbGljayB0aGUgYmFjayBidXR0b24gdG8gZ2V0IHRvIHRoZSBwcmlvclxuICAgICAgLy8gbG9jYXRpb24uICBJZiB0aGUgdXNlciByZWRpcmVjdHMgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gZnJvbSB0aGVcbiAgICAgIC8vIGFjdGlvbi9sb2FkZXIgdGhpcyB3aWxsIGJlIGlnbm9yZWQgYW5kIHRoZSByZWRpcmVjdCB3aWxsIGJlIGEgUFVTSFxuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH1cbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gb3B0cyAmJiBcInByZXZlbnRTY3JvbGxSZXNldFwiIGluIG9wdHMgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlO1xuICAgIGxldCBibG9ja2VyS2V5ID0gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KTtcbiAgICBpZiAoYmxvY2tlcktleSkge1xuICAgICAgLy8gUHV0IHRoZSBibG9ja2VyIGludG8gYSBibG9ja2VkIHN0YXRlXG4gICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBTZW5kIHRoZSBzYW1lIG5hdmlnYXRpb24gdGhyb3VnaFxuICAgICAgICAgIG5hdmlnYXRlKHRvLCBvcHRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXksIElETEVfQkxPQ0tFUik7XG4gICAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgICAgYmxvY2tlcnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbmV4dExvY2F0aW9uLCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgLy8gU2VuZCB0aHJvdWdoIHRoZSBmb3JtRGF0YSBzZXJpYWxpemF0aW9uIGVycm9yIGlmIHdlIGhhdmUgb25lIHNvIHdlIGNhblxuICAgICAgLy8gcmVuZGVyIGF0IHRoZSByaWdodCBlcnJvciBib3VuZGFyeSBhZnRlciB3ZSBtYXRjaCByb3V0ZXNcbiAgICAgIHBlbmRpbmdFcnJvcjogZXJyb3IsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICByZXBsYWNlOiBvcHRzICYmIG9wdHMucmVwbGFjZSxcbiAgICAgIGVuYWJsZVZpZXdUcmFuc2l0aW9uOiBvcHRzICYmIG9wdHMudmlld1RyYW5zaXRpb24sXG4gICAgICBmbHVzaFN5bmNcbiAgICB9KTtcbiAgfVxuICAvLyBSZXZhbGlkYXRlIGFsbCBjdXJyZW50IGxvYWRlcnMuICBJZiBhIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3Mgb3IgaWYgdGhpc1xuICAvLyBpcyBpbnRlcnJ1cHRlZCBieSBhIG5hdmlnYXRpb24sIGFsbG93IHRoaXMgdG8gXCJzdWNjZWVkXCIgYnkgY2FsbGluZyBhbGxcbiAgLy8gbG9hZGVycyBkdXJpbmcgdGhlIG5leHQgbG9hZGVyIHJvdW5kXG4gIGZ1bmN0aW9uIHJldmFsaWRhdGUoKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICByZXZhbGlkYXRpb246IFwibG9hZGluZ1wiXG4gICAgfSk7XG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IHN1Ym1pdHRpbmcgYW4gYWN0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiwgd2UnbGwganVzdCBsZXQgdGhlIGZvbGxvdyB1cCBsb2FkZXIgZXhlY3V0aW9uIGNhbGwgYWxsIGxvYWRlcnNcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJzdWJtaXR0aW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IGluIGFuIGlkbGUgc3RhdGUsIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24gZm9yIHRoZSBjdXJyZW50XG4gICAgLy8gYWN0aW9uL2xvY2F0aW9uIGFuZCBtYXJrIGl0IGFzIHVuaW50ZXJydXB0ZWQsIHdoaWNoIHdpbGwgc2tpcCB0aGUgaGlzdG9yeVxuICAgIC8vIHVwZGF0ZSBpbiBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5sb2NhdGlvbiwge1xuICAgICAgICBzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb246IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIGlmIHdlJ3JlIGN1cnJlbnRseSBpbiBhIGxvYWRpbmcgc3RhdGUsIGp1c3Qgc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uIHRvIHRoZSBuYXZpZ2F0aW9uLmxvY2F0aW9uIGJ1dCBkbyBub3QgdHJpZ2dlciBhbiB1bmludGVycnVwdGVkXG4gICAgLy8gcmV2YWxpZGF0aW9uIHNvIHRoYXQgaGlzdG9yeSBjb3JyZWN0bHkgdXBkYXRlcyBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHN0YXJ0TmF2aWdhdGlvbihwZW5kaW5nQWN0aW9uIHx8IHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogc3RhdGUubmF2aWdhdGlvbixcbiAgICAgIC8vIFByb3h5IHRocm91Z2ggYW55IHJlbmRpbmcgdmlldyB0cmFuc2l0aW9uXG4gICAgICBlbmFibGVWaWV3VHJhbnNpdGlvbjogcGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCA9PT0gdHJ1ZVxuICAgIH0pO1xuICB9XG4gIC8vIFN0YXJ0IGEgbmF2aWdhdGlvbiB0byB0aGUgZ2l2ZW4gYWN0aW9uL2xvY2F0aW9uLiAgQ2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhXG4gIC8vIG92ZXJyaWRlTmF2aWdhdGlvbiB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBub3JtYWxMb2FkIGluIHRoZSBjYXNlIG9mIGEgcmVkaXJlY3RcbiAgLy8gbmF2aWdhdGlvblxuICBhc3luYyBmdW5jdGlvbiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24sIG9wdHMpIHtcbiAgICAvLyBBYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbmF2aWdhdGlvbnMgYW5kIHN0YXJ0IGEgbmV3IG9uZS4gVW5zZXQgYW55IG9uZ29pbmdcbiAgICAvLyB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbnMgdW5sZXNzIHRvbGQgb3RoZXJ3aXNlLCBzaW5jZSB3ZSB3YW50IHRoaXNcbiAgICAvLyBuZXcgbmF2aWdhdGlvbiB0byB1cGRhdGUgaGlzdG9yeSBub3JtYWxseVxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIHBlbmRpbmdBY3Rpb24gPSBoaXN0b3J5QWN0aW9uO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IChvcHRzICYmIG9wdHMuc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA9PT0gdHJ1ZTtcbiAgICAvLyBTYXZlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBldmVyeSB0aW1lIHdlIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24sXG4gICAgLy8gYW5kIHRyYWNrIHdoZXRoZXIgd2Ugc2hvdWxkIHJlc2V0IHNjcm9sbCBvbiBjb21wbGV0aW9uXG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuICAgIHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSAob3B0cyAmJiBvcHRzLmVuYWJsZVZpZXdUcmFuc2l0aW9uKSA9PT0gdHJ1ZTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvcHRzICYmIG9wdHMub3ZlcnJpZGVOYXZpZ2F0aW9uO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgbGV0IGZsdXNoU3luYyA9IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZTtcbiAgICBsZXQgZm9nT2ZXYXIgPSBjaGVja0ZvZ09mV2FyKG1hdGNoZXMsIHJvdXRlc1RvVXNlLCBsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgaWYgKGZvZ09mV2FyLmFjdGl2ZSAmJiBmb2dPZldhci5tYXRjaGVzKSB7XG4gICAgICBtYXRjaGVzID0gZm9nT2ZXYXIubWF0Y2hlcztcbiAgICB9XG4gICAgLy8gU2hvcnQgY2lyY3VpdCB3aXRoIGEgNDA0IG9uIHRoZSByb290IGVycm9yIGJvdW5kYXJ5IGlmIHdlIG1hdGNoIG5vdGhpbmdcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIGVycm9yLFxuICAgICAgICBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gaGFuZGxlTmF2aWdhdGlvbmFsNDA0KGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgaXQncyBvbmx5IGEgaGFzaCBjaGFuZ2UgYW5kIG5vdCBhIHJldmFsaWRhdGlvbiBvclxuICAgIC8vIG11dGF0aW9uIHN1Ym1pc3Npb24uXG4gICAgLy9cbiAgICAvLyBJZ25vcmUgb24gaW5pdGlhbCBwYWdlIGxvYWRzIGJlY2F1c2Ugc2luY2UgdGhlIGluaXRpYWwgaHlkcmF0aW9uIHdpbGwgYWx3YXlzXG4gICAgLy8gYmUgXCJzYW1lIGhhc2hcIi4gIEZvciBleGFtcGxlLCBvbiAvcGFnZSNoYXNoIGFuZCBzdWJtaXQgYSA8Rm9ybSBtZXRob2Q9XCJwb3N0XCI+XG4gICAgLy8gd2hpY2ggd2lsbCBkZWZhdWx0IHRvIGEgbmF2aWdhdGlvbiB0byAvcGFnZVxuICAgIGlmIChzdGF0ZS5pbml0aWFsaXplZCAmJiAhaXNSZXZhbGlkYXRpb25SZXF1aXJlZCAmJiBpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikgJiYgIShvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkpIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzXG4gICAgICB9LCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCByZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBsb2NhdGlvbiwgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbCwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24pO1xuICAgIGxldCBwZW5kaW5nQWN0aW9uUmVzdWx0O1xuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0ID0gW2ZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcykucm91dGUuaWQsIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IG9wdHMucGVuZGluZ0Vycm9yXG4gICAgICB9XTtcbiAgICB9IGVsc2UgaWYgKG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qob3B0cy5zdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICAvLyBDYWxsIGFjdGlvbiBpZiB3ZSByZWNlaXZlZCBhbiBhY3Rpb24gc3VibWlzc2lvblxuICAgICAgbGV0IGFjdGlvblJlc3VsdCA9IGF3YWl0IGhhbmRsZUFjdGlvbihyZXF1ZXN0LCBsb2NhdGlvbiwgb3B0cy5zdWJtaXNzaW9uLCBtYXRjaGVzLCBmb2dPZldhci5hY3RpdmUsIHtcbiAgICAgICAgcmVwbGFjZTogb3B0cy5yZXBsYWNlLFxuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgaWYgKGFjdGlvblJlc3VsdC5zaG9ydENpcmN1aXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSByZWNlaXZlZCBhIDQwNCBmcm9tIGhhbmRsZUFjdGlvbiwgaXQncyBiZWNhdXNlIHdlIGNvdWxkbid0IGxhemlseVxuICAgICAgLy8gZGlzY292ZXIgdGhlIGRlc3RpbmF0aW9uIHJvdXRlIHNvIHdlIGRvbid0IHdhbnQgdG8gY2FsbCBsb2FkZXJzXG4gICAgICBpZiAoYWN0aW9uUmVzdWx0LnBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgICAgICAgbGV0IFtyb3V0ZUlkLCByZXN1bHRdID0gYWN0aW9uUmVzdWx0LnBlbmRpbmdBY3Rpb25SZXN1bHQ7XG4gICAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkgJiYgaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSAmJiByZXN1bHQuZXJyb3Iuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgICAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICAgICAgbWF0Y2hlczogYWN0aW9uUmVzdWx0Lm1hdGNoZXMsXG4gICAgICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgICAgIGVycm9yczoge1xuICAgICAgICAgICAgICBbcm91dGVJZF06IHJlc3VsdC5lcnJvclxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbWF0Y2hlcyA9IGFjdGlvblJlc3VsdC5tYXRjaGVzIHx8IG1hdGNoZXM7XG4gICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0ID0gYWN0aW9uUmVzdWx0LnBlbmRpbmdBY3Rpb25SZXN1bHQ7XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24pO1xuICAgICAgZmx1c2hTeW5jID0gZmFsc2U7XG4gICAgICAvLyBObyBuZWVkIHRvIGRvIGZvZyBvZiB3YXIgbWF0Y2hpbmcgYWdhaW4gb24gbG9hZGVyIGV4ZWN1dGlvblxuICAgICAgZm9nT2ZXYXIuYWN0aXZlID0gZmFsc2U7XG4gICAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICAgIHJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHJlcXVlc3QudXJsLCByZXF1ZXN0LnNpZ25hbCk7XG4gICAgfVxuICAgIC8vIENhbGwgbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBzaG9ydENpcmN1aXRlZCxcbiAgICAgIG1hdGNoZXM6IHVwZGF0ZWRNYXRjaGVzLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBhd2FpdCBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBmb2dPZldhci5hY3RpdmUsIGxvYWRpbmdOYXZpZ2F0aW9uLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLmZldGNoZXJTdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMucmVwbGFjZSwgb3B0cyAmJiBvcHRzLmluaXRpYWxIeWRyYXRpb24gPT09IHRydWUsIGZsdXNoU3luYywgcGVuZGluZ0FjdGlvblJlc3VsdCk7XG4gICAgaWYgKHNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIENsZWFuIHVwIG5vdyB0aGF0IHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmXG4gICAgLy8gd2Ugc2hvcnQgY2lyY3VpdGVkIGJlY2F1c2UgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIHdpbGwgaGF2ZSBhbHJlYWR5XG4gICAgLy8gYmVlbiBhc3NpZ25lZCB0byBhIG5ldyBjb250cm9sbGVyIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHtcbiAgICAgIG1hdGNoZXM6IHVwZGF0ZWRNYXRjaGVzIHx8IG1hdGNoZXNcbiAgICB9LCBnZXRBY3Rpb25EYXRhRm9yQ29tbWl0KHBlbmRpbmdBY3Rpb25SZXN1bHQpLCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSkpO1xuICB9XG4gIC8vIENhbGwgdGhlIGFjdGlvbiBtYXRjaGVkIGJ5IHRoZSBsZWFmIHJvdXRlIGZvciB0aGlzIG5hdmlnYXRpb24gYW5kIGhhbmRsZVxuICAvLyByZWRpcmVjdHMvZXJyb3JzXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUFjdGlvbihyZXF1ZXN0LCBsb2NhdGlvbiwgc3VibWlzc2lvbiwgbWF0Y2hlcywgaXNGb2dPZldhciwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICAvLyBQdXQgdXMgaW4gYSBzdWJtaXR0aW5nIHN0YXRlXG4gICAgbGV0IG5hdmlnYXRpb24gPSBnZXRTdWJtaXR0aW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgbmF2aWdhdGlvblxuICAgIH0sIHtcbiAgICAgIGZsdXNoU3luYzogb3B0cy5mbHVzaFN5bmMgPT09IHRydWVcbiAgICB9KTtcbiAgICBpZiAoaXNGb2dPZldhcikge1xuICAgICAgbGV0IGRpc2NvdmVyUmVzdWx0ID0gYXdhaXQgZGlzY292ZXJSb3V0ZXMobWF0Y2hlcywgbG9jYXRpb24ucGF0aG5hbWUsIHJlcXVlc3Quc2lnbmFsKTtcbiAgICAgIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGRpc2NvdmVyUmVzdWx0LnR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICBsZXQgYm91bmRhcnlJZCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoZGlzY292ZXJSZXN1bHQucGFydGlhbE1hdGNoZXMpLnJvdXRlLmlkO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1hdGNoZXM6IGRpc2NvdmVyUmVzdWx0LnBhcnRpYWxNYXRjaGVzLFxuICAgICAgICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQ6IFtib3VuZGFyeUlkLCB7XG4gICAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICAgICAgZXJyb3I6IGRpc2NvdmVyUmVzdWx0LmVycm9yXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoIWRpc2NvdmVyUmVzdWx0Lm1hdGNoZXMpIHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgcm91dGVcbiAgICAgICAgfSA9IGhhbmRsZU5hdmlnYXRpb25hbDQwNChsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQ6IFtyb3V0ZS5pZCwge1xuICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hdGNoZXMgPSBkaXNjb3ZlclJlc3VsdC5tYXRjaGVzO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBDYWxsIG91ciBhY3Rpb24gYW5kIGdldCB0aGUgcmVzdWx0XG4gICAgbGV0IHJlc3VsdDtcbiAgICBsZXQgYWN0aW9uTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIWFjdGlvbk1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWRcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcImFjdGlvblwiLCBzdGF0ZSwgcmVxdWVzdCwgW2FjdGlvbk1hdGNoXSwgbWF0Y2hlcywgbnVsbCk7XG4gICAgICByZXN1bHQgPSByZXN1bHRzW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTtcbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IHJlcGxhY2U7XG4gICAgICBpZiAob3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCkge1xuICAgICAgICByZXBsYWNlID0gb3B0cy5yZXBsYWNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgZGlkbid0IGV4cGxpY2l0eSBpbmRpY2F0ZSByZXBsYWNlIGJlaGF2aW9yLCByZXBsYWNlIGlmXG4gICAgICAgIC8vIHdlIHJlZGlyZWN0ZWQgdG8gdGhlIGV4YWN0IHNhbWUgbG9jYXRpb24gd2UncmUgY3VycmVudGx5IGF0IHRvIGF2b2lkXG4gICAgICAgIC8vIGRvdWJsZSBiYWNrLWJ1dHRvbnNcbiAgICAgICAgbGV0IGxvY2F0aW9uID0gbm9ybWFsaXplUmVkaXJlY3RMb2NhdGlvbihyZXN1bHQucmVzcG9uc2UuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKSwgbmV3IFVSTChyZXF1ZXN0LnVybCksIGJhc2VuYW1lKTtcbiAgICAgICAgcmVwbGFjZSA9IGxvY2F0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlcXVlc3QsIHJlc3VsdCwgdHJ1ZSwge1xuICAgICAgICBzdWJtaXNzaW9uLFxuICAgICAgICByZXBsYWNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgLy8gQnkgZGVmYXVsdCwgYWxsIHN1Ym1pc3Npb25zIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uIGFyZSBSRVBMQUNFXG4gICAgICAvLyBuYXZpZ2F0aW9ucywgYnV0IGlmIHRoZSBhY3Rpb24gdGhyZXcgYW4gZXJyb3IgdGhhdCdsbCBiZSByZW5kZXJlZCBpblxuICAgICAgLy8gYW4gZXJyb3JFbGVtZW50LCB3ZSBmYWxsIGJhY2sgdG8gUFVTSCBzbyB0aGF0IHRoZSB1c2VyIGNhbiB1c2UgdGhlXG4gICAgICAvLyBiYWNrIGJ1dHRvbiB0byBnZXQgYmFjayB0byB0aGUgcHJlLXN1Ym1pc3Npb24gZm9ybSBsb2NhdGlvbiB0byB0cnlcbiAgICAgIC8vIGFnYWluXG4gICAgICBpZiAoKG9wdHMgJiYgb3B0cy5yZXBsYWNlKSAhPT0gdHJ1ZSkge1xuICAgICAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0OiBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZCwgcmVzdWx0XVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0OiBbYWN0aW9uTWF0Y2gucm91dGUuaWQsIHJlc3VsdF1cbiAgICB9O1xuICB9XG4gIC8vIENhbGwgYWxsIGFwcGxpY2FibGUgbG9hZGVycyBmb3IgdGhlIGdpdmVuIG1hdGNoZXMsIGhhbmRsaW5nIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIGlzRm9nT2ZXYXIsIG92ZXJyaWRlTmF2aWdhdGlvbiwgc3VibWlzc2lvbiwgZmV0Y2hlclN1Ym1pc3Npb24sIHJlcGxhY2UsIGluaXRpYWxIeWRyYXRpb24sIGZsdXNoU3luYywgcGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHJpZ2h0IG5hdmlnYXRpb24gd2Ugd2FudCB0byB1c2UgZm9yIGRhdGEgbG9hZGluZ1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG92ZXJyaWRlTmF2aWdhdGlvbiB8fCBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgLy8gSWYgdGhpcyB3YXMgYSByZWRpcmVjdCBmcm9tIGFuIGFjdGlvbiB3ZSBkb24ndCBoYXZlIGEgXCJzdWJtaXNzaW9uXCIgYnV0XG4gICAgLy8gd2UgaGF2ZSBpdCBvbiB0aGUgbG9hZGluZyBuYXZpZ2F0aW9uIHNvIHVzZSB0aGF0IGlmIGF2YWlsYWJsZVxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBmZXRjaGVyU3VibWlzc2lvbiB8fCBnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24obG9hZGluZ05hdmlnYXRpb24pO1xuICAgIC8vIElmIHRoaXMgaXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24sIHdlIHJlbWFpbiBpbiBvdXIgY3VycmVudCBpZGxlXG4gICAgLy8gc3RhdGUuICBJZiBub3QsIHdlIG5lZWQgdG8gc3dpdGNoIHRvIG91ciBsb2FkaW5nIHN0YXRlIGFuZCBsb2FkIGRhdGEsXG4gICAgLy8gcHJlc2VydmluZyBhbnkgbmV3IGFjdGlvbiBkYXRhIG9yIGV4aXN0aW5nIGFjdGlvbiBkYXRhIChpbiB0aGUgY2FzZSBvZlxuICAgIC8vIGEgcmV2YWxpZGF0aW9uIGludGVycnVwdGluZyBhbiBhY3Rpb25SZWxvYWQpXG4gICAgLy8gSWYgd2UgaGF2ZSBwYXJ0aWFsSHlkcmF0aW9uIGVuYWJsZWQsIHRoZW4gZG9uJ3QgdXBkYXRlIHRoZSBzdGF0ZSBmb3IgdGhlXG4gICAgLy8gaW5pdGlhbCBkYXRhIGxvYWQgc2luY2UgaXQncyBub3QgYSBcIm5hdmlnYXRpb25cIlxuICAgIGxldCBzaG91bGRVcGRhdGVOYXZpZ2F0aW9uU3RhdGUgPSAhaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uICYmICghZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gfHwgIWluaXRpYWxIeWRyYXRpb24pO1xuICAgIC8vIFdoZW4gZm9nIG9mIHdhciBpcyBlbmFibGVkLCB3ZSBlbnRlciBvdXIgYGxvYWRpbmdgIHN0YXRlIGVhcmxpZXIgc28gd2VcbiAgICAvLyBjYW4gZGlzY292ZXIgbmV3IHJvdXRlcyBkdXJpbmcgdGhlIGBsb2FkaW5nYCBzdGF0ZS4gIFdlIHNraXAgdGhpcyBpZlxuICAgIC8vIHdlJ3ZlIGFscmVhZHkgcnVuIGFjdGlvbnMgc2luY2Ugd2Ugd291bGQgaGF2ZSBkb25lIG91ciBtYXRjaGluZyBhbHJlYWR5LlxuICAgIC8vIElmIHRoZSBjaGlsZHJlbigpIGZ1bmN0aW9uIHRocmV3IHRoZW4sIHdlIHdhbnQgdG8gcHJvY2VlZCB3aXRoIHRoZVxuICAgIC8vIHBhcnRpYWwgbWF0Y2hlcyBpdCBkaXNjb3ZlcmVkLlxuICAgIGlmIChpc0ZvZ09mV2FyKSB7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlTmF2aWdhdGlvblN0YXRlKSB7XG4gICAgICAgIGxldCBhY3Rpb25EYXRhID0gZ2V0VXBkYXRlZEFjdGlvbkRhdGEocGVuZGluZ0FjdGlvblJlc3VsdCk7XG4gICAgICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHtcbiAgICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvblxuICAgICAgICB9LCBhY3Rpb25EYXRhICE9PSB1bmRlZmluZWQgPyB7XG4gICAgICAgICAgYWN0aW9uRGF0YVxuICAgICAgICB9IDoge30pLCB7XG4gICAgICAgICAgZmx1c2hTeW5jXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbGV0IGRpc2NvdmVyUmVzdWx0ID0gYXdhaXQgZGlzY292ZXJSb3V0ZXMobWF0Y2hlcywgbG9jYXRpb24ucGF0aG5hbWUsIHJlcXVlc3Quc2lnbmFsKTtcbiAgICAgIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGRpc2NvdmVyUmVzdWx0LnR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICBsZXQgYm91bmRhcnlJZCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoZGlzY292ZXJSZXN1bHQucGFydGlhbE1hdGNoZXMpLnJvdXRlLmlkO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1hdGNoZXM6IGRpc2NvdmVyUmVzdWx0LnBhcnRpYWxNYXRjaGVzLFxuICAgICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAgIGVycm9yczoge1xuICAgICAgICAgICAgW2JvdW5kYXJ5SWRdOiBkaXNjb3ZlclJlc3VsdC5lcnJvclxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoIWRpc2NvdmVyUmVzdWx0Lm1hdGNoZXMpIHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgICBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgICAgcm91dGVcbiAgICAgICAgfSA9IGhhbmRsZU5hdmlnYXRpb25hbDQwNChsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAgIGVycm9yczoge1xuICAgICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXRjaGVzID0gZGlzY292ZXJSZXN1bHQubWF0Y2hlcztcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIGFjdGl2ZVN1Ym1pc3Npb24sIGxvY2F0aW9uLCBmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiAmJiBpbml0aWFsSHlkcmF0aW9uID09PSB0cnVlLCBmdXR1cmUudjdfc2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBkZWxldGVkRmV0Y2hlcnMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwgcGVuZGluZ0FjdGlvblJlc3VsdCk7XG4gICAgLy8gQ2FuY2VsIHBlbmRpbmcgZGVmZXJyZWRzIGZvciBuby1sb25nZXItbWF0Y2hlZCByb3V0ZXMgb3Igcm91dGVzIHdlJ3JlXG4gICAgLy8gYWJvdXQgdG8gcmVsb2FkLiAgTm90ZSB0aGF0IGlmIHRoaXMgaXMgYW4gYWN0aW9uIHJlbG9hZCB3ZSB3b3VsZCBoYXZlXG4gICAgLy8gYWxyZWFkeSBjYW5jZWxsZWQgYWxsIHBlbmRpbmcgZGVmZXJyZWRzIHNvIHRoaXMgd291bGQgYmUgYSBuby1vcFxuICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhyb3V0ZUlkID0+ICEobWF0Y2hlcyAmJiBtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSkgfHwgbWF0Y2hlc1RvTG9hZCAmJiBtYXRjaGVzVG9Mb2FkLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW5cbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDAgJiYgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAvLyBDb21taXQgcGVuZGluZyBlcnJvciBpZiB3ZSdyZSBzaG9ydCBjaXJjdWl0aW5nXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvblJlc3VsdCAmJiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8ge1xuICAgICAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5lcnJvclxuICAgICAgICB9IDogbnVsbFxuICAgICAgfSwgZ2V0QWN0aW9uRGF0YUZvckNvbW1pdChwZW5kaW5nQWN0aW9uUmVzdWx0KSwgdXBkYXRlZEZldGNoZXJzID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSksIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoc2hvdWxkVXBkYXRlTmF2aWdhdGlvblN0YXRlKSB7XG4gICAgICBsZXQgdXBkYXRlcyA9IHt9O1xuICAgICAgaWYgKCFpc0ZvZ09mV2FyKSB7XG4gICAgICAgIC8vIE9ubHkgdXBkYXRlIG5hdmlnYXRpb24vYWN0aW9uTkRhdGEgaWYgd2UgZGlkbid0IGFscmVhZHkgZG8gaXQgYWJvdmVcbiAgICAgICAgdXBkYXRlcy5uYXZpZ2F0aW9uID0gbG9hZGluZ05hdmlnYXRpb247XG4gICAgICAgIGxldCBhY3Rpb25EYXRhID0gZ2V0VXBkYXRlZEFjdGlvbkRhdGEocGVuZGluZ0FjdGlvblJlc3VsdCk7XG4gICAgICAgIGlmIChhY3Rpb25EYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cGRhdGVzLmFjdGlvbkRhdGEgPSBhY3Rpb25EYXRhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICB1cGRhdGVzLmZldGNoZXJzID0gZ2V0VXBkYXRlZFJldmFsaWRhdGluZ0ZldGNoZXJzKHJldmFsaWRhdGluZ0ZldGNoZXJzKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZVN0YXRlKHVwZGF0ZXMsIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiB7XG4gICAgICBhYm9ydEZldGNoZXIocmYua2V5KTtcbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIC8vIEZldGNoZXJzIHVzZSBhbiBpbmRlcGVuZGVudCBBYm9ydENvbnRyb2xsZXIgc28gdGhhdCBhYm9ydGluZyBhIGZldGNoZXJcbiAgICAgICAgLy8gKHZpYSBkZWxldGVGZXRjaGVyKSBkb2VzIG5vdCBhYm9ydCB0aGUgdHJpZ2dlcmluZyBuYXZpZ2F0aW9uIHRoYXRcbiAgICAgICAgLy8gdHJpZ2dlcmVkIHRoZSByZXZhbGlkYXRpb25cbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQocmYua2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBQcm94eSBuYXZpZ2F0aW9uIGFib3J0IHRocm91Z2ggdG8gcmV2YWxpZGF0aW9uIGZldGNoZXJzXG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+IHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goZiA9PiBhYm9ydEZldGNoZXIoZi5rZXkpKTtcbiAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSB7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfSA9IGF3YWl0IGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJlcXVlc3QpO1xuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ2xlYW4gdXAgX2FmdGVyXyBsb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWYgd2Ugc2hvcnRcbiAgICAvLyBjaXJjdWl0ZWQgYmVjYXVzZSBmZXRjaENvbnRyb2xsZXJzIHdvdWxkIGhhdmUgYmVlbiBhYm9ydGVkIGFuZFxuICAgIC8vIHJlYXNzaWduZWQgdG8gbmV3IGNvbnRyb2xsZXJzIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG4gICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikge1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyZi5rZXkpKTtcbiAgICAvLyBJZiBhbnkgbG9hZGVycyByZXR1cm5lZCBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QobG9hZGVyUmVzdWx0cyk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihyZXF1ZXN0LCByZWRpcmVjdC5yZXN1bHQsIHRydWUsIHtcbiAgICAgICAgcmVwbGFjZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QoZmV0Y2hlclJlc3VsdHMpO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgLy8gSWYgdGhpcyByZWRpcmVjdCBjYW1lIGZyb20gYSBmZXRjaGVyIG1ha2Ugc3VyZSB3ZSBtYXJrIGl0IGluXG4gICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgLy8gbG9hZGVyIGV4ZWN1dGlvbnNcbiAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKHJlZGlyZWN0LmtleSk7XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihyZXF1ZXN0LCByZWRpcmVjdC5yZXN1bHQsIHRydWUsIHtcbiAgICAgICAgcmVwbGFjZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbG9hZGVyUmVzdWx0cywgcGVuZGluZ0FjdGlvblJlc3VsdCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAgIC8vIFdpcmUgdXAgc3Vic2NyaWJlcnMgdG8gdXBkYXRlIGxvYWRlckRhdGEgYXMgcHJvbWlzZXMgc2V0dGxlXG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRlZmVycmVkRGF0YSwgcm91dGVJZCkgPT4ge1xuICAgICAgZGVmZXJyZWREYXRhLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgLy8gTm90ZTogTm8gbmVlZCB0byB1cGRhdGVTdGF0ZSBoZXJlIHNpbmNlIHRoZSBUcmFja2VkUHJvbWlzZSBvblxuICAgICAgICAvLyBsb2FkZXJEYXRhIGlzIHN0YWJsZSBhY3Jvc3MgcmVzb2x2ZS9yZWplY3RcbiAgICAgICAgLy8gUmVtb3ZlIHRoaXMgaW5zdGFuY2UgaWYgd2Ugd2VyZSBhYm9ydGVkIG9yIGlmIHByb21pc2VzIGhhdmUgc2V0dGxlZFxuICAgICAgICBpZiAoYWJvcnRlZCB8fCBkZWZlcnJlZERhdGEuZG9uZSkge1xuICAgICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIC8vIFByZXNlcnZlIFNTUiBlcnJvcnMgZHVyaW5nIHBhcnRpYWwgaHlkcmF0aW9uXG4gICAgaWYgKGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uICYmIGluaXRpYWxIeWRyYXRpb24gJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgICBlcnJvcnMgPSBfZXh0ZW5kcyh7fSwgc3RhdGUuZXJyb3JzLCBlcnJvcnMpO1xuICAgIH1cbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgbGV0IHNob3VsZFVwZGF0ZUZldGNoZXJzID0gdXBkYXRlZEZldGNoZXJzIHx8IGRpZEFib3J0RmV0Y2hMb2FkcyB8fCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBtYXRjaGVzLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0sIHNob3VsZFVwZGF0ZUZldGNoZXJzID8ge1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSA6IHt9KTtcbiAgfVxuICBmdW5jdGlvbiBnZXRVcGRhdGVkQWN0aW9uRGF0YShwZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gICAgaWYgKHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgIWlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkpIHtcbiAgICAgIC8vIFRoaXMgaXMgY2FzdCB0byBgYW55YCBjdXJyZW50bHkgYmVjYXVzZSBgUm91dGVEYXRhYHVzZXMgYW55IGFuZCBpdFxuICAgICAgLy8gd291bGQgYmUgYSBicmVha2luZyBjaGFuZ2UgdG8gdXNlIGFueS5cbiAgICAgIC8vIFRPRE86IHY3IC0gY2hhbmdlIGBSb3V0ZURhdGFgIHRvIHVzZSBgdW5rbm93bmAgaW5zdGVhZCBvZiBgYW55YFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW3BlbmRpbmdBY3Rpb25SZXN1bHRbMF1dOiBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmRhdGFcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5hY3Rpb25EYXRhKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMoc3RhdGUuYWN0aW9uRGF0YSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldFVwZGF0ZWRSZXZhbGlkYXRpbmdGZXRjaGVycyhyZXZhbGlkYXRpbmdGZXRjaGVycykge1xuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4ge1xuICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIodW5kZWZpbmVkLCBmZXRjaGVyID8gZmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChyZi5rZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKTtcbiAgfVxuICAvLyBUcmlnZ2VyIGEgZmV0Y2hlciBsb2FkL3N1Ym1pdCBmb3IgdGhlIGdpdmVuIGZldGNoZXIga2V5XG4gIGZ1bmN0aW9uIGZldGNoKGtleSwgcm91dGVJZCwgaHJlZiwgb3B0cykge1xuICAgIGlmIChpc1NlcnZlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicm91dGVyLmZldGNoKCkgd2FzIGNhbGxlZCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIsIGJ1dCBpdCBzaG91bGRuJ3QgYmUuIFwiICsgXCJZb3UgYXJlIGxpa2VseSBjYWxsaW5nIGEgdXNlRmV0Y2hlcigpIG1ldGhvZCBpbiB0aGUgYm9keSBvZiB5b3VyIGNvbXBvbmVudC4gXCIgKyBcIlRyeSBtb3ZpbmcgaXQgdG8gYSB1c2VFZmZlY3Qgb3IgYSBjYWxsYmFjay5cIik7XG4gICAgfVxuICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWU7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcHJlcGVuZEJhc2VuYW1lLCBocmVmLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgsIHJvdXRlSWQsIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucmVsYXRpdmUpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIG5vcm1hbGl6ZWRQYXRoLCBiYXNlbmFtZSk7XG4gICAgbGV0IGZvZ09mV2FyID0gY2hlY2tGb2dPZldhcihtYXRjaGVzLCByb3V0ZXNUb1VzZSwgbm9ybWFsaXplZFBhdGgpO1xuICAgIGlmIChmb2dPZldhci5hY3RpdmUgJiYgZm9nT2ZXYXIubWF0Y2hlcykge1xuICAgICAgbWF0Y2hlcyA9IGZvZ09mV2FyLm1hdGNoZXM7XG4gICAgfVxuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IG5vcm1hbGl6ZWRQYXRoXG4gICAgICB9KSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIHRydWUsIG5vcm1hbGl6ZWRQYXRoLCBvcHRzKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBtYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIHBhdGgpO1xuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG4gICAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIGZvZ09mV2FyLmFjdGl2ZSwgZmx1c2hTeW5jLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHN1Ym1pc3Npb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBTdG9yZSBvZmYgdGhlIG1hdGNoIHNvIHdlIGNhbiBjYWxsIGl0J3Mgc2hvdWxkUmV2YWxpZGF0ZSBvbiBzdWJzZXF1ZW50XG4gICAgLy8gcmV2YWxpZGF0aW9uc1xuICAgIGZldGNoTG9hZE1hdGNoZXMuc2V0KGtleSwge1xuICAgICAgcm91dGVJZCxcbiAgICAgIHBhdGhcbiAgICB9KTtcbiAgICBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIGZvZ09mV2FyLmFjdGl2ZSwgZmx1c2hTeW5jLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHN1Ym1pc3Npb24pO1xuICB9XG4gIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIG1hdGNoZWQgZmV0Y2hlci5zdWJtaXQoKSwgYW5kIHRoZW4gaGFuZGxlIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBhbmQgcmV2YWxpZGF0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIGlzRm9nT2ZXYXIsIGZsdXNoU3luYywgcHJldmVudFNjcm9sbFJlc2V0LCBzdWJtaXNzaW9uKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGZ1bmN0aW9uIGRldGVjdEFuZEhhbmRsZTQwNUVycm9yKG0pIHtcbiAgICAgIGlmICghbS5yb3V0ZS5hY3Rpb24gJiYgIW0ucm91dGUubGF6eSkge1xuICAgICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgIG1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICAgIHJvdXRlSWQ6IHJvdXRlSWRcbiAgICAgICAgfSk7XG4gICAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCB7XG4gICAgICAgICAgZmx1c2hTeW5jXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFpc0ZvZ09mV2FyICYmIGRldGVjdEFuZEhhbmRsZTQwNUVycm9yKG1hdGNoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBzdWJtaXR0aW5nIHN0YXRlXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlciksIHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgaWYgKGlzRm9nT2ZXYXIpIHtcbiAgICAgIGxldCBkaXNjb3ZlclJlc3VsdCA9IGF3YWl0IGRpc2NvdmVyUm91dGVzKHJlcXVlc3RNYXRjaGVzLCBwYXRoLCBmZXRjaFJlcXVlc3Quc2lnbmFsKTtcbiAgICAgIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGRpc2NvdmVyUmVzdWx0LnR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBkaXNjb3ZlclJlc3VsdC5lcnJvciwge1xuICAgICAgICAgIGZsdXNoU3luY1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICghZGlzY292ZXJSZXN1bHQubWF0Y2hlcykge1xuICAgICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICAgIHBhdGhuYW1lOiBwYXRoXG4gICAgICAgIH0pLCB7XG4gICAgICAgICAgZmx1c2hTeW5jXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXF1ZXN0TWF0Y2hlcyA9IGRpc2NvdmVyUmVzdWx0Lm1hdGNoZXM7XG4gICAgICAgIG1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gocmVxdWVzdE1hdGNoZXMsIHBhdGgpO1xuICAgICAgICBpZiAoZGV0ZWN0QW5kSGFuZGxlNDA1RXJyb3IobWF0Y2gpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXJcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgbGV0IG9yaWdpbmF0aW5nTG9hZElkID0gaW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGxldCBhY3Rpb25SZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcImFjdGlvblwiLCBzdGF0ZSwgZmV0Y2hSZXF1ZXN0LCBbbWF0Y2hdLCByZXF1ZXN0TWF0Y2hlcywga2V5KTtcbiAgICBsZXQgYWN0aW9uUmVzdWx0ID0gYWN0aW9uUmVzdWx0c1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91ciBvd24gZmV0Y2hlclxuICAgICAgLy8gcmUtc3VibWl0IHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBXaGVuIHVzaW5nIHY3X2ZldGNoZXJQZXJzaXN0LCB3ZSBkb24ndCB3YW50IGVycm9ycyBidWJibGluZyB1cCB0byB0aGUgVUlcbiAgICAvLyBvciByZWRpcmVjdHMgcHJvY2Vzc2VkIGZvciB1bm1vdW50ZWQgZmV0Y2hlcnMgc28gd2UganVzdCByZXZlcnQgdGhlbSB0b1xuICAgIC8vIGlkbGVcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0ICYmIGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQoYWN0aW9uUmVzdWx0KSB8fCBpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIExldCBTdWNjZXNzUmVzdWx0J3MgZmFsbCB0aHJvdWdoIGZvciByZXZhbGlkYXRpb25cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPiBvcmlnaW5hdGluZ0xvYWRJZCkge1xuICAgICAgICAgIC8vIEEgbmV3IG5hdmlnYXRpb24gd2FzIGtpY2tlZCBvZmYgYWZ0ZXIgb3VyIGFjdGlvbiBzdGFydGVkLCBzbyB0aGF0XG4gICAgICAgICAgLy8gc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoaXMgcmVkaXJlY3QgbmF2aWdhdGlvbi4gIFdlIGFscmVhZHlcbiAgICAgICAgICAvLyBzZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCBzbyBhbGwgbG9hZGVycyBmb3IgdGhlIG5ldyByb3V0ZSBzaG91bGRcbiAgICAgICAgICAvLyBmaXJlIHVubGVzcyBvcHRlZCBvdXQgdmlhIHNob3VsZFJldmFsaWRhdGVcbiAgICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcbiAgICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uKSk7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKGZldGNoUmVxdWVzdCwgYWN0aW9uUmVzdWx0LCBmYWxzZSwge1xuICAgICAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb246IHN1Ym1pc3Npb24sXG4gICAgICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgYWN0aW9uUmVzdWx0LmVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gU3RhcnQgdGhlIGRhdGEgbG9hZCBmb3IgY3VycmVudCBtYXRjaGVzLCBvciB0aGUgbmV4dCBsb2NhdGlvbiBpZiB3ZSdyZVxuICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgYSBuYXZpZ2F0aW9uXG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gfHwgc3RhdGUubG9jYXRpb247XG4gICAgbGV0IHJldmFsaWRhdGlvblJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIG5leHRMb2NhdGlvbiwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG1hdGNoZXMgPSBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlICE9PSBcImlkbGVcIiA/IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCBiYXNlbmFtZSkgOiBzdGF0ZS5tYXRjaGVzO1xuICAgIGludmFyaWFudChtYXRjaGVzLCBcIkRpZG4ndCBmaW5kIGFueSBtYXRjaGVzIGFmdGVyIGZldGNoZXIgYWN0aW9uXCIpO1xuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuICAgIGxldCBsb2FkRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGFjdGlvblJlc3VsdC5kYXRhKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkRmV0Y2hlcik7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIG5leHRMb2NhdGlvbiwgZmFsc2UsIGZ1dHVyZS52N19za2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBbbWF0Y2gucm91dGUuaWQsIGFjdGlvblJlc3VsdF0pO1xuICAgIC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZmlsdGVyKHJmID0+IHJmLmtleSAhPT0ga2V5KS5mb3JFYWNoKHJmID0+IHtcbiAgICAgIGxldCBzdGFsZUtleSA9IHJmLmtleTtcbiAgICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoc3RhbGVLZXkpO1xuICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBhYm9ydEZldGNoZXIoc3RhbGVLZXkpO1xuICAgICAgaWYgKHJmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQoc3RhbGVLZXksIHJmLmNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pO1xuICAgIGxldCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMgPSAoKSA9PiByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGFib3J0RmV0Y2hlcihyZi5rZXkpKTtcbiAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgcmV2YWxpZGF0aW9uUmVxdWVzdCk7XG4gICAgaWYgKGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHIua2V5KSk7XG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KGxvYWRlclJlc3VsdHMpO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJldmFsaWRhdGlvblJlcXVlc3QsIHJlZGlyZWN0LnJlc3VsdCwgZmFsc2UsIHtcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QoZmV0Y2hlclJlc3VsdHMpO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgLy8gSWYgdGhpcyByZWRpcmVjdCBjYW1lIGZyb20gYSBmZXRjaGVyIG1ha2Ugc3VyZSB3ZSBtYXJrIGl0IGluXG4gICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgLy8gbG9hZGVyIGV4ZWN1dGlvbnNcbiAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKHJlZGlyZWN0LmtleSk7XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmV2YWxpZGF0aW9uUmVxdWVzdCwgcmVkaXJlY3QucmVzdWx0LCBmYWxzZSwge1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBTaW5jZSB3ZSBsZXQgcmV2YWxpZGF0aW9ucyBjb21wbGV0ZSBldmVuIGlmIHRoZSBzdWJtaXR0aW5nIGZldGNoZXIgd2FzXG4gICAgLy8gZGVsZXRlZCwgb25seSBwdXQgaXQgYmFjayB0byBpZGxlIGlmIGl0IGhhc24ndCBiZWVuIGRlbGV0ZWRcbiAgICBpZiAoc3RhdGUuZmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKGFjdGlvblJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gICAgYWJvcnRTdGFsZUZldGNoTG9hZHMobG9hZElkKTtcbiAgICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGluIGEgbmF2aWdhdGlvbiBsb2FkaW5nIHN0YXRlIGFuZCB0aGlzIGZldGNoZXIgaXNcbiAgICAvLyBtb3JlIHJlY2VudCB0aGFuIHRoZSBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRoZSBuZXdlciBkYXRhIHNvIGFib3J0IHRoZVxuICAgIC8vIG5hdmlnYXRpb24gYW5kIGNvbXBsZXRlIGl0IHdpdGggdGhlIGZldGNoZXIgZGF0YVxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCkge1xuICAgICAgaW52YXJpYW50KHBlbmRpbmdBY3Rpb24sIFwiRXhwZWN0ZWQgcGVuZGluZyBhY3Rpb25cIik7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVwZGF0ZSB3aXRoIHRoZSBmZXRjaGVyIGRhdGEsIHByZXNlcnZpbmcgYW55IGV4aXN0aW5nXG4gICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG9cbiAgICAgIC8vIG1hbnVhbGx5IG1lcmdlIGhlcmUgc2luY2Ugd2UgYXJlbid0IGdvaW5nIHRocm91Z2ggY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIGxvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycyksXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIENhbGwgdGhlIG1hdGNoZWQgbG9hZGVyIGZvciBmZXRjaGVyLmxvYWQoKSwgaGFuZGxpbmcgcmVkaXJlY3RzLCBlcnJvcnMsIGV0Yy5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBpc0ZvZ09mV2FyLCBmbHVzaFN5bmMsIHByZXZlbnRTY3JvbGxSZXNldCwgc3VibWlzc2lvbikge1xuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCksIHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgaWYgKGlzRm9nT2ZXYXIpIHtcbiAgICAgIGxldCBkaXNjb3ZlclJlc3VsdCA9IGF3YWl0IGRpc2NvdmVyUm91dGVzKG1hdGNoZXMsIHBhdGgsIGZldGNoUmVxdWVzdC5zaWduYWwpO1xuICAgICAgaWYgKGRpc2NvdmVyUmVzdWx0LnR5cGUgPT09IFwiYWJvcnRlZFwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoZGlzY292ZXJSZXN1bHQudHlwZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGRpc2NvdmVyUmVzdWx0LmVycm9yLCB7XG4gICAgICAgICAgZmx1c2hTeW5jXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKCFkaXNjb3ZlclJlc3VsdC5tYXRjaGVzKSB7XG4gICAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgICAgcGF0aG5hbWU6IHBhdGhcbiAgICAgICAgfSksIHtcbiAgICAgICAgICBmbHVzaFN5bmNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hdGNoZXMgPSBkaXNjb3ZlclJlc3VsdC5tYXRjaGVzO1xuICAgICAgICBtYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIHBhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBDYWxsIHRoZSBsb2FkZXIgZm9yIHRoaXMgZmV0Y2hlciByb3V0ZSBtYXRjaFxuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgb3JpZ2luYXRpbmdMb2FkSWQgPSBpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFwibG9hZGVyXCIsIHN0YXRlLCBmZXRjaFJlcXVlc3QsIFttYXRjaF0sIG1hdGNoZXMsIGtleSk7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbbWF0Y2gucm91dGUuaWRdO1xuICAgIC8vIERlZmVycmVkIGlzbid0IHN1cHBvcnRlZCBmb3IgZmV0Y2hlciBsb2FkcywgYXdhaXQgZXZlcnl0aGluZyBhbmQgdHJlYXQgaXRcbiAgICAvLyBhcyBhIG5vcm1hbCBsb2FkLiAgcmVzb2x2ZURlZmVycmVkRGF0YSB3aWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhpc1xuICAgIC8vIGZldGNoZXIgZ2V0cyBhYm9ydGVkLCBzbyB3ZSBqdXN0IGxlYXZlIHJlc3VsdCB1bnRvdWNoZWQgYW5kIHNob3J0IGNpcmN1aXRcbiAgICAvLyBiZWxvdyBpZiB0aGF0IGhhcHBlbnNcbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXN1bHQgPSAoYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIGZldGNoUmVxdWVzdC5zaWduYWwsIHRydWUpKSB8fCByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdXIgb3VyIG93biBmZXRjaGVyXG4gICAgLy8gcmUtbG9hZCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIGRvbid0IHdhbnQgZXJyb3JzIGJ1YmJsaW5nIHVwIG9yIHJlZGlyZWN0cyBmb2xsb3dlZCBmb3IgdW5tb3VudGVkXG4gICAgLy8gZmV0Y2hlcnMsIHNvIHNob3J0IGNpcmN1aXQgaGVyZSBpZiBpdCB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBVSVxuICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgbG9hZGVyIHRocmV3IGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA+IG9yaWdpbmF0aW5nTG9hZElkKSB7XG4gICAgICAgIC8vIEEgbmV3IG5hdmlnYXRpb24gd2FzIGtpY2tlZCBvZmYgYWZ0ZXIgb3VyIGxvYWRlciBzdGFydGVkLCBzbyB0aGF0XG4gICAgICAgIC8vIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGlzIHJlZGlyZWN0IG5hdmlnYXRpb25cbiAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKGZldGNoUmVxdWVzdCwgcmVzdWx0LCBmYWxzZSwge1xuICAgICAgICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIHJlc3VsdC5lcnJvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudCghaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgLy8gUHV0IHRoZSBmZXRjaGVyIGJhY2sgaW50byBhbiBpZGxlIHN0YXRlXG4gICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIocmVzdWx0LmRhdGEpKTtcbiAgfVxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBoYW5kbGUgcmVkaXJlY3RzIHJldHVybmVkIGZyb20gYW4gYWN0aW9uIG9yIGxvYWRlci5cbiAgICogTm9ybWFsbHksIGEgcmVkaXJlY3QgXCJyZXBsYWNlc1wiIHRoZSBuYXZpZ2F0aW9uIHRoYXQgdHJpZ2dlcmVkIGl0LiAgU28sIGZvclxuICAgKiBleGFtcGxlOlxuICAgKlxuICAgKiAgLSB1c2VyIGlzIG9uIC9hXG4gICAqICAtIHVzZXIgY2xpY2tzIGEgbGluayB0byAvYlxuICAgKiAgLSBsb2FkZXIgZm9yIC9iIHJlZGlyZWN0cyB0byAvY1xuICAgKlxuICAgKiBJbiBhIG5vbi1KUyBhcHAgdGhlIGJyb3dzZXIgd291bGQgdHJhY2sgdGhlIGluLWZsaWdodCBuYXZpZ2F0aW9uIHRvIC9iIGFuZFxuICAgKiB0aGVuIHJlcGxhY2UgaXQgd2l0aCAvYyB3aGVuIGl0IGVuY291bnRlcmVkIHRoZSByZWRpcmVjdCByZXNwb25zZS4gIEluXG4gICAqIHRoZSBlbmQgaXQgd291bGQgb25seSBldmVyIHVwZGF0ZSB0aGUgVVJMIGJhciB3aXRoIC9jLlxuICAgKlxuICAgKiBJbiBjbGllbnQtc2lkZSByb3V0aW5nIHVzaW5nIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUsIHdlIGFpbSB0byBlbXVsYXRlXG4gICAqIHRoaXMgYmVoYXZpb3IgYW5kIHdlIGFsc28gZG8gbm90IHVwZGF0ZSBoaXN0b3J5IHVudGlsIHRoZSBlbmQgb2YgdGhlXG4gICAqIG5hdmlnYXRpb24gKGluY2x1ZGluZyBwcm9jZXNzZWQgcmVkaXJlY3RzKS4gIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZXZlclxuICAgKiBhY3R1YWxseSB0b3VjaCBoaXN0b3J5IHVudGlsIHdlJ3ZlIHByb2Nlc3NlZCByZWRpcmVjdHMsIHNvIHdlIGp1c3QgdXNlXG4gICAqIHRoZSBoaXN0b3J5IGFjdGlvbiBmcm9tIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uIChQVVNIIG9yIFJFUExBQ0UpLlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVxdWVzdCwgcmVkaXJlY3QsIGlzTmF2aWdhdGlvbiwgX3RlbXAyKSB7XG4gICAgbGV0IHtcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBmZXRjaGVyU3VibWlzc2lvbixcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHJlcGxhY2VcbiAgICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgICBpZiAocmVkaXJlY3QucmVzcG9uc2UuaGVhZGVycy5oYXMoXCJYLVJlbWl4LVJldmFsaWRhdGVcIikpIHtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgICBsZXQgbG9jYXRpb24gPSByZWRpcmVjdC5yZXNwb25zZS5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICAgIGludmFyaWFudChsb2NhdGlvbiwgXCJFeHBlY3RlZCBhIExvY2F0aW9uIGhlYWRlciBvbiB0aGUgcmVkaXJlY3QgUmVzcG9uc2VcIik7XG4gICAgbG9jYXRpb24gPSBub3JtYWxpemVSZWRpcmVjdExvY2F0aW9uKGxvY2F0aW9uLCBuZXcgVVJMKHJlcXVlc3QudXJsKSwgYmFzZW5hbWUpO1xuICAgIGxldCByZWRpcmVjdExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIGxvY2F0aW9uLCB7XG4gICAgICBfaXNSZWRpcmVjdDogdHJ1ZVxuICAgIH0pO1xuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIGxldCBpc0RvY3VtZW50UmVsb2FkID0gZmFsc2U7XG4gICAgICBpZiAocmVkaXJlY3QucmVzcG9uc2UuaGVhZGVycy5oYXMoXCJYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFwiKSkge1xuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbmVkIFgtUmVtaXgtUmVsb2FkLURvY3VtZW50XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChBQlNPTFVURV9VUkxfUkVHRVgudGVzdChsb2NhdGlvbikpIHtcbiAgICAgICAgY29uc3QgdXJsID0gaW5pdC5oaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPVxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0byBhIG5ldyBvcmlnaW5cbiAgICAgICAgdXJsLm9yaWdpbiAhPT0gcm91dGVyV2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fFxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0aGF0IGRvZXMgbm90IG1hdGNoIG91ciBiYXNlbmFtZVxuICAgICAgICBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpID09IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoaXNEb2N1bWVudFJlbG9hZCkge1xuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlcldpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXJXaW5kb3cubG9jYXRpb24uYXNzaWduKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBhYm9ydCBvbiByZWRpcmVjdHMsIHNpbmNlIHdlIGRvbid0IGRldGVjdCB0aGVcbiAgICAvLyByZWRpcmVjdCB1bnRpbCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBzZXR0bGVkXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBsZXQgcmVkaXJlY3RIaXN0b3J5QWN0aW9uID0gcmVwbGFjZSA9PT0gdHJ1ZSB8fCByZWRpcmVjdC5yZXNwb25zZS5oZWFkZXJzLmhhcyhcIlgtUmVtaXgtUmVwbGFjZVwiKSA/IEFjdGlvbi5SZXBsYWNlIDogQWN0aW9uLlB1c2g7XG4gICAgLy8gVXNlIHRoZSBpbmNvbWluZyBzdWJtaXNzaW9uIGlmIHByb3ZpZGVkLCBmYWxsYmFjayBvbiB0aGUgYWN0aXZlIG9uZSBpblxuICAgIC8vIHN0YXRlLm5hdmlnYXRpb25cbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZVxuICAgIH0gPSBzdGF0ZS5uYXZpZ2F0aW9uO1xuICAgIGlmICghc3VibWlzc2lvbiAmJiAhZmV0Y2hlclN1Ym1pc3Npb24gJiYgZm9ybU1ldGhvZCAmJiBmb3JtQWN0aW9uICYmIGZvcm1FbmNUeXBlKSB7XG4gICAgICBzdWJtaXNzaW9uID0gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24pO1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIHdhcyBhIDMwNy8zMDggc3VibWlzc2lvbiB3ZSB3YW50IHRvIHByZXNlcnZlIHRoZSBIVFRQIG1ldGhvZCBhbmRcbiAgICAvLyByZS1zdWJtaXQgdGhlIEdFVC9QT1NUL1BVVC9QQVRDSC9ERUxFVEUgYXMgYSBzdWJtaXNzaW9uIG5hdmlnYXRpb24gdG8gdGhlXG4gICAgLy8gcmVkaXJlY3RlZCBsb2NhdGlvblxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBmZXRjaGVyU3VibWlzc2lvbjtcbiAgICBpZiAocmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzLmhhcyhyZWRpcmVjdC5yZXNwb25zZS5zdGF0dXMpICYmIGFjdGl2ZVN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChhY3RpdmVTdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIHN1Ym1pc3Npb246IF9leHRlbmRzKHt9LCBhY3RpdmVTdWJtaXNzaW9uLCB7XG4gICAgICAgICAgZm9ybUFjdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSksXG4gICAgICAgIC8vIFByZXNlcnZlIHRoZXNlIGZsYWdzIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwcmV2ZW50U2Nyb2xsUmVzZXQgfHwgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgZW5hYmxlVmlld1RyYW5zaXRpb246IGlzTmF2aWdhdGlvbiA/IHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgbmF2aWdhdGlvbiBzdWJtaXNzaW9uLCB3ZSB3aWxsIHByZXNlcnZlIGl0IHRocm91Z2ggdGhlXG4gICAgICAvLyByZWRpcmVjdCBuYXZpZ2F0aW9uXG4gICAgICBsZXQgb3ZlcnJpZGVOYXZpZ2F0aW9uID0gZ2V0TG9hZGluZ05hdmlnYXRpb24ocmVkaXJlY3RMb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbixcbiAgICAgICAgLy8gU2VuZCBmZXRjaGVyIHN1Ym1pc3Npb25zIHRocm91Z2ggZm9yIHNob3VsZFJldmFsaWRhdGVcbiAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb24sXG4gICAgICAgIC8vIFByZXNlcnZlIHRoZXNlIGZsYWdzIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwcmV2ZW50U2Nyb2xsUmVzZXQgfHwgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgZW5hYmxlVmlld1RyYW5zaXRpb246IGlzTmF2aWdhdGlvbiA/IHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvLyBVdGlsaXR5IHdyYXBwZXIgZm9yIGNhbGxpbmcgZGF0YVN0cmF0ZWd5IGNsaWVudC1zaWRlIHdpdGhvdXQgaGF2aW5nIHRvXG4gIC8vIHBhc3MgYXJvdW5kIHRoZSBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxEYXRhU3RyYXRlZ3kodHlwZSwgc3RhdGUsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMsIGZldGNoZXJLZXkpIHtcbiAgICBsZXQgcmVzdWx0cztcbiAgICBsZXQgZGF0YVJlc3VsdHMgPSB7fTtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3lJbXBsKGRhdGFTdHJhdGVneUltcGwsIHR5cGUsIHN0YXRlLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzLCBmZXRjaGVyS2V5LCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgb3V0ZXIgZGF0YVN0cmF0ZWd5IG1ldGhvZCB0aHJvd3MsIGp1c3QgcmV0dXJuIHRoZSBlcnJvciBmb3IgYWxsXG4gICAgICAvLyBtYXRjaGVzIC0gYW5kIGl0J2xsIG5hdHVyYWxseSBidWJibGUgdG8gdGhlIHJvb3RcbiAgICAgIG1hdGNoZXNUb0xvYWQuZm9yRWFjaChtID0+IHtcbiAgICAgICAgZGF0YVJlc3VsdHNbbS5yb3V0ZS5pZF0gPSB7XG4gICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgICBlcnJvcjogZVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGF0YVJlc3VsdHM7XG4gICAgfVxuICAgIGZvciAobGV0IFtyb3V0ZUlkLCByZXN1bHRdIG9mIE9iamVjdC5lbnRyaWVzKHJlc3VsdHMpKSB7XG4gICAgICBpZiAoaXNSZWRpcmVjdERhdGFTdHJhdGVneVJlc3VsdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgIGRhdGFSZXN1bHRzW3JvdXRlSWRdID0ge1xuICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUucmVkaXJlY3QsXG4gICAgICAgICAgcmVzcG9uc2U6IG5vcm1hbGl6ZVJlbGF0aXZlUm91dGluZ1JlZGlyZWN0UmVzcG9uc2UocmVzcG9uc2UsIHJlcXVlc3QsIHJvdXRlSWQsIG1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhUmVzdWx0c1tyb3V0ZUlkXSA9IGF3YWl0IGNvbnZlcnREYXRhU3RyYXRlZ3lSZXN1bHRUb0RhdGFSZXN1bHQocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGFSZXN1bHRzO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgZmV0Y2hlcnNUb0xvYWQsIHJlcXVlc3QpIHtcbiAgICBsZXQgY3VycmVudE1hdGNoZXMgPSBzdGF0ZS5tYXRjaGVzO1xuICAgIC8vIEtpY2sgb2ZmIGxvYWRlcnMgYW5kIGZldGNoZXJzIGluIHBhcmFsbGVsXG4gICAgbGV0IGxvYWRlclJlc3VsdHNQcm9taXNlID0gY2FsbERhdGFTdHJhdGVneShcImxvYWRlclwiLCBzdGF0ZSwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcywgbnVsbCk7XG4gICAgbGV0IGZldGNoZXJSZXN1bHRzUHJvbWlzZSA9IFByb21pc2UuYWxsKGZldGNoZXJzVG9Mb2FkLm1hcChhc3luYyBmID0+IHtcbiAgICAgIGlmIChmLm1hdGNoZXMgJiYgZi5tYXRjaCAmJiBmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFwibG9hZGVyXCIsIHN0YXRlLCBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGYucGF0aCwgZi5jb250cm9sbGVyLnNpZ25hbCksIFtmLm1hdGNoXSwgZi5tYXRjaGVzLCBmLmtleSk7XG4gICAgICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2YubWF0Y2gucm91dGUuaWRdO1xuICAgICAgICAvLyBGZXRjaGVyIHJlc3VsdHMgYXJlIGtleWVkIGJ5IGZldGNoZXIga2V5IGZyb20gaGVyZSBvbiBvdXQsIG5vdCByb3V0ZUlkXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgW2Yua2V5XTogcmVzdWx0XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBbZi5rZXldOiB7XG4gICAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgICAgICAgIHBhdGhuYW1lOiBmLnBhdGhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgbGV0IGxvYWRlclJlc3VsdHMgPSBhd2FpdCBsb2FkZXJSZXN1bHRzUHJvbWlzZTtcbiAgICBsZXQgZmV0Y2hlclJlc3VsdHMgPSAoYXdhaXQgZmV0Y2hlclJlc3VsdHNQcm9taXNlKS5yZWR1Y2UoKGFjYywgcikgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHIpLCB7fSk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW3Jlc29sdmVOYXZpZ2F0aW9uRGVmZXJyZWRSZXN1bHRzKG1hdGNoZXMsIGxvYWRlclJlc3VsdHMsIHJlcXVlc3Quc2lnbmFsLCBjdXJyZW50TWF0Y2hlcywgc3RhdGUubG9hZGVyRGF0YSksIHJlc29sdmVGZXRjaGVyRGVmZXJyZWRSZXN1bHRzKG1hdGNoZXMsIGZldGNoZXJSZXN1bHRzLCBmZXRjaGVyc1RvTG9hZCldKTtcbiAgICByZXR1cm4ge1xuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpIHtcbiAgICAvLyBFdmVyeSBpbnRlcnJ1cHRpb24gdHJpZ2dlcnMgYSByZXZhbGlkYXRpb25cbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5wdXNoKC4uLmNhbmNlbEFjdGl2ZURlZmVycmVkcygpKTtcbiAgICAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkge1xuICAgICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMuYWRkKGtleSk7XG4gICAgICB9XG4gICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBmZXRjaGVyLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBmZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9LCB7XG4gICAgICBmbHVzaFN5bmM6IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yXG4gICAgICB9LFxuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWVcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkge1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGFjdGl2ZUZldGNoZXJzLnNldChrZXksIChhY3RpdmVGZXRjaGVycy5nZXQoa2V5KSB8fCAwKSArIDEpO1xuICAgICAgLy8gSWYgdGhpcyBmZXRjaGVyIHdhcyBwcmV2aW91c2x5IG1hcmtlZCBmb3IgZGVsZXRpb24sIHVubWFyayBpdCBzaW5jZSB3ZVxuICAgICAgLy8gaGF2ZSBhIG5ldyBpbnN0YW5jZVxuICAgICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlcihrZXkpIHtcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIC8vIERvbid0IGFib3J0IHRoZSBjb250cm9sbGVyIGlmIHRoaXMgaXMgYSBkZWxldGlvbiBvZiBhIGZldGNoZXIuc3VibWl0KClcbiAgICAvLyBpbiBpdCdzIGxvYWRpbmcgcGhhc2Ugc2luY2UgLSB3ZSBkb24ndCB3YW50IHRvIGFib3J0IHRoZSBjb3JyZXNwb25kaW5nXG4gICAgLy8gcmV2YWxpZGF0aW9uIGFuZCB3YW50IHRoZW0gdG8gY29tcGxldGUgYW5kIGxhbmRcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSAmJiAhKGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgZmV0Y2hSZWxvYWRJZHMuaGFzKGtleSkpKSB7XG4gICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgIGRlbGV0ZWRGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlckFuZFVwZGF0ZVN0YXRlKGtleSkge1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGxldCBjb3VudCA9IChhY3RpdmVGZXRjaGVycy5nZXQoa2V5KSB8fCAwKSAtIDE7XG4gICAgICBpZiAoY291bnQgPD0gMCkge1xuICAgICAgICBhY3RpdmVGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICAgICAgZGVsZXRlZEZldGNoZXJzLmFkZChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlRmV0Y2hlcnMuc2V0KGtleSwgY291bnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVGZXRjaGVyKGtleSk7XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFib3J0RmV0Y2hlcihrZXkpIHtcbiAgICBsZXQgY29udHJvbGxlciA9IGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSk7XG4gICAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1hcmtGZXRjaGVyc0RvbmUoa2V5cykge1xuICAgIGZvciAobGV0IGtleSBvZiBrZXlzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IGdldEZldGNoZXIoa2V5KTtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKGZldGNoZXIuZGF0YSk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKSB7XG4gICAgbGV0IGRvbmVLZXlzID0gW107XG4gICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IGZhbHNlO1xuICAgIGZvciAobGV0IGtleSBvZiBmZXRjaFJlZGlyZWN0SWRzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgIGRvbmVLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgdXBkYXRlZEZldGNoZXJzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWFya0ZldGNoZXJzRG9uZShkb25lS2V5cyk7XG4gICAgcmV0dXJuIHVwZGF0ZWRGZXRjaGVycztcbiAgfVxuICBmdW5jdGlvbiBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhsYW5kZWRJZCkge1xuICAgIGxldCB5ZWV0ZWRLZXlzID0gW107XG4gICAgZm9yIChsZXQgW2tleSwgaWRdIG9mIGZldGNoUmVsb2FkSWRzKSB7XG4gICAgICBpZiAoaWQgPCBsYW5kZWRJZCkge1xuICAgICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIHllZXRlZEtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG1hcmtGZXRjaGVyc0RvbmUoeWVldGVkS2V5cyk7XG4gICAgcmV0dXJuIHllZXRlZEtleXMubGVuZ3RoID4gMDtcbiAgfVxuICBmdW5jdGlvbiBnZXRCbG9ja2VyKGtleSwgZm4pIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5nZXQoa2V5KSAhPT0gZm4pIHtcbiAgICAgIGJsb2NrZXJGdW5jdGlvbnMuc2V0KGtleSwgZm4pO1xuICAgIH1cbiAgICByZXR1cm4gYmxvY2tlcjtcbiAgfVxuICBmdW5jdGlvbiBkZWxldGVCbG9ja2VyKGtleSkge1xuICAgIHN0YXRlLmJsb2NrZXJzLmRlbGV0ZShrZXkpO1xuICAgIGJsb2NrZXJGdW5jdGlvbnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgLy8gVXRpbGl0eSBmdW5jdGlvbiB0byB1cGRhdGUgYmxvY2tlcnMsIGVuc3VyaW5nIHZhbGlkIHN0YXRlIHRyYW5zaXRpb25zXG4gIGZ1bmN0aW9uIHVwZGF0ZUJsb2NrZXIoa2V5LCBuZXdCbG9ja2VyKSB7XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7XG4gICAgLy8gUG9vciBtYW5zIHN0YXRlIG1hY2hpbmUgOilcbiAgICAvLyBodHRwczovL21lcm1haWQubGl2ZS9lZGl0I3Bha286ZU5xVmtjOU93ekFNeGw4bDhubmpBWXJFdERJT0hFQklnd3ZLSlRSZUd5M19sRHBJcU8yN2s2YXdNRzBYY3JMbG56ODdud2RvbkVTb2dLWFhCdUU3OXJxNzVYWk8zLXlIZHMwUkpWdXY3MFlyUGxVckNFZTJIZnJPUlMzcnVicVpmdWh0cGc1Qzl3azV0WjRWS2NSVXE4OHE5WjhSUzAtNDhjRTFpSEprTDB1Z2JIdUZMdXM5TDZzcFp5OG5YOU1QMkNOZG9tVmFwb3NxdTNmR2F5VDhUOC1qSlF3aGVwb19VdHBnQlFhREVVb20wNGRaaEFOMWFKQkRsVUtKQnhFMWNlQjJTbWowTWxuLUlCVzVBRlUyZHdVaWt0dF8yUWFxMmRCZmFLZEV1cDg1VVY3WWQtZEtqbG5rYWJsMlB2cjBEVGtUcmVNXG4gICAgaW52YXJpYW50KGJsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiLCBcIkludmFsaWQgYmxvY2tlciBzdGF0ZSB0cmFuc2l0aW9uOiBcIiArIGJsb2NrZXIuc3RhdGUgKyBcIiAtPiBcIiArIG5ld0Jsb2NrZXIuc3RhdGUpO1xuICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgIGJsb2NrZXJzLnNldChrZXksIG5ld0Jsb2NrZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGJsb2NrZXJzXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKF9yZWYyKSB7XG4gICAgbGV0IHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9ID0gX3JlZjI7XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBXZSBvbnkgc3VwcG9ydCBhIHNpbmdsZSBhY3RpdmUgYmxvY2tlciBhdCB0aGUgbW9tZW50IHNpbmNlIHdlIGRvbid0IGhhdmVcbiAgICAvLyBhbnkgY29tcGVsbGluZyB1c2UgY2FzZXMgZm9yIG11bHRpLWJsb2NrZXIgeWV0XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA+IDEpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiQSByb3V0ZXIgb25seSBzdXBwb3J0cyBvbmUgYmxvY2tlciBhdCBhIHRpbWVcIik7XG4gICAgfVxuICAgIGxldCBlbnRyaWVzID0gQXJyYXkuZnJvbShibG9ja2VyRnVuY3Rpb25zLmVudHJpZXMoKSk7XG4gICAgbGV0IFtibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb25dID0gZW50cmllc1tlbnRyaWVzLmxlbmd0aCAtIDFdO1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpO1xuICAgIGlmIChibG9ja2VyICYmIGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiKSB7XG4gICAgICAvLyBJZiB0aGUgYmxvY2tlciBpcyBjdXJyZW50bHkgcHJvY2VlZGluZywgd2UgZG9uJ3QgbmVlZCB0byByZS1jaGVja1xuICAgICAgLy8gaXQgYW5kIGNhbiBsZXQgdGhpcyBuYXZpZ2F0aW9uIGNvbnRpbnVlXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGtub3cgd2UncmUgdW5ibG9ja2VkL2Jsb2NrZWQgc28gd2UgbmVlZCB0byBjaGVjayB0aGVcbiAgICAvLyB1c2VyLXByb3ZpZGVkIGJsb2NrZXIgZnVuY3Rpb25cbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9uKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KSkge1xuICAgICAgcmV0dXJuIGJsb2NrZXJLZXk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZU5hdmlnYXRpb25hbDQwNChwYXRobmFtZSkge1xuICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICBwYXRobmFtZVxuICAgIH0pO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgcm91dGVcbiAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhyb3V0ZXNUb1VzZSk7XG4gICAgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzXG4gICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vdEZvdW5kTWF0Y2hlczogbWF0Y2hlcyxcbiAgICAgIHJvdXRlLFxuICAgICAgZXJyb3JcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhwcmVkaWNhdGUpIHtcbiAgICBsZXQgY2FuY2VsbGVkUm91dGVJZHMgPSBbXTtcbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGZkLCByb3V0ZUlkKSA9PiB7XG4gICAgICBpZiAoIXByZWRpY2F0ZSB8fCBwcmVkaWNhdGUocm91dGVJZCkpIHtcbiAgICAgICAgLy8gQ2FuY2VsIHRoZSBkZWZlcnJlZCAtIGJ1dCBkbyBub3QgcmVtb3ZlIGZyb20gYWN0aXZlRGVmZXJyZWRzIGhlcmUgLVxuICAgICAgICAvLyB3ZSByZWx5IG9uIHRoZSBzdWJzY3JpYmVycyB0byBkbyB0aGF0IHNvIG91ciB0ZXN0cyBjYW4gYXNzZXJ0IHByb3BlclxuICAgICAgICAvLyBjbGVhbnVwIHZpYSBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHNcbiAgICAgICAgZGZkLmNhbmNlbCgpO1xuICAgICAgICBjYW5jZWxsZWRSb3V0ZUlkcy5wdXNoKHJvdXRlSWQpO1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjYW5jZWxsZWRSb3V0ZUlkcztcbiAgfVxuICAvLyBPcHQgaW4gdG8gY2FwdHVyaW5nIGFuZCByZXBvcnRpbmcgc2Nyb2xsIHBvc2l0aW9ucyBkdXJpbmcgbmF2aWdhdGlvbnMsXG4gIC8vIHVzZWQgYnkgdGhlIDxTY3JvbGxSZXN0b3JhdGlvbj4gY29tcG9uZW50XG4gIGZ1bmN0aW9uIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHBvc2l0aW9ucywgZ2V0UG9zaXRpb24sIGdldEtleSkge1xuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gcG9zaXRpb25zO1xuICAgIGdldFNjcm9sbFBvc2l0aW9uID0gZ2V0UG9zaXRpb247XG4gICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBnZXRLZXkgfHwgbnVsbDtcbiAgICAvLyBQZXJmb3JtIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbiwgc2luY2Ugd2UgbWlzcyB0aGUgYm9hdCBvblxuICAgIC8vIHRoZSBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgYmVjYXVzZSB3ZSd2ZSBub3QgeWV0IHJlbmRlcmVkIDxTY3JvbGxSZXN0b3JhdGlvbi8+XG4gICAgLy8gYW5kIHRoZXJlZm9yZSBoYXZlIG5vIHNhdmVkU2Nyb2xsUG9zaXRpb25zIGF2YWlsYWJsZVxuICAgIGlmICghaW5pdGlhbFNjcm9sbFJlc3RvcmVkICYmIHN0YXRlLm5hdmlnYXRpb24gPT09IElETEVfTkFWSUdBVElPTikge1xuICAgICAgaW5pdGlhbFNjcm9sbFJlc3RvcmVkID0gdHJ1ZTtcbiAgICAgIGxldCB5ID0gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgICBpZiAoeSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IHlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkpIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxSZXN0b3JhdGlvbktleShsb2NhdGlvbiwgbWF0Y2hlcy5tYXAobSA9PiBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaChtLCBzdGF0ZS5sb2FkZXJEYXRhKSkpO1xuICAgICAgcmV0dXJuIGtleSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgfVxuICAgIHJldHVybiBsb2NhdGlvbi5rZXk7XG4gIH1cbiAgZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zICYmIGdldFNjcm9sbFBvc2l0aW9uKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIGxldCB5ID0gc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgeSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4geTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gY2hlY2tGb2dPZldhcihtYXRjaGVzLCByb3V0ZXNUb1VzZSwgcGF0aG5hbWUpIHtcbiAgICBpZiAocGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb25JbXBsKSB7XG4gICAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgbGV0IGZvZ01hdGNoZXMgPSBtYXRjaFJvdXRlc0ltcGwocm91dGVzVG9Vc2UsIHBhdGhuYW1lLCBiYXNlbmFtZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICAgIG1hdGNoZXM6IGZvZ01hdGNoZXMgfHwgW11cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhtYXRjaGVzWzBdLnBhcmFtcykubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIElmIHdlIG1hdGNoZWQgYSBkeW5hbWljIHBhcmFtIG9yIGEgc3BsYXQsIGl0IG1pZ2h0IG9ubHkgYmUgYmVjYXVzZVxuICAgICAgICAgIC8vIHdlIGhhdmVuJ3QgeWV0IGRpc2NvdmVyZWQgb3RoZXIgcm91dGVzIHRoYXQgd291bGQgbWF0Y2ggd2l0aCBhXG4gICAgICAgICAgLy8gaGlnaGVyIHNjb3JlLiAgQ2FsbCBwYXRjaFJvdXRlc09uTmF2aWdhdGlvbiBqdXN0IHRvIGJlIHN1cmVcbiAgICAgICAgICBsZXQgcGFydGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlc0ltcGwocm91dGVzVG9Vc2UsIHBhdGhuYW1lLCBiYXNlbmFtZSwgdHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1hdGNoZXM6IHBhcnRpYWxNYXRjaGVzXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgIG1hdGNoZXM6IG51bGxcbiAgICB9O1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGRpc2NvdmVyUm91dGVzKG1hdGNoZXMsIHBhdGhuYW1lLCBzaWduYWwpIHtcbiAgICBpZiAoIXBhdGNoUm91dGVzT25OYXZpZ2F0aW9uSW1wbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gICAgICAgIG1hdGNoZXNcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCBwYXJ0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCBpc05vbkhNUiA9IGluRmxpZ2h0RGF0YVJvdXRlcyA9PSBudWxsO1xuICAgICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgICBsZXQgbG9jYWxNYW5pZmVzdCA9IG1hbmlmZXN0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgcGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb25JbXBsKHtcbiAgICAgICAgICBwYXRoOiBwYXRobmFtZSxcbiAgICAgICAgICBtYXRjaGVzOiBwYXJ0aWFsTWF0Y2hlcyxcbiAgICAgICAgICBwYXRjaDogKHJvdXRlSWQsIGNoaWxkcmVuKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHJldHVybjtcbiAgICAgICAgICAgIHBhdGNoUm91dGVzSW1wbChyb3V0ZUlkLCBjaGlsZHJlbiwgcm91dGVzVG9Vc2UsIGxvY2FsTWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgZXJyb3I6IGUsXG4gICAgICAgICAgcGFydGlhbE1hdGNoZXNcbiAgICAgICAgfTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBub3QgaW4gdGhlIG1pZGRsZSBvZiBhbiBITVIgcmV2YWxpZGF0aW9uIGFuZCB3ZSBjaGFuZ2VkIHRoZVxuICAgICAgICAvLyByb3V0ZXMsIHByb3ZpZGUgYSBuZXcgaWRlbnRpdHkgc28gd2hlbiB3ZSBgdXBkYXRlU3RhdGVgIGF0IHRoZSBlbmQgb2ZcbiAgICAgICAgLy8gdGhpcyBuYXZpZ2F0aW9uL2ZldGNoIGByb3V0ZXIucm91dGVzYCB3aWxsIGJlIGEgbmV3IGlkZW50aXR5IGFuZFxuICAgICAgICAvLyB0cmlnZ2VyIGEgcmUtcnVuIG9mIG1lbW9pemVkIGByb3V0ZXIucm91dGVzYCBkZXBlbmRlbmNpZXMuXG4gICAgICAgIC8vIEhNUiB3aWxsIGFscmVhZHkgdXBkYXRlIHRoZSBpZGVudGl0eSBhbmQgcmVmbG93IHdoZW4gaXQgbGFuZHNcbiAgICAgICAgLy8gYGluRmxpZ2h0RGF0YVJvdXRlc2AgaW4gYGNvbXBsZXRlTmF2aWdhdGlvbmBcbiAgICAgICAgaWYgKGlzTm9uSE1SICYmICFzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICAgIGRhdGFSb3V0ZXMgPSBbLi4uZGF0YVJvdXRlc107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwiYWJvcnRlZFwiXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBsZXQgbmV3TWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBwYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgICAgaWYgKG5ld01hdGNoZXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICBtYXRjaGVzOiBuZXdNYXRjaGVzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBsZXQgbmV3UGFydGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlc0ltcGwocm91dGVzVG9Vc2UsIHBhdGhuYW1lLCBiYXNlbmFtZSwgdHJ1ZSk7XG4gICAgICAvLyBBdm9pZCBsb29wcyBpZiB0aGUgc2Vjb25kIHBhc3MgcmVzdWx0cyBpbiB0aGUgc2FtZSBwYXJ0aWFsIG1hdGNoZXNcbiAgICAgIGlmICghbmV3UGFydGlhbE1hdGNoZXMgfHwgcGFydGlhbE1hdGNoZXMubGVuZ3RoID09PSBuZXdQYXJ0aWFsTWF0Y2hlcy5sZW5ndGggJiYgcGFydGlhbE1hdGNoZXMuZXZlcnkoKG0sIGkpID0+IG0ucm91dGUuaWQgPT09IG5ld1BhcnRpYWxNYXRjaGVzW2ldLnJvdXRlLmlkKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgIG1hdGNoZXM6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHBhcnRpYWxNYXRjaGVzID0gbmV3UGFydGlhbE1hdGNoZXM7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF9pbnRlcm5hbFNldFJvdXRlcyhuZXdSb3V0ZXMpIHtcbiAgICBtYW5pZmVzdCA9IHt9O1xuICAgIGluRmxpZ2h0RGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMobmV3Um91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICB9XG4gIGZ1bmN0aW9uIHBhdGNoUm91dGVzKHJvdXRlSWQsIGNoaWxkcmVuKSB7XG4gICAgbGV0IGlzTm9uSE1SID0gaW5GbGlnaHREYXRhUm91dGVzID09IG51bGw7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgcGF0Y2hSb3V0ZXNJbXBsKHJvdXRlSWQsIGNoaWxkcmVuLCByb3V0ZXNUb1VzZSwgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcyk7XG4gICAgLy8gSWYgd2UgYXJlIG5vdCBpbiB0aGUgbWlkZGxlIG9mIGFuIEhNUiByZXZhbGlkYXRpb24gYW5kIHdlIGNoYW5nZWQgdGhlXG4gICAgLy8gcm91dGVzLCBwcm92aWRlIGEgbmV3IGlkZW50aXR5IGFuZCB0cmlnZ2VyIGEgcmVmbG93IHZpYSBgdXBkYXRlU3RhdGVgXG4gICAgLy8gdG8gcmUtcnVuIG1lbW9pemVkIGByb3V0ZXIucm91dGVzYCBkZXBlbmRlbmNpZXMuXG4gICAgLy8gSE1SIHdpbGwgYWxyZWFkeSB1cGRhdGUgdGhlIGlkZW50aXR5IGFuZCByZWZsb3cgd2hlbiBpdCBsYW5kc1xuICAgIC8vIGBpbkZsaWdodERhdGFSb3V0ZXNgIGluIGBjb21wbGV0ZU5hdmlnYXRpb25gXG4gICAgaWYgKGlzTm9uSE1SKSB7XG4gICAgICBkYXRhUm91dGVzID0gWy4uLmRhdGFSb3V0ZXNdO1xuICAgICAgdXBkYXRlU3RhdGUoe30pO1xuICAgIH1cbiAgfVxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGJhc2VuYW1lO1xuICAgIH0sXG4gICAgZ2V0IGZ1dHVyZSgpIHtcbiAgICAgIHJldHVybiBmdXR1cmU7XG4gICAgfSxcbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcbiAgICBnZXQgcm91dGVzKCkge1xuICAgICAgcmV0dXJuIGRhdGFSb3V0ZXM7XG4gICAgfSxcbiAgICBnZXQgd2luZG93KCkge1xuICAgICAgcmV0dXJuIHJvdXRlcldpbmRvdztcbiAgICB9LFxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6IHRvID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogdG8gPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXI6IGRlbGV0ZUZldGNoZXJBbmRVcGRhdGVTdGF0ZSxcbiAgICBkaXNwb3NlLFxuICAgIGdldEJsb2NrZXIsXG4gICAgZGVsZXRlQmxvY2tlcixcbiAgICBwYXRjaFJvdXRlcyxcbiAgICBfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzOiBmZXRjaENvbnRyb2xsZXJzLFxuICAgIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLFxuICAgIC8vIFRPRE86IFJlbW92ZSBzZXRSb3V0ZXMsIGl0J3MgdGVtcG9yYXJ5IHRvIGF2b2lkIGRlYWxpbmcgd2l0aFxuICAgIC8vIHVwZGF0aW5nIHRoZSB0cmVlIHdoaWxlIHZhbGlkYXRpbmcgdGhlIHVwZGF0ZSBhbGdvcml0aG0uXG4gICAgX2ludGVybmFsU2V0Um91dGVzXG4gIH07XG4gIHJldHVybiByb3V0ZXI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmNvbnN0IFVOU0FGRV9ERUZFUlJFRF9TWU1CT0wgPSBTeW1ib2woXCJkZWZlcnJlZFwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXIocm91dGVzLCBvcHRzKSB7XG4gIGludmFyaWFudChyb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVTdGF0aWNIYW5kbGVyXCIpO1xuICBsZXQgbWFuaWZlc3QgPSB7fTtcbiAgbGV0IGJhc2VuYW1lID0gKG9wdHMgPyBvcHRzLmJhc2VuYW1lIDogbnVsbCkgfHwgXCIvXCI7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM7XG4gIGlmIChvcHRzICE9IG51bGwgJiYgb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXMpIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBvcHRzLm1hcFJvdXRlUHJvcGVydGllcztcbiAgfSBlbHNlIGlmIChvcHRzICE9IG51bGwgJiYgb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBvcHRzLmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICAvLyBDb25maWcgZHJpdmVuIGJlaGF2aW9yIGZsYWdzXG4gIGxldCBmdXR1cmUgPSBfZXh0ZW5kcyh7XG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlLFxuICAgIHY3X3Rocm93QWJvcnRSZWFzb246IGZhbHNlXG4gIH0sIG9wdHMgPyBvcHRzLmZ1dHVyZSA6IG51bGwpO1xuICBsZXQgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICAvKipcbiAgICogVGhlIHF1ZXJ5KCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciBkb2N1bWVudCByZXF1ZXN0cywgaW4gd2hpY2ggd2Ugd2FudCB0b1xuICAgKiBjYWxsIGFuIG9wdGlvbmFsIGFjdGlvbiBhbmQgcG90ZW50aWFsbHkgbXVsdGlwbGUgbG9hZGVycyBmb3IgYWxsIG5lc3RlZFxuICAgKiByb3V0ZXMuICBJdCByZXR1cm5zIGEgU3RhdGljSGFuZGxlckNvbnRleHQgb2JqZWN0LCB3aGljaCBpcyB2ZXJ5IHNpbWlsYXJcbiAgICogdG8gdGhlIHJvdXRlciBzdGF0ZSAobG9jYXRpb24sIGxvYWRlckRhdGEsIGFjdGlvbkRhdGEsIGVycm9ycywgZXRjLikgYW5kXG4gICAqIGFsc28gYWRkcyBTU1Itc3BlY2lmaWMgaW5mb3JtYXRpb24gc3VjaCBhcyB0aGUgc3RhdHVzQ29kZSBhbmQgaGVhZGVyc1xuICAgKiBmcm9tIGFjdGlvbi9sb2FkZXJzIFJlc3BvbnNlcy5cbiAgICpcbiAgICogSXQgX3Nob3VsZF8gbmV2ZXIgdGhyb3cgYW5kIHNob3VsZCByZXBvcnQgYWxsIGVycm9ycyB0aHJvdWdoIHRoZVxuICAgKiByZXR1cm5lZCBjb250ZXh0LmVycm9ycyBvYmplY3QsIHByb3Blcmx5IGFzc29jaWF0aW5nIGVycm9ycyB0byB0aGVpciBlcnJvclxuICAgKiBib3VuZGFyeS4gIEFkZGl0aW9uYWxseSwgaXQgdHJhY2tzIF9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIHdoaWNoIGNhbiBiZVxuICAgKiB1c2VkIHRvIGVtdWxhdGUgUmVhY3QgZXJyb3IgYm91bmRhcmllcyBkdXJpbmcgU1NyIGJ5IHBlcmZvcm1pbmcgYSBzZWNvbmRcbiAgICogcGFzcyBvbmx5IGRvd24gdG8gdGhlIGJvdW5kYXJ5SWQuXG4gICAqXG4gICAqIFRoZSBvbmUgZXhjZXB0aW9uIHdoZXJlIHdlIGRvIG5vdCByZXR1cm4gYSBTdGF0aWNIYW5kbGVyQ29udGV4dCBpcyB3aGVuIGFcbiAgICogcmVkaXJlY3QgcmVzcG9uc2UgaXMgcmV0dXJuZWQgb3IgdGhyb3duIGZyb20gYW55IGFjdGlvbi9sb2FkZXIuICBXZVxuICAgKiBwcm9wYWdhdGUgdGhhdCBvdXQgYW5kIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIHNvIHRoZSBIVFRQIHNlcnZlciBjYW5cbiAgICogcmV0dXJuIGl0IGRpcmVjdGx5LlxuICAgKlxuICAgKiAtIGBvcHRzLnJlcXVlc3RDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBzZXJ2ZXIgY29udGV4dCB0aGF0IHdpbGwgYmUgcGFzc2VkXG4gICAqICAgdG8gYWN0aW9ucy9sb2FkZXJzIGluIHRoZSBgY29udGV4dGAgcGFyYW1ldGVyXG4gICAqIC0gYG9wdHMuc2tpcExvYWRlckVycm9yQnViYmxpbmdgIGlzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHdpbGwgcHJldmVudFxuICAgKiAgIHRoZSBidWJibGluZyBvZiBlcnJvcnMgd2hpY2ggYWxsb3dzIHNpbmdsZS1mZXRjaC10eXBlIGltcGxlbWVudGF0aW9uc1xuICAgKiAgIHdoZXJlIHRoZSBjbGllbnQgd2lsbCBoYW5kbGUgdGhlIGJ1YmJsaW5nIGFuZCB3ZSBtYXkgbmVlZCB0byByZXR1cm4gZGF0YVxuICAgKiAgIGZvciB0aGUgaGFuZGxpbmcgcm91dGVcbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5KHJlcXVlc3QsIF90ZW1wMykge1xuICAgIGxldCB7XG4gICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLFxuICAgICAgZGF0YVN0cmF0ZWd5XG4gICAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIGRhdGFTdHJhdGVneSB8fCBudWxsLCBza2lwTG9hZGVyRXJyb3JCdWJibGluZyA9PT0gdHJ1ZSwgbnVsbCk7XG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8gV2hlbiByZXR1cm5pbmcgU3RhdGljSGFuZGxlckNvbnRleHQsIHdlIHBhdGNoIGJhY2sgaW4gdGhlIGxvY2F0aW9uIGhlcmVcbiAgICAvLyBzaW5jZSB3ZSBuZWVkIGl0IGZvciBSZWFjdCBDb250ZXh0LiAgQnV0IHRoaXMgaGVscHMga2VlcCBvdXIgc3VibWl0IGFuZFxuICAgIC8vIGxvYWRSb3V0ZURhdGEgb3BlcmF0aW5nIG9uIGEgUmVxdWVzdCBpbnN0ZWFkIG9mIGEgTG9jYXRpb25cbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgbG9jYXRpb24sXG4gICAgICBiYXNlbmFtZVxuICAgIH0sIHJlc3VsdCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBxdWVyeVJvdXRlKCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciB0YXJnZXRlZCByb3V0ZSByZXF1ZXN0cywgZWl0aGVyXG4gICAqIGZvciBmZXRjaCA/X2RhdGEgcmVxdWVzdHMgb3IgcmVzb3VyY2Ugcm91dGUgcmVxdWVzdHMuICBJbiB0aGlzIGNhc2UsIHdlXG4gICAqIGFyZSBvbmx5IGV2ZXIgY2FsbGluZyBhIHNpbmdsZSBhY3Rpb24gb3IgbG9hZGVyLCBhbmQgd2UgYXJlIHJldHVybmluZyB0aGVcbiAgICogcmV0dXJuZWQgdmFsdWUgZGlyZWN0bHkuICBJbiBtb3N0IGNhc2VzLCB0aGlzIHdpbGwgYmUgYSBSZXNwb25zZSByZXR1cm5lZFxuICAgKiBmcm9tIHRoZSBhY3Rpb24vbG9hZGVyLCBidXQgaXQgbWF5IGJlIGEgcHJpbWl0aXZlIG9yIG90aGVyIHZhbHVlIGFzIHdlbGwgLVxuICAgKiBhbmQgaW4gc3VjaCBjYXNlcyB0aGUgY2FsbGluZyBjb250ZXh0IHNob3VsZCBoYW5kbGUgdGhhdCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogV2UgZG8gcmVzcGVjdCB0aGUgdGhyb3cvcmV0dXJuIGRpZmZlcmVudGlhdGlvbiwgc28gaWYgYW4gYWN0aW9uL2xvYWRlclxuICAgKiB0aHJvd3MsIHRoZW4gdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyB0aGUgdmFsdWUuICBUaGlzIGlzIGltcG9ydGFudCBzbyB3ZVxuICAgKiBjYW4gZG8gcHJvcGVyIGJvdW5kYXJ5IGlkZW50aWZpY2F0aW9uIGluIFJlbWl4IHdoZXJlIGEgdGhyb3duIFJlc3BvbnNlXG4gICAqIG11c3QgZ28gdG8gdGhlIENhdGNoIEJvdW5kYXJ5IGJ1dCBhIHJldHVybmVkIFJlc3BvbnNlIGlzIGhhcHB5LXBhdGguXG4gICAqXG4gICAqIE9uZSB0aGluZyB0byBub3RlIGlzIHRoYXQgYW55IFJvdXRlci1pbml0aWF0ZWQgRXJyb3JzIHRoYXQgbWFrZSBzZW5zZVxuICAgKiB0byBhc3NvY2lhdGUgd2l0aCBhIHN0YXR1cyBjb2RlIHdpbGwgYmUgdGhyb3duIGFzIGFuIEVycm9yUmVzcG9uc2VcbiAgICogaW5zdGFuY2Ugd2hpY2ggaW5jbHVkZSB0aGUgcmF3IEVycm9yLCBzdWNoIHRoYXQgdGhlIGNhbGxpbmcgY29udGV4dCBjYW5cbiAgICogc2VyaWFsaXplIHRoZSBlcnJvciBhcyB0aGV5IHNlZSBmaXQgd2hpbGUgaW5jbHVkaW5nIHRoZSBwcm9wZXIgcmVzcG9uc2VcbiAgICogY29kZS4gIEV4YW1wbGVzIGhlcmUgYXJlIDQwNCBhbmQgNDA1IGVycm9ycyB0aGF0IG9jY3VyIHByaW9yIHRvIHJlYWNoaW5nXG4gICAqIGFueSB1c2VyLWRlZmluZWQgbG9hZGVycy5cbiAgICpcbiAgICogLSBgb3B0cy5yb3V0ZUlkYCBhbGxvd3MgeW91IHRvIHNwZWNpZnkgdGhlIHNwZWNpZmljIHJvdXRlIGhhbmRsZXIgdG8gY2FsbC5cbiAgICogICBJZiBub3QgcHJvdmlkZWQgdGhlIGhhbmRsZXIgd2lsbCBkZXRlcm1pbmUgdGhlIHByb3BlciByb3V0ZSBieSBtYXRjaGluZ1xuICAgKiAgIGFnYWluc3QgYHJlcXVlc3QudXJsYFxuICAgKiAtIGBvcHRzLnJlcXVlc3RDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBzZXJ2ZXIgY29udGV4dCB0aGF0IHdpbGwgYmUgcGFzc2VkXG4gICAqICAgIHRvIGFjdGlvbnMvbG9hZGVycyBpbiB0aGUgYGNvbnRleHRgIHBhcmFtZXRlclxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlSb3V0ZShyZXF1ZXN0LCBfdGVtcDQpIHtcbiAgICBsZXQge1xuICAgICAgcm91dGVJZCxcbiAgICAgIHJlcXVlc3RDb250ZXh0LFxuICAgICAgZGF0YVN0cmF0ZWd5XG4gICAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiICYmIG1ldGhvZCAhPT0gXCJPUFRJT05TXCIpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmIChyb3V0ZUlkICYmICFtYXRjaCkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDMsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaCkge1xuICAgICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGl0IEkgZG9uJ3QgdGhpbms/XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgZGF0YVN0cmF0ZWd5IHx8IG51bGwsIGZhbHNlLCBtYXRjaCk7XG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHdlIGdvdCBiYWNrIHJlc3VsdC5lcnJvcnMsIHRoYXQgbWVhbnMgdGhlIGxvYWRlci9hY3Rpb24gdGhyZXdcbiAgICAgIC8vIF9zb21ldGhpbmdfIHRoYXQgd2Fzbid0IGEgUmVzcG9uc2UsIGJ1dCBpdCdzIG5vdCBndWFyYW50ZWVkL3JlcXVpcmVkXG4gICAgICAvLyB0byBiZSBhbiBgaW5zdGFuY2VvZiBFcnJvcmAgZWl0aGVyLCBzbyB3ZSBoYXZlIHRvIHVzZSB0aHJvdyBoZXJlIHRvXG4gICAgICAvLyBwcmVzZXJ2ZSB0aGUgXCJlcnJvclwiIHN0YXRlIG91dHNpZGUgb2YgcXVlcnlJbXBsLlxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cbiAgICBpZiAocmVzdWx0LmFjdGlvbkRhdGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlc3VsdC5hY3Rpb25EYXRhKVswXTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5sb2FkZXJEYXRhKSB7XG4gICAgICB2YXIgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlO1xuICAgICAgbGV0IGRhdGEgPSBPYmplY3QudmFsdWVzKHJlc3VsdC5sb2FkZXJEYXRhKVswXTtcbiAgICAgIGlmICgoX3Jlc3VsdCRhY3RpdmVEZWZlcnJlID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkcykgIT0gbnVsbCAmJiBfcmVzdWx0JGFjdGl2ZURlZmVycmVbbWF0Y2gucm91dGUuaWRdKSB7XG4gICAgICAgIGRhdGFbVU5TQUZFX0RFRkVSUkVEX1NZTUJPTF0gPSByZXN1bHQuYWN0aXZlRGVmZXJyZWRzW21hdGNoLnJvdXRlLmlkXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIGRhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIHJvdXRlTWF0Y2gpIHtcbiAgICBpbnZhcmlhbnQocmVxdWVzdC5zaWduYWwsIFwicXVlcnkoKS9xdWVyeVJvdXRlKCkgcmVxdWVzdHMgbXVzdCBjb250YWluIGFuIEFib3J0Q29udHJvbGxlciBzaWduYWxcIik7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc011dGF0aW9uTWV0aG9kKHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgcm91dGVNYXRjaCB8fCBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbiksIHJlcXVlc3RDb250ZXh0LCBkYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCByb3V0ZU1hdGNoICE9IG51bGwpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIGRhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIHJvdXRlTWF0Y2gpO1xuICAgICAgcmV0dXJuIGlzUmVzcG9uc2UocmVzdWx0KSA/IHJlc3VsdCA6IF9leHRlbmRzKHt9LCByZXN1bHQsIHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHRocmV3L3JldHVybmVkIGEgUmVzcG9uc2UgaW4gY2FsbExvYWRlck9yQWN0aW9uIGZvciBhXG4gICAgICAvLyBgcXVlcnlSb3V0ZWAgY2FsbCwgd2UgdGhyb3cgdGhlIGBEYXRhU3RyYXRlZ3lSZXN1bHRgIHRvIGJhaWwgb3V0IGVhcmx5XG4gICAgICAvLyBhbmQgdGhlbiByZXR1cm4gb3IgdGhyb3cgdGhlIHJhdyBSZXNwb25zZSBoZXJlIGFjY29yZGluZ2x5XG4gICAgICBpZiAoaXNEYXRhU3RyYXRlZ3lSZXN1bHQoZSkgJiYgaXNSZXNwb25zZShlLnJlc3VsdCkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgICAgIHRocm93IGUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlLnJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIFJlZGlyZWN0cyBhcmUgYWx3YXlzIHJldHVybmVkIHNpbmNlIHRoZXkgZG9uJ3QgcHJvcGFnYXRlIHRvIGNhdGNoXG4gICAgICAvLyBib3VuZGFyaWVzXG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3BvbnNlKGUpKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIGFjdGlvbk1hdGNoLCByZXF1ZXN0Q29udGV4dCwgZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcbiAgICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcImFjdGlvblwiLCByZXF1ZXN0LCBbYWN0aW9uTWF0Y2hdLCBtYXRjaGVzLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQsIGRhdGFTdHJhdGVneSk7XG4gICAgICByZXN1bHQgPSByZXN1bHRzW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTtcbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvcihyZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCwgZnV0dXJlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gVWhoaGggLSB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4sIHdlIHNob3VsZCBhbHdheXMgdGhyb3cgdGhlc2UgZnJvbVxuICAgICAgLy8gY2FsbExvYWRlck9yQWN0aW9uLCBidXQgdGhlIHR5cGUgbmFycm93aW5nIGhlcmUga2VlcHMgVFMgaGFwcHkgYW5kIHdlXG4gICAgICAvLyBjYW4gZ2V0IGJhY2sgb24gdGhlIFwidGhyb3cgYWxsIHJlZGlyZWN0IHJlc3BvbnNlc1wiIHRyYWluIGhlcmUgc2hvdWxkXG4gICAgICAvLyB0aGlzIGV2ZXIgaGFwcGVuIDovXG4gICAgICB0aHJvdyBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IHJlc3VsdC5yZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBMb2NhdGlvbjogcmVzdWx0LnJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIilcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvclxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAvLyBOb3RlOiBUaGlzIHNob3VsZCBvbmx5IGJlIG5vbi1SZXNwb25zZSB2YWx1ZXMgaWYgd2UgZ2V0IGhlcmUsIHNpbmNlXG4gICAgICAvLyBpc1JvdXRlUmVxdWVzdCBzaG91bGQgdGhyb3cgYW55IFJlc3BvbnNlIHJlY2VpdmVkIGluIGNhbGxMb2FkZXJPckFjdGlvblxuICAgICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgLy8gTm90ZTogc3RhdHVzQ29kZSArIGhlYWRlcnMgYXJlIHVudXNlZCBoZXJlIHNpbmNlIHF1ZXJ5Um91dGUgd2lsbFxuICAgICAgICAvLyByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBvciB2YWx1ZVxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICBsZXQgbG9hZGVyUmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcXVlc3QudXJsLCB7XG4gICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICByZWRpcmVjdDogcmVxdWVzdC5yZWRpcmVjdCxcbiAgICAgIHNpZ25hbDogcmVxdWVzdC5zaWduYWxcbiAgICB9KTtcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gc2tpcExvYWRlckVycm9yQnViYmxpbmcgPyBhY3Rpb25NYXRjaCA6IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgbGV0IGNvbnRleHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKGxvYWRlclJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCBkYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCBudWxsLCBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZCwgcmVzdWx0XSk7XG4gICAgICAvLyBhY3Rpb24gc3RhdHVzIGNvZGVzIHRha2UgcHJlY2VkZW5jZSBvdmVyIGxvYWRlciBzdGF0dXMgY29kZXNcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IHJlc3VsdC5zdGF0dXNDb2RlICE9IG51bGwgPyByZXN1bHQuc3RhdHVzQ29kZSA6IDUwMCxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICAgIH0gOiB7fSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEobG9hZGVyUmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIGRhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIG51bGwpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgfVxuICAgIH0sIHJlc3VsdC5zdGF0dXNDb2RlID8ge1xuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1c0NvZGVcbiAgICB9IDoge30sIHtcbiAgICAgIGFjdGlvbkhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgcm91dGVNYXRjaCwgcGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICAgIGxldCBpc1JvdXRlUmVxdWVzdCA9IHJvdXRlTWF0Y2ggIT0gbnVsbDtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QgJiYgIShyb3V0ZU1hdGNoICE9IG51bGwgJiYgcm91dGVNYXRjaC5yb3V0ZS5sb2FkZXIpICYmICEocm91dGVNYXRjaCAhPSBudWxsICYmIHJvdXRlTWF0Y2gucm91dGUubGF6eSkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVNYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXF1ZXN0TWF0Y2hlcyA9IHJvdXRlTWF0Y2ggPyBbcm91dGVNYXRjaF0gOiBwZW5kaW5nQWN0aW9uUmVzdWx0ICYmIGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkgPyBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBwZW5kaW5nQWN0aW9uUmVzdWx0WzBdKSA6IG1hdGNoZXM7XG4gICAgbGV0IG1hdGNoZXNUb0xvYWQgPSByZXF1ZXN0TWF0Y2hlcy5maWx0ZXIobSA9PiBtLnJvdXRlLmxvYWRlciB8fCBtLnJvdXRlLmxhenkpO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnkoKSlcbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIC8vIEFkZCBhIG51bGwgZm9yIGFsbCBtYXRjaGVkIHJvdXRlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgICAgIGxvYWRlckRhdGE6IG1hdGNoZXMucmVkdWNlKChhY2MsIG0pID0+IE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgICAgW20ucm91dGUuaWRdOiBudWxsXG4gICAgICAgIH0pLCB7fSksXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvblJlc3VsdCAmJiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8ge1xuICAgICAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5lcnJvclxuICAgICAgICB9IDogbnVsbCxcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3koXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcywgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0LCBkYXRhU3RyYXRlZ3kpO1xuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICB0aHJvd1N0YXRpY0hhbmRsZXJBYm9ydGVkRXJyb3IocmVxdWVzdCwgaXNSb3V0ZVJlcXVlc3QsIGZ1dHVyZSk7XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgY29udGV4dCA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgcmVzdWx0cywgcGVuZGluZ0FjdGlvblJlc3VsdCwgYWN0aXZlRGVmZXJyZWRzLCBza2lwTG9hZGVyRXJyb3JCdWJibGluZyk7XG4gICAgLy8gQWRkIGEgbnVsbCBmb3IgYW55IG5vbi1sb2FkZXIgbWF0Y2hlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgbGV0IGV4ZWN1dGVkTG9hZGVycyA9IG5ldyBTZXQobWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gbWF0Y2gucm91dGUuaWQpKTtcbiAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgaWYgKCFleGVjdXRlZExvYWRlcnMuaGFzKG1hdGNoLnJvdXRlLmlkKSkge1xuICAgICAgICBjb250ZXh0LmxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcy5zaXplID4gMCA/IE9iamVjdC5mcm9tRW50cmllcyhhY3RpdmVEZWZlcnJlZHMuZW50cmllcygpKSA6IG51bGxcbiAgICB9KTtcbiAgfVxuICAvLyBVdGlsaXR5IHdyYXBwZXIgZm9yIGNhbGxpbmcgZGF0YVN0cmF0ZWd5IHNlcnZlci1zaWRlIHdpdGhvdXQgaGF2aW5nIHRvXG4gIC8vIHBhc3MgYXJvdW5kIHRoZSBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxEYXRhU3RyYXRlZ3kodHlwZSwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcywgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0LCBkYXRhU3RyYXRlZ3kpIHtcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3lJbXBsKGRhdGFTdHJhdGVneSB8fCBkZWZhdWx0RGF0YVN0cmF0ZWd5LCB0eXBlLCBudWxsLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzLCBudWxsLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgbGV0IGRhdGFSZXN1bHRzID0ge307XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwobWF0Y2hlcy5tYXAoYXN5bmMgbWF0Y2ggPT4ge1xuICAgICAgaWYgKCEobWF0Y2gucm91dGUuaWQgaW4gcmVzdWx0cykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbbWF0Y2gucm91dGUuaWRdO1xuICAgICAgaWYgKGlzUmVkaXJlY3REYXRhU3RyYXRlZ3lSZXN1bHRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSByZXN1bHQucmVzdWx0O1xuICAgICAgICAvLyBUaHJvdyByZWRpcmVjdHMgYW5kIGxldCB0aGUgc2VydmVyIGhhbmRsZSB0aGVtIHdpdGggYW4gSFRUUCByZWRpcmVjdFxuICAgICAgICB0aHJvdyBub3JtYWxpemVSZWxhdGl2ZVJvdXRpbmdSZWRpcmVjdFJlc3BvbnNlKHJlc3BvbnNlLCByZXF1ZXN0LCBtYXRjaC5yb3V0ZS5pZCwgbWF0Y2hlcywgYmFzZW5hbWUsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQucmVzdWx0KSAmJiBpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICAvLyBGb3IgU1NSIHNpbmdsZS1yb3V0ZSByZXF1ZXN0cywgd2Ugd2FudCB0byBoYW5kIFJlc3BvbnNlcyBiYWNrXG4gICAgICAgIC8vIGRpcmVjdGx5IHdpdGhvdXQgdW53cmFwcGluZ1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkYXRhUmVzdWx0c1ttYXRjaC5yb3V0ZS5pZF0gPSBhd2FpdCBjb252ZXJ0RGF0YVN0cmF0ZWd5UmVzdWx0VG9EYXRhUmVzdWx0KHJlc3VsdCk7XG4gICAgfSkpO1xuICAgIHJldHVybiBkYXRhUmVzdWx0cztcbiAgfVxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEdpdmVuIGFuIGV4aXN0aW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0IGFuZCBhbiBlcnJvciB0aHJvd24gYXQgcmVuZGVyIHRpbWUsXG4gKiBwcm92aWRlIGFuIHVwZGF0ZWQgU3RhdGljSGFuZGxlckNvbnRleHQgc3VpdGFibGUgZm9yIGEgc2Vjb25kIFNTUiByZW5kZXJcbiAqL1xuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdDb250ZXh0O1xufVxuZnVuY3Rpb24gdGhyb3dTdGF0aWNIYW5kbGVyQWJvcnRlZEVycm9yKHJlcXVlc3QsIGlzUm91dGVSZXF1ZXN0LCBmdXR1cmUpIHtcbiAgaWYgKGZ1dHVyZS52N190aHJvd0Fib3J0UmVhc29uICYmIHJlcXVlc3Quc2lnbmFsLnJlYXNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgcmVxdWVzdC5zaWduYWwucmVhc29uO1xuICB9XG4gIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIoKSBjYWxsIGFib3J0ZWQ6IFwiICsgcmVxdWVzdC5tZXRob2QgKyBcIiBcIiArIHJlcXVlc3QudXJsKTtcbn1cbmZ1bmN0aW9uIGlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykge1xuICByZXR1cm4gb3B0cyAhPSBudWxsICYmIChcImZvcm1EYXRhXCIgaW4gb3B0cyAmJiBvcHRzLmZvcm1EYXRhICE9IG51bGwgfHwgXCJib2R5XCIgaW4gb3B0cyAmJiBvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVUbyhsb2NhdGlvbiwgbWF0Y2hlcywgYmFzZW5hbWUsIHByZXBlbmRCYXNlbmFtZSwgdG8sIHY3X3JlbGF0aXZlU3BsYXRQYXRoLCBmcm9tUm91dGVJZCwgcmVsYXRpdmUpIHtcbiAgbGV0IGNvbnRleHR1YWxNYXRjaGVzO1xuICBsZXQgYWN0aXZlUm91dGVNYXRjaDtcbiAgaWYgKGZyb21Sb3V0ZUlkKSB7XG4gICAgLy8gR3JhYiBtYXRjaGVzIHVwIHRvIHRoZSBjYWxsaW5nIHJvdXRlIHNvIG91ciByb3V0ZS1yZWxhdGl2ZSBsb2dpYyBpc1xuICAgIC8vIHJlbGF0aXZlIHRvIHRoZSBjb3JyZWN0IHNvdXJjZSByb3V0ZVxuICAgIGNvbnRleHR1YWxNYXRjaGVzID0gW107XG4gICAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgICAgY29udGV4dHVhbE1hdGNoZXMucHVzaChtYXRjaCk7XG4gICAgICBpZiAobWF0Y2gucm91dGUuaWQgPT09IGZyb21Sb3V0ZUlkKSB7XG4gICAgICAgIGFjdGl2ZVJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnRleHR1YWxNYXRjaGVzID0gbWF0Y2hlcztcbiAgICBhY3RpdmVSb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICB9XG4gIC8vIFJlc29sdmUgdGhlIHJlbGF0aXZlIHBhdGhcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8gPyB0byA6IFwiLlwiLCBnZXRSZXNvbHZlVG9NYXRjaGVzKGNvbnRleHR1YWxNYXRjaGVzLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCksIHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBsb2NhdGlvbi5wYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKTtcbiAgLy8gV2hlbiBgdG9gIGlzIG5vdCBzcGVjaWZpZWQgd2UgaW5oZXJpdCBzZWFyY2gvaGFzaCBmcm9tIHRoZSBjdXJyZW50XG4gIC8vIGxvY2F0aW9uLCB1bmxpa2Ugd2hlbiB0bz1cIi5cIiBhbmQgd2UganVzdCBpbmhlcml0IHRoZSBwYXRoLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZW1peC9pc3N1ZXMvOTI3XG4gIGlmICh0byA9PSBudWxsKSB7XG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgcGF0aC5oYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgfVxuICAvLyBBY2NvdW50IGZvciBgP2luZGV4YCBwYXJhbXMgd2hlbiByb3V0aW5nIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gIGlmICgodG8gPT0gbnVsbCB8fCB0byA9PT0gXCJcIiB8fCB0byA9PT0gXCIuXCIpICYmIGFjdGl2ZVJvdXRlTWF0Y2gpIHtcbiAgICBsZXQgbmFrZWRJbmRleCA9IGhhc05ha2VkSW5kZXhRdWVyeShwYXRoLnNlYXJjaCk7XG4gICAgaWYgKGFjdGl2ZVJvdXRlTWF0Y2gucm91dGUuaW5kZXggJiYgIW5ha2VkSW5kZXgpIHtcbiAgICAgIC8vIEFkZCBvbmUgd2hlbiB3ZSdyZSB0YXJnZXRpbmcgYW4gaW5kZXggcm91dGVcbiAgICAgIHBhdGguc2VhcmNoID0gcGF0aC5zZWFyY2ggPyBwYXRoLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgXCI/aW5kZXgmXCIpIDogXCI/aW5kZXhcIjtcbiAgICB9IGVsc2UgaWYgKCFhY3RpdmVSb3V0ZU1hdGNoLnJvdXRlLmluZGV4ICYmIG5ha2VkSW5kZXgpIHtcbiAgICAgIC8vIFJlbW92ZSBleGlzdGluZyBvbmVzIHdoZW4gd2UncmUgbm90XG4gICAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXRoLnNlYXJjaCk7XG4gICAgICBsZXQgaW5kZXhWYWx1ZXMgPSBwYXJhbXMuZ2V0QWxsKFwiaW5kZXhcIik7XG4gICAgICBwYXJhbXMuZGVsZXRlKFwiaW5kZXhcIik7XG4gICAgICBpbmRleFZhbHVlcy5maWx0ZXIodiA9PiB2KS5mb3JFYWNoKHYgPT4gcGFyYW1zLmFwcGVuZChcImluZGV4XCIsIHYpKTtcbiAgICAgIGxldCBxcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICAgICAgcGF0aC5zZWFyY2ggPSBxcyA/IFwiP1wiICsgcXMgOiBcIlwiO1xuICAgIH1cbiAgfVxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lLiAgSWZcbiAgLy8gdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93c1xuICAvLyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaFxuICAvLyBvbiByb290IGFjdGlvbnNcbiAgaWYgKHByZXBlbmRCYXNlbmFtZSAmJiBiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlUGF0aChwYXRoKTtcbn1cbi8vIE5vcm1hbGl6ZSBuYXZpZ2F0aW9uIG9wdGlvbnMgYnkgY29udmVydGluZyBmb3JtTWV0aG9kPUdFVCBmb3JtRGF0YSBvYmplY3RzIHRvXG4vLyBVUkxTZWFyY2hQYXJhbXMgc28gdGhleSBiZWhhdmUgaWRlbnRpY2FsbHkgdG8gbGlua3Mgd2l0aCBxdWVyeSBwYXJhbXNcbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhub3JtYWxpemVGb3JtTWV0aG9kLCBpc0ZldGNoZXIsIHBhdGgsIG9wdHMpIHtcbiAgLy8gUmV0dXJuIGxvY2F0aW9uIHZlcmJhdGltIG9uIG5vbi1zdWJtaXNzaW9uIG5hdmlnYXRpb25zXG4gIGlmICghb3B0cyB8fCAhaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoXG4gICAgfTtcbiAgfVxuICBpZiAob3B0cy5mb3JtTWV0aG9kICYmICFpc1ZhbGlkTWV0aG9kKG9wdHMuZm9ybU1ldGhvZCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aCxcbiAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IG9wdHMuZm9ybU1ldGhvZFxuICAgICAgfSlcbiAgICB9O1xuICB9XG4gIGxldCBnZXRJbnZhbGlkQm9keUVycm9yID0gKCkgPT4gKHtcbiAgICBwYXRoLFxuICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgdHlwZTogXCJpbnZhbGlkLWJvZHlcIlxuICAgIH0pXG4gIH0pO1xuICAvLyBDcmVhdGUgYSBTdWJtaXNzaW9uIG9uIG5vbi1HRVQgbmF2aWdhdGlvbnNcbiAgbGV0IHJhd0Zvcm1NZXRob2QgPSBvcHRzLmZvcm1NZXRob2QgfHwgXCJnZXRcIjtcbiAgbGV0IGZvcm1NZXRob2QgPSBub3JtYWxpemVGb3JtTWV0aG9kID8gcmF3Rm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpIDogcmF3Rm9ybU1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICBsZXQgZm9ybUFjdGlvbiA9IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpO1xuICBpZiAob3B0cy5ib2R5ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAob3B0cy5mb3JtRW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgIC8vIHRleHQgb25seSBzdXBwb3J0IFBPU1QvUFVUL1BBVENIL0RFTEVURSBzdWJtaXNzaW9uc1xuICAgICAgaWYgKCFpc011dGF0aW9uTWV0aG9kKGZvcm1NZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgICBsZXQgdGV4dCA9IHR5cGVvZiBvcHRzLmJvZHkgPT09IFwic3RyaW5nXCIgPyBvcHRzLmJvZHkgOiBvcHRzLmJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSB8fCBvcHRzLmJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgP1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjcGxhaW4tdGV4dC1mb3JtLWRhdGFcbiAgICAgIEFycmF5LmZyb20ob3B0cy5ib2R5LmVudHJpZXMoKSkucmVkdWNlKChhY2MsIF9yZWYzKSA9PiB7XG4gICAgICAgIGxldCBbbmFtZSwgdmFsdWVdID0gX3JlZjM7XG4gICAgICAgIHJldHVybiBcIlwiICsgYWNjICsgbmFtZSArIFwiPVwiICsgdmFsdWUgKyBcIlxcblwiO1xuICAgICAgfSwgXCJcIikgOiBTdHJpbmcob3B0cy5ib2R5KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGgsXG4gICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICBmb3JtTWV0aG9kLFxuICAgICAgICAgIGZvcm1BY3Rpb24sXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICAgICAgdGV4dFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAob3B0cy5mb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgIC8vIGpzb24gb25seSBzdXBwb3J0cyBQT1NUL1BVVC9QQVRDSC9ERUxFVEUgc3VibWlzc2lvbnNcbiAgICAgIGlmICghaXNNdXRhdGlvbk1ldGhvZChmb3JtTWV0aG9kKSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGpzb24gPSB0eXBlb2Ygb3B0cy5ib2R5ID09PSBcInN0cmluZ1wiID8gSlNPTi5wYXJzZShvcHRzLmJvZHkpIDogb3B0cy5ib2R5O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgICAgZm9ybU1ldGhvZCxcbiAgICAgICAgICAgIGZvcm1BY3Rpb24sXG4gICAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0cy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBqc29uLFxuICAgICAgICAgICAgdGV4dDogdW5kZWZpbmVkXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpbnZhcmlhbnQodHlwZW9mIEZvcm1EYXRhID09PSBcImZ1bmN0aW9uXCIsIFwiRm9ybURhdGEgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50XCIpO1xuICBsZXQgc2VhcmNoUGFyYW1zO1xuICBsZXQgZm9ybURhdGE7XG4gIGlmIChvcHRzLmZvcm1EYXRhKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5mb3JtRGF0YSk7XG4gICAgZm9ybURhdGEgPSBvcHRzLmZvcm1EYXRhO1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5ib2R5KTtcbiAgICBmb3JtRGF0YSA9IG9wdHMuYm9keTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBvcHRzLmJvZHk7XG4gICAgZm9ybURhdGEgPSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpO1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSA9PSBudWxsKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMob3B0cy5ib2R5KTtcbiAgICAgIGZvcm1EYXRhID0gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgIH1cbiAgfVxuICBsZXQgc3VibWlzc2lvbiA9IHtcbiAgICBmb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGU6IG9wdHMgJiYgb3B0cy5mb3JtRW5jVHlwZSB8fCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgIGZvcm1EYXRhLFxuICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICB0ZXh0OiB1bmRlZmluZWRcbiAgfTtcbiAgaWYgKGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvblxuICAgIH07XG4gIH1cbiAgLy8gRmxhdHRlbiBzdWJtaXNzaW9uIG9udG8gVVJMU2VhcmNoUGFyYW1zIGZvciBHRVQgc3VibWlzc2lvbnNcbiAgbGV0IHBhcnNlZFBhdGggPSBwYXJzZVBhdGgocGF0aCk7XG4gIC8vIE9uIEdFVCBuYXZpZ2F0aW9uIHN1Ym1pc3Npb25zIHdlIGNhbiBkcm9wIHRoZSA/aW5kZXggcGFyYW0gZnJvbSB0aGVcbiAgLy8gcmVzdWx0aW5nIGxvY2F0aW9uIHNpbmNlIGFsbCBsb2FkZXJzIHdpbGwgcnVuLiAgQnV0IGZldGNoZXIgR0VUIHN1Ym1pc3Npb25zXG4gIC8vIG9ubHkgcnVuIGEgc2luZ2xlIGxvYWRlciBzbyB3ZSBuZWVkIHRvIHByZXNlcnZlIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG4gIGlmIChpc0ZldGNoZXIgJiYgcGFyc2VkUGF0aC5zZWFyY2ggJiYgaGFzTmFrZWRJbmRleFF1ZXJ5KHBhcnNlZFBhdGguc2VhcmNoKSkge1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbmRleFwiLCBcIlwiKTtcbiAgfVxuICBwYXJzZWRQYXRoLnNlYXJjaCA9IFwiP1wiICsgc2VhcmNoUGFyYW1zO1xuICByZXR1cm4ge1xuICAgIHBhdGg6IGNyZWF0ZVBhdGgocGFyc2VkUGF0aCksXG4gICAgc3VibWlzc2lvblxuICB9O1xufVxuLy8gRmlsdGVyIG91dCBhbGwgcm91dGVzIGF0L2JlbG93IGFueSBjYXVnaHQgZXJyb3IgYXMgdGhleSBhcmVuJ3QgZ29pbmcgdG9cbi8vIHJlbmRlciBzbyB3ZSBkb24ndCBuZWVkIHRvIGxvYWQgdGhlbVxuZnVuY3Rpb24gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCwgaW5jbHVkZUJvdW5kYXJ5KSB7XG4gIGlmIChpbmNsdWRlQm91bmRhcnkgPT09IHZvaWQgMCkge1xuICAgIGluY2x1ZGVCb3VuZGFyeSA9IGZhbHNlO1xuICB9XG4gIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG4gIGlmIChpbmRleCA+PSAwKSB7XG4gICAgcmV0dXJuIG1hdGNoZXMuc2xpY2UoMCwgaW5jbHVkZUJvdW5kYXJ5ID8gaW5kZXggKyAxIDogaW5kZXgpO1xuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufVxuZnVuY3Rpb24gZ2V0TWF0Y2hlc1RvTG9hZChoaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbG9jYXRpb24sIGluaXRpYWxIeWRyYXRpb24sIHNraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgZGVsZXRlZEZldGNoZXJzLCBmZXRjaExvYWRNYXRjaGVzLCBmZXRjaFJlZGlyZWN0SWRzLCByb3V0ZXNUb1VzZSwgYmFzZW5hbWUsIHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgbGV0IGFjdGlvblJlc3VsdCA9IHBlbmRpbmdBY3Rpb25SZXN1bHQgPyBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8gcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5lcnJvciA6IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZGF0YSA6IHVuZGVmaW5lZDtcbiAgbGV0IGN1cnJlbnRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdGF0ZS5sb2NhdGlvbik7XG4gIGxldCBuZXh0VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwobG9jYXRpb24pO1xuICAvLyBQaWNrIG5hdmlnYXRpb24gbWF0Y2hlcyB0aGF0IGFyZSBuZXQtbmV3IG9yIHF1YWxpZnkgZm9yIHJldmFsaWRhdGlvblxuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcztcbiAgaWYgKGluaXRpYWxIeWRyYXRpb24gJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgLy8gT24gaW5pdGlhbCBoeWRyYXRpb24sIG9ubHkgY29uc2lkZXIgbWF0Y2hlcyB1cCB0byBfYW5kIGluY2x1ZGluZ18gdGhlIGJvdW5kYXJ5LlxuICAgIC8vIFRoaXMgaXMgaW5jbHVzaXZlIHRvIGhhbmRsZSBjYXNlcyB3aGVyZSBhIHNlcnZlciBsb2FkZXIgcmFuIHN1Y2Nlc3NmdWxseSxcbiAgICAvLyBhIGNoaWxkIHNlcnZlciBsb2FkZXIgYnViYmxlZCB1cCB0byB0aGlzIHJvdXRlLCBidXQgdGhpcyByb3V0ZSBoYXNcbiAgICAvLyBgY2xpZW50TG9hZGVyLmh5ZHJhdGVgIHNvIHdlIHdhbnQgdG8gc3RpbGwgcnVuIHRoZSBgY2xpZW50TG9hZGVyYCBzbyB0aGF0XG4gICAgLy8gd2UgaGF2ZSBhIGNvbXBsZXRlIHZlcnNpb24gb2YgYGxvYWRlckRhdGFgXG4gICAgYm91bmRhcnlNYXRjaGVzID0gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgT2JqZWN0LmtleXMoc3RhdGUuZXJyb3JzKVswXSwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvblJlc3VsdCAmJiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pKSB7XG4gICAgLy8gSWYgYW4gYWN0aW9uIHRocmV3IGFuIGVycm9yLCB3ZSBjYWxsIGxvYWRlcnMgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nIHRoZVxuICAgIC8vIGJvdW5kYXJ5XG4gICAgYm91bmRhcnlNYXRjaGVzID0gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgcGVuZGluZ0FjdGlvblJlc3VsdFswXSk7XG4gIH1cbiAgLy8gRG9uJ3QgcmV2YWxpZGF0ZSBsb2FkZXJzIGJ5IGRlZmF1bHQgYWZ0ZXIgYWN0aW9uIDR4eC81eHggcmVzcG9uc2VzXG4gIC8vIHdoZW4gdGhlIGZsYWcgaXMgZW5hYmxlZC4gIFRoZXkgY2FuIHN0aWxsIG9wdC1pbnRvIHJldmFsaWRhdGlvbiB2aWFcbiAgLy8gYHNob3VsZFJldmFsaWRhdGVgIHZpYSBgYWN0aW9uUmVzdWx0YFxuICBsZXQgYWN0aW9uU3RhdHVzID0gcGVuZGluZ0FjdGlvblJlc3VsdCA/IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uc3RhdHVzQ29kZSA6IHVuZGVmaW5lZDtcbiAgbGV0IHNob3VsZFNraXBSZXZhbGlkYXRpb24gPSBza2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24gJiYgYWN0aW9uU3RhdHVzICYmIGFjdGlvblN0YXR1cyA+PSA0MDA7XG4gIGxldCBuYXZpZ2F0aW9uTWF0Y2hlcyA9IGJvdW5kYXJ5TWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIGxldCB7XG4gICAgICByb3V0ZVxuICAgIH0gPSBtYXRjaDtcbiAgICBpZiAocm91dGUubGF6eSkge1xuICAgICAgLy8gV2UgaGF2ZW4ndCBsb2FkZWQgdGhpcyByb3V0ZSB5ZXQgc28gd2UgZG9uJ3Qga25vdyBpZiBpdCdzIGdvdCBhIGxvYWRlciFcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAocm91dGUubG9hZGVyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGluaXRpYWxIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybiBzaG91bGRMb2FkUm91dGVPbkh5ZHJhdGlvbihyb3V0ZSwgc3RhdGUubG9hZGVyRGF0YSwgc3RhdGUuZXJyb3JzKTtcbiAgICB9XG4gICAgLy8gQWx3YXlzIGNhbGwgdGhlIGxvYWRlciBvbiBuZXcgcm91dGUgaW5zdGFuY2VzIGFuZCBwZW5kaW5nIGRlZmVyIGNhbmNlbGxhdGlvbnNcbiAgICBpZiAoaXNOZXdMb2FkZXIoc3RhdGUubG9hZGVyRGF0YSwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIG1hdGNoKSB8fCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKGlkID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciB3aGVuIHdlIHJldmFsaWRhdGUuICBJZiB0aGUgcm91dGVcbiAgICAvLyBwcm92aWRlcyBpdCdzIG93biBpbXBsZW1lbnRhdGlvbiwgdGhlbiB3ZSBnaXZlIHRoZW0gZnVsbCBjb250cm9sIGJ1dFxuICAgIC8vIHByb3ZpZGUgdGhpcyB2YWx1ZSBzbyB0aGV5IGNhbiBsZXZlcmFnZSBpdCBpZiBuZWVkZWQgYWZ0ZXIgdGhleSBjaGVja1xuICAgIC8vIHRoZWlyIG93biBzcGVjaWZpYyB1c2UgY2FzZXNcbiAgICBsZXQgY3VycmVudFJvdXRlTWF0Y2ggPSBzdGF0ZS5tYXRjaGVzW2luZGV4XTtcbiAgICBsZXQgbmV4dFJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICByZXR1cm4gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihtYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IGN1cnJlbnRSb3V0ZU1hdGNoLnBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zOiBuZXh0Um91dGVNYXRjaC5wYXJhbXNcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICBhY3Rpb25TdGF0dXMsXG4gICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTogc2hvdWxkU2tpcFJldmFsaWRhdGlvbiA/IGZhbHNlIDpcbiAgICAgIC8vIEZvcmNlZCByZXZhbGlkYXRpb24gZHVlIHRvIHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdG9yLCBvciBYLVJlbWl4LVJldmFsaWRhdGVcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgfHwgY3VycmVudFVybC5wYXRobmFtZSArIGN1cnJlbnRVcmwuc2VhcmNoID09PSBuZXh0VXJsLnBhdGhuYW1lICsgbmV4dFVybC5zZWFyY2ggfHxcbiAgICAgIC8vIFNlYXJjaCBwYXJhbXMgYWZmZWN0IGFsbCBsb2FkZXJzXG4gICAgICBjdXJyZW50VXJsLnNlYXJjaCAhPT0gbmV4dFVybC5zZWFyY2ggfHwgaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRSb3V0ZU1hdGNoLCBuZXh0Um91dGVNYXRjaClcbiAgICB9KSk7XG4gIH0pO1xuICAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG4gIGxldCByZXZhbGlkYXRpbmdGZXRjaGVycyA9IFtdO1xuICBmZXRjaExvYWRNYXRjaGVzLmZvckVhY2goKGYsIGtleSkgPT4ge1xuICAgIC8vIERvbid0IHJldmFsaWRhdGU6XG4gICAgLy8gIC0gb24gaW5pdGlhbCBoeWRyYXRpb24gKHNob3VsZG4ndCBiZSBhbnkgZmV0Y2hlcnMgdGhlbiBhbnl3YXkpXG4gICAgLy8gIC0gaWYgZmV0Y2hlciB3b24ndCBiZSBwcmVzZW50IGluIHRoZSBzdWJzZXF1ZW50IHJlbmRlclxuICAgIC8vICAgIC0gbm8gbG9uZ2VyIG1hdGNoZXMgdGhlIFVSTCAodjdfZmV0Y2hlclBlcnNpc3Q9ZmFsc2UpXG4gICAgLy8gICAgLSB3YXMgdW5tb3VudGVkIGJ1dCBwZXJzaXN0ZWQgZHVlIHRvIHY3X2ZldGNoZXJQZXJzaXN0PXRydWVcbiAgICBpZiAoaW5pdGlhbEh5ZHJhdGlvbiB8fCAhbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gZi5yb3V0ZUlkKSB8fCBkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGZldGNoZXJNYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGYucGF0aCwgYmFzZW5hbWUpO1xuICAgIC8vIElmIHRoZSBmZXRjaGVyIHBhdGggbm8gbG9uZ2VyIG1hdGNoZXMsIHB1c2ggaXQgaW4gd2l0aCBudWxsIG1hdGNoZXMgc29cbiAgICAvLyB3ZSBjYW4gdHJpZ2dlciBhIDQwNCBpbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEuICBOb3RlIHRoaXMgaXNcbiAgICAvLyBjdXJyZW50bHkgb25seSBhIHVzZS1jYXNlIGZvciBSZW1peCBITVIgd2hlcmUgdGhlIHJvdXRlIHRyZWUgY2FuIGNoYW5nZVxuICAgIC8vIGF0IHJ1bnRpbWUgYW5kIHJlbW92ZSBhIHJvdXRlIHByZXZpb3VzbHkgbG9hZGVkIHZpYSBhIGZldGNoZXJcbiAgICBpZiAoIWZldGNoZXJNYXRjaGVzKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogbnVsbCxcbiAgICAgICAgbWF0Y2g6IG51bGwsXG4gICAgICAgIGNvbnRyb2xsZXI6IG51bGxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZXZhbGlkYXRpbmcgZmV0Y2hlcnMgYXJlIGRlY291cGxlZCBmcm9tIHRoZSByb3V0ZSBtYXRjaGVzIHNpbmNlIHRoZXlcbiAgICAvLyBsb2FkIGZyb20gYSBzdGF0aWMgaHJlZi4gIFRoZXkgcmV2YWxpZGF0ZSBiYXNlZCBvbiBleHBsaWNpdCByZXZhbGlkYXRpb25cbiAgICAvLyAoc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0b3IsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZSlcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIGxldCBmZXRjaGVyTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChmZXRjaGVyTWF0Y2hlcywgZi5wYXRoKTtcbiAgICBsZXQgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIGlmIChmZXRjaFJlZGlyZWN0SWRzLmhhcyhrZXkpKSB7XG4gICAgICAvLyBOZXZlciB0cmlnZ2VyIGEgcmV2YWxpZGF0aW9uIG9mIGFuIGFjdGl2ZWx5IHJlZGlyZWN0aW5nIGZldGNoZXJcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5oYXMoa2V5KSkge1xuICAgICAgLy8gQWx3YXlzIG1hcmsgZm9yIHJldmFsaWRhdGlvbiBpZiB0aGUgZmV0Y2hlciB3YXMgY2FuY2VsbGVkXG4gICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMuZGVsZXRlKGtleSk7XG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSAhPT0gXCJpZGxlXCIgJiYgZmV0Y2hlci5kYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHRoZSBmZXRjaGVyIGhhc24ndCBldmVyIGNvbXBsZXRlZCBsb2FkaW5nIHlldCwgdGhlbiB0aGlzIGlzbid0IGFcbiAgICAgIC8vIHJldmFsaWRhdGlvbiwgaXQgd291bGQganVzdCBiZSBhIGJyYW5kIG5ldyBsb2FkIGlmIGFuIGV4cGxpY2l0XG4gICAgICAvLyByZXZhbGlkYXRpb24gaXMgcmVxdWlyZWRcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBpc1JldmFsaWRhdGlvblJlcXVpcmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UgZmFsbCBiYWNrIG9uIGFueSB1c2VyLWRlZmluZWQgc2hvdWxkUmV2YWxpZGF0ZSwgZGVmYXVsdGluZ1xuICAgICAgLy8gdG8gZXhwbGljaXQgcmV2YWxpZGF0aW9ucyBvbmx5XG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihmZXRjaGVyTWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgICAgY3VycmVudFVybCxcbiAgICAgICAgY3VycmVudFBhcmFtczogc3RhdGUubWF0Y2hlc1tzdGF0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtcyxcbiAgICAgICAgbmV4dFVybCxcbiAgICAgICAgbmV4dFBhcmFtczogbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtc1xuICAgICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICAgIGFjdGlvblN0YXR1cyxcbiAgICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6IHNob3VsZFNraXBSZXZhbGlkYXRpb24gPyBmYWxzZSA6IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBmZXRjaGVyTWF0Y2hlcyxcbiAgICAgICAgbWF0Y2g6IGZldGNoZXJNYXRjaCxcbiAgICAgICAgY29udHJvbGxlcjogbmV3IEFib3J0Q29udHJvbGxlcigpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gW25hdmlnYXRpb25NYXRjaGVzLCByZXZhbGlkYXRpbmdGZXRjaGVyc107XG59XG5mdW5jdGlvbiBzaG91bGRMb2FkUm91dGVPbkh5ZHJhdGlvbihyb3V0ZSwgbG9hZGVyRGF0YSwgZXJyb3JzKSB7XG4gIC8vIFdlIGR1bm5vIGlmIHdlIGhhdmUgYSBsb2FkZXIgLSBnb3R0YSBmaW5kIG91dCFcbiAgaWYgKHJvdXRlLmxhenkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBObyBsb2FkZXIsIG5vdGhpbmcgdG8gaW5pdGlhbGl6ZVxuICBpZiAoIXJvdXRlLmxvYWRlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgaGFzRGF0YSA9IGxvYWRlckRhdGEgIT0gbnVsbCAmJiBsb2FkZXJEYXRhW3JvdXRlLmlkXSAhPT0gdW5kZWZpbmVkO1xuICBsZXQgaGFzRXJyb3IgPSBlcnJvcnMgIT0gbnVsbCAmJiBlcnJvcnNbcm91dGUuaWRdICE9PSB1bmRlZmluZWQ7XG4gIC8vIERvbid0IHJ1biBpZiB3ZSBlcnJvcidkIGR1cmluZyBTU1JcbiAgaWYgKCFoYXNEYXRhICYmIGhhc0Vycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEV4cGxpY2l0bHkgb3B0aW5nLWluIHRvIHJ1bm5pbmcgb24gaHlkcmF0aW9uXG4gIGlmICh0eXBlb2Ygcm91dGUubG9hZGVyID09PSBcImZ1bmN0aW9uXCIgJiYgcm91dGUubG9hZGVyLmh5ZHJhdGUgPT09IHRydWUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBPdGhlcndpc2UsIHJ1biBpZiB3ZSdyZSBub3QgeWV0IGluaXRpYWxpemVkIHdpdGggYW55dGhpbmdcbiAgcmV0dXJuICFoYXNEYXRhICYmICFoYXNFcnJvcjtcbn1cbmZ1bmN0aW9uIGlzTmV3TG9hZGVyKGN1cnJlbnRMb2FkZXJEYXRhLCBjdXJyZW50TWF0Y2gsIG1hdGNoKSB7XG4gIGxldCBpc05ldyA9XG4gIC8vIFthXSAtPiBbYSwgYl1cbiAgIWN1cnJlbnRNYXRjaCB8fFxuICAvLyBbYSwgYl0gLT4gW2EsIGNdXG4gIG1hdGNoLnJvdXRlLmlkICE9PSBjdXJyZW50TWF0Y2gucm91dGUuaWQ7XG4gIC8vIEhhbmRsZSB0aGUgY2FzZSB0aGF0IHdlIGRvbid0IGhhdmUgZGF0YSBmb3IgYSByZS11c2VkIHJvdXRlLCBwb3RlbnRpYWxseVxuICAvLyBmcm9tIGEgcHJpb3IgZXJyb3Igb3IgZnJvbSBhIGNhbmNlbGxlZCBwZW5kaW5nIGRlZmVycmVkXG4gIGxldCBpc01pc3NpbmdEYXRhID0gY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQ7XG4gIC8vIEFsd2F5cyBsb2FkIGlmIHRoaXMgaXMgYSBuZXQtbmV3IHJvdXRlIG9yIHdlIGRvbid0IHlldCBoYXZlIGRhdGFcbiAgcmV0dXJuIGlzTmV3IHx8IGlzTWlzc2luZ0RhdGE7XG59XG5mdW5jdGlvbiBpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgY3VycmVudFBhdGggPSBjdXJyZW50TWF0Y2gucm91dGUucGF0aDtcbiAgcmV0dXJuIChcbiAgICAvLyBwYXJhbSBjaGFuZ2UgZm9yIHRoaXMgbWF0Y2gsIC91c2Vycy8xMjMgLT4gL3VzZXJzLzQ1NlxuICAgIGN1cnJlbnRNYXRjaC5wYXRobmFtZSAhPT0gbWF0Y2gucGF0aG5hbWUgfHxcbiAgICAvLyBzcGxhdCBwYXJhbSBjaGFuZ2VkLCB3aGljaCBpcyBub3QgcHJlc2VudCBpbiBtYXRjaC5wYXRoXG4gICAgLy8gZS5nLiAvZmlsZXMvaW1hZ2VzL2F2YXRhci5qcGcgLT4gZmlsZXMvZmluYW5jZXMueGxzXG4gICAgY3VycmVudFBhdGggIT0gbnVsbCAmJiBjdXJyZW50UGF0aC5lbmRzV2l0aChcIipcIikgJiYgY3VycmVudE1hdGNoLnBhcmFtc1tcIipcIl0gIT09IG1hdGNoLnBhcmFtc1tcIipcIl1cbiAgKTtcbn1cbmZ1bmN0aW9uIHNob3VsZFJldmFsaWRhdGVMb2FkZXIobG9hZGVyTWF0Y2gsIGFyZykge1xuICBpZiAobG9hZGVyTWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZSkge1xuICAgIGxldCByb3V0ZUNob2ljZSA9IGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUoYXJnKTtcbiAgICBpZiAodHlwZW9mIHJvdXRlQ2hvaWNlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgcmV0dXJuIHJvdXRlQ2hvaWNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJnLmRlZmF1bHRTaG91bGRSZXZhbGlkYXRlO1xufVxuZnVuY3Rpb24gcGF0Y2hSb3V0ZXNJbXBsKHJvdXRlSWQsIGNoaWxkcmVuLCByb3V0ZXNUb1VzZSwgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcykge1xuICB2YXIgX2NoaWxkcmVuVG9QYXRjaDtcbiAgbGV0IGNoaWxkcmVuVG9QYXRjaDtcbiAgaWYgKHJvdXRlSWQpIHtcbiAgICBsZXQgcm91dGUgPSBtYW5pZmVzdFtyb3V0ZUlkXTtcbiAgICBpbnZhcmlhbnQocm91dGUsIFwiTm8gcm91dGUgZm91bmQgdG8gcGF0Y2ggY2hpbGRyZW4gaW50bzogcm91dGVJZCA9IFwiICsgcm91dGVJZCk7XG4gICAgaWYgKCFyb3V0ZS5jaGlsZHJlbikge1xuICAgICAgcm91dGUuY2hpbGRyZW4gPSBbXTtcbiAgICB9XG4gICAgY2hpbGRyZW5Ub1BhdGNoID0gcm91dGUuY2hpbGRyZW47XG4gIH0gZWxzZSB7XG4gICAgY2hpbGRyZW5Ub1BhdGNoID0gcm91dGVzVG9Vc2U7XG4gIH1cbiAgLy8gRG9uJ3QgcGF0Y2ggaW4gcm91dGVzIHdlIGFscmVhZHkga25vdyBhYm91dCBzbyB0aGF0IGBwYXRjaGAgaXMgaWRlbXBvdGVudFxuICAvLyB0byBzaW1wbGlmeSB1c2VyLWxhbmQgY29kZS4gVGhpcyBpcyB1c2VmdWwgYmVjYXVzZSB3ZSByZS1jYWxsIHRoZVxuICAvLyBgcGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb25gIGZ1bmN0aW9uIGZvciBtYXRjaGVkIHJvdXRlcyB3aXRoIHBhcmFtcy5cbiAgbGV0IHVuaXF1ZUNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKG5ld1JvdXRlID0+ICFjaGlsZHJlblRvUGF0Y2guc29tZShleGlzdGluZ1JvdXRlID0+IGlzU2FtZVJvdXRlKG5ld1JvdXRlLCBleGlzdGluZ1JvdXRlKSkpO1xuICBsZXQgbmV3Um91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyh1bmlxdWVDaGlsZHJlbiwgbWFwUm91dGVQcm9wZXJ0aWVzLCBbcm91dGVJZCB8fCBcIl9cIiwgXCJwYXRjaFwiLCBTdHJpbmcoKChfY2hpbGRyZW5Ub1BhdGNoID0gY2hpbGRyZW5Ub1BhdGNoKSA9PSBudWxsID8gdm9pZCAwIDogX2NoaWxkcmVuVG9QYXRjaC5sZW5ndGgpIHx8IFwiMFwiKV0sIG1hbmlmZXN0KTtcbiAgY2hpbGRyZW5Ub1BhdGNoLnB1c2goLi4ubmV3Um91dGVzKTtcbn1cbmZ1bmN0aW9uIGlzU2FtZVJvdXRlKG5ld1JvdXRlLCBleGlzdGluZ1JvdXRlKSB7XG4gIC8vIE1vc3Qgb3B0aW1hbCBjaGVjayBpcyBieSBpZFxuICBpZiAoXCJpZFwiIGluIG5ld1JvdXRlICYmIFwiaWRcIiBpbiBleGlzdGluZ1JvdXRlICYmIG5ld1JvdXRlLmlkID09PSBleGlzdGluZ1JvdXRlLmlkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gU2Vjb25kIGlzIGJ5IHBhdGhpbmcgZGlmZmVyZW5jZXNcbiAgaWYgKCEobmV3Um91dGUuaW5kZXggPT09IGV4aXN0aW5nUm91dGUuaW5kZXggJiYgbmV3Um91dGUucGF0aCA9PT0gZXhpc3RpbmdSb3V0ZS5wYXRoICYmIG5ld1JvdXRlLmNhc2VTZW5zaXRpdmUgPT09IGV4aXN0aW5nUm91dGUuY2FzZVNlbnNpdGl2ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gUGF0aGxlc3MgbGF5b3V0IHJvdXRlcyBhcmUgdHJpY2tpZXIgc2luY2Ugd2UgbmVlZCB0byBjaGVjayBjaGlsZHJlbi5cbiAgLy8gSWYgdGhleSBoYXZlIG5vIGNoaWxkcmVuIHRoZW4gdGhleSdyZSB0aGUgc2FtZSBhcyBmYXIgYXMgd2UgY2FuIHRlbGxcbiAgaWYgKCghbmV3Um91dGUuY2hpbGRyZW4gfHwgbmV3Um91dGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSAmJiAoIWV4aXN0aW5nUm91dGUuY2hpbGRyZW4gfHwgZXhpc3RpbmdSb3V0ZS5jaGlsZHJlbi5sZW5ndGggPT09IDApKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gT3RoZXJ3aXNlLCB3ZSBsb29rIHRvIHNlZSBpZiBldmVyeSBjaGlsZCBpbiB0aGUgbmV3IHJvdXRlIGlzIGFscmVhZHlcbiAgLy8gcmVwcmVzZW50ZWQgaW4gdGhlIGV4aXN0aW5nIHJvdXRlJ3MgY2hpbGRyZW5cbiAgcmV0dXJuIG5ld1JvdXRlLmNoaWxkcmVuLmV2ZXJ5KChhQ2hpbGQsIGkpID0+IHtcbiAgICB2YXIgX2V4aXN0aW5nUm91dGUkY2hpbGRyO1xuICAgIHJldHVybiAoX2V4aXN0aW5nUm91dGUkY2hpbGRyID0gZXhpc3RpbmdSb3V0ZS5jaGlsZHJlbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9leGlzdGluZ1JvdXRlJGNoaWxkci5zb21lKGJDaGlsZCA9PiBpc1NhbWVSb3V0ZShhQ2hpbGQsIGJDaGlsZCkpO1xuICB9KTtcbn1cbi8qKlxuICogRXhlY3V0ZSByb3V0ZS5sYXp5KCkgbWV0aG9kcyB0byBsYXppbHkgbG9hZCByb3V0ZSBtb2R1bGVzIChsb2FkZXIsIGFjdGlvbixcbiAqIHNob3VsZFJldmFsaWRhdGUpIGFuZCB1cGRhdGUgdGhlIHJvdXRlTWFuaWZlc3QgaW4gcGxhY2Ugd2hpY2ggc2hhcmVzIG9iamVjdHNcbiAqIHdpdGggZGF0YVJvdXRlcyBzbyB0aG9zZSBnZXQgdXBkYXRlZCBhcyB3ZWxsLlxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkTGF6eVJvdXRlTW9kdWxlKHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KSB7XG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbGF6eVJvdXRlID0gYXdhaXQgcm91dGUubGF6eSgpO1xuICAvLyBJZiB0aGUgbGF6eSByb3V0ZSBmdW5jdGlvbiB3YXMgZXhlY3V0ZWQgYW5kIHJlbW92ZWQgYnkgYW5vdGhlciBwYXJhbGxlbFxuICAvLyBjYWxsIHRoZW4gd2UgY2FuIHJldHVybiAtIGZpcnN0IGxhenkoKSB0byBmaW5pc2ggd2lucyBiZWNhdXNlIHRoZSByZXR1cm5cbiAgLy8gdmFsdWUgb2YgbGF6eSBpcyBleHBlY3RlZCB0byBiZSBzdGF0aWNcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCByb3V0ZVRvVXBkYXRlID0gbWFuaWZlc3Rbcm91dGUuaWRdO1xuICBpbnZhcmlhbnQocm91dGVUb1VwZGF0ZSwgXCJObyByb3V0ZSBmb3VuZCBpbiBtYW5pZmVzdFwiKTtcbiAgLy8gVXBkYXRlIHRoZSByb3V0ZSBpbiBwbGFjZS4gIFRoaXMgc2hvdWxkIGJlIHNhZmUgYmVjYXVzZSB0aGVyZSdzIG5vIHdheVxuICAvLyB3ZSBjb3VsZCB5ZXQgYmUgc2l0dGluZyBvbiB0aGlzIHJvdXRlIGFzIHdlIGNhbid0IGdldCB0aGVyZSB3aXRob3V0XG4gIC8vIHJlc29sdmluZyBsYXp5KCkgZmlyc3QuXG4gIC8vXG4gIC8vIFRoaXMgaXMgZGlmZmVyZW50IHRoYW4gdGhlIEhNUiBcInVwZGF0ZVwiIHVzZS1jYXNlIHdoZXJlIHdlIG1heSBhY3RpdmVseSBiZVxuICAvLyBvbiB0aGUgcm91dGUgYmVpbmcgdXBkYXRlZC4gIFRoZSBtYWluIGNvbmNlcm4gYm9pbHMgZG93biB0byBcImRvZXMgdGhpc1xuICAvLyBtdXRhdGlvbiBhZmZlY3QgYW55IG9uZ29pbmcgbmF2aWdhdGlvbnMgb3IgYW55IGN1cnJlbnQgc3RhdGUubWF0Y2hlc1xuICAvLyB2YWx1ZXM/XCIuICBJZiBub3QsIGl0IHNob3VsZCBiZSBzYWZlIHRvIHVwZGF0ZSBpbiBwbGFjZS5cbiAgbGV0IHJvdXRlVXBkYXRlcyA9IHt9O1xuICBmb3IgKGxldCBsYXp5Um91dGVQcm9wZXJ0eSBpbiBsYXp5Um91dGUpIHtcbiAgICBsZXQgc3RhdGljUm91dGVWYWx1ZSA9IHJvdXRlVG9VcGRhdGVbbGF6eVJvdXRlUHJvcGVydHldO1xuICAgIGxldCBpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgPSBzdGF0aWNSb3V0ZVZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAvLyBUaGlzIHByb3BlcnR5IGlzbid0IHN0YXRpYyBzaW5jZSBpdCBzaG91bGQgYWx3YXlzIGJlIHVwZGF0ZWQgYmFzZWRcbiAgICAvLyBvbiB0aGUgcm91dGUgdXBkYXRlc1xuICAgIGxhenlSb3V0ZVByb3BlcnR5ICE9PSBcImhhc0Vycm9yQm91bmRhcnlcIjtcbiAgICB3YXJuaW5nKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQsIFwiUm91dGUgXFxcIlwiICsgcm91dGVUb1VwZGF0ZS5pZCArIFwiXFxcIiBoYXMgYSBzdGF0aWMgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgXCIgKyBcImRlZmluZWQgYnV0IGl0cyBsYXp5IGZ1bmN0aW9uIGlzIGFsc28gcmV0dXJuaW5nIGEgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkuIFwiICsgKFwiVGhlIGxhenkgcm91dGUgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgd2lsbCBiZSBpZ25vcmVkLlwiKSk7XG4gICAgaWYgKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgJiYgIWltbXV0YWJsZVJvdXRlS2V5cy5oYXMobGF6eVJvdXRlUHJvcGVydHkpKSB7XG4gICAgICByb3V0ZVVwZGF0ZXNbbGF6eVJvdXRlUHJvcGVydHldID0gbGF6eVJvdXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cbiAgLy8gTXV0YXRlIHRoZSByb3V0ZSB3aXRoIHRoZSBwcm92aWRlZCB1cGRhdGVzLiAgRG8gdGhpcyBmaXJzdCBzbyB3ZSBwYXNzXG4gIC8vIHRoZSB1cGRhdGVkIHZlcnNpb24gdG8gbWFwUm91dGVQcm9wZXJ0aWVzXG4gIE9iamVjdC5hc3NpZ24ocm91dGVUb1VwZGF0ZSwgcm91dGVVcGRhdGVzKTtcbiAgLy8gTXV0YXRlIHRoZSBgaGFzRXJyb3JCb3VuZGFyeWAgcHJvcGVydHkgb24gdGhlIHJvdXRlIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAvLyB1cGRhdGVzIGFuZCByZW1vdmUgdGhlIGBsYXp5YCBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNvbHZlIHRoZSBsYXp5XG4gIC8vIHJvdXRlIGFnYWluLlxuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIF9leHRlbmRzKHt9LCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGVUb1VwZGF0ZSksIHtcbiAgICBsYXp5OiB1bmRlZmluZWRcbiAgfSkpO1xufVxuLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgZGF0YVN0cmF0ZWd5YCB3aGljaCBmZXRjaGVzIGFsbCBsb2FkZXJzIGluIHBhcmFsbGVsXG5hc3luYyBmdW5jdGlvbiBkZWZhdWx0RGF0YVN0cmF0ZWd5KF9yZWY0KSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gX3JlZjQ7XG4gIGxldCBtYXRjaGVzVG9Mb2FkID0gbWF0Y2hlcy5maWx0ZXIobSA9PiBtLnNob3VsZExvYWQpO1xuICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKG1hdGNoZXNUb0xvYWQubWFwKG0gPT4gbS5yZXNvbHZlKCkpKTtcbiAgcmV0dXJuIHJlc3VsdHMucmVkdWNlKChhY2MsIHJlc3VsdCwgaSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICBbbWF0Y2hlc1RvTG9hZFtpXS5yb3V0ZS5pZF06IHJlc3VsdFxuICB9KSwge30pO1xufVxuYXN5bmMgZnVuY3Rpb24gY2FsbERhdGFTdHJhdGVneUltcGwoZGF0YVN0cmF0ZWd5SW1wbCwgdHlwZSwgc3RhdGUsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMsIGZldGNoZXJLZXksIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIHJlcXVlc3RDb250ZXh0KSB7XG4gIGxldCBsb2FkUm91dGVEZWZpbml0aW9uc1Byb21pc2VzID0gbWF0Y2hlcy5tYXAobSA9PiBtLnJvdXRlLmxhenkgPyBsb2FkTGF6eVJvdXRlTW9kdWxlKG0ucm91dGUsIG1hcFJvdXRlUHJvcGVydGllcywgbWFuaWZlc3QpIDogdW5kZWZpbmVkKTtcbiAgbGV0IGRzTWF0Y2hlcyA9IG1hdGNoZXMubWFwKChtYXRjaCwgaSkgPT4ge1xuICAgIGxldCBsb2FkUm91dGVQcm9taXNlID0gbG9hZFJvdXRlRGVmaW5pdGlvbnNQcm9taXNlc1tpXTtcbiAgICBsZXQgc2hvdWxkTG9hZCA9IG1hdGNoZXNUb0xvYWQuc29tZShtID0+IG0ucm91dGUuaWQgPT09IG1hdGNoLnJvdXRlLmlkKTtcbiAgICAvLyBgcmVzb2x2ZWAgZW5jYXBzdWxhdGVzIHJvdXRlLmxhenkoKSwgZXhlY3V0aW5nIHRoZSBsb2FkZXIvYWN0aW9uLFxuICAgIC8vIGFuZCBtYXBwaW5nIHJldHVybiB2YWx1ZXMvdGhyb3duIGVycm9ycyB0byBhIGBEYXRhU3RyYXRlZ3lSZXN1bHRgLiAgVXNlcnNcbiAgICAvLyBjYW4gcGFzcyBhIGNhbGxiYWNrIHRvIHRha2UgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgZXhlY3V0aW9uXG4gICAgLy8gb2YgdGhlIGxvYWRlci9hY3Rpb25cbiAgICBsZXQgcmVzb2x2ZSA9IGFzeW5jIGhhbmRsZXJPdmVycmlkZSA9PiB7XG4gICAgICBpZiAoaGFuZGxlck92ZXJyaWRlICYmIHJlcXVlc3QubWV0aG9kID09PSBcIkdFVFwiICYmIChtYXRjaC5yb3V0ZS5sYXp5IHx8IG1hdGNoLnJvdXRlLmxvYWRlcikpIHtcbiAgICAgICAgc2hvdWxkTG9hZCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2hvdWxkTG9hZCA/IGNhbGxMb2FkZXJPckFjdGlvbih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbG9hZFJvdXRlUHJvbWlzZSwgaGFuZGxlck92ZXJyaWRlLCByZXF1ZXN0Q29udGV4dCkgOiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIHJlc3VsdDogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgbWF0Y2gsIHtcbiAgICAgIHNob3VsZExvYWQsXG4gICAgICByZXNvbHZlXG4gICAgfSk7XG4gIH0pO1xuICAvLyBTZW5kIGFsbCBtYXRjaGVzIGhlcmUgdG8gYWxsb3cgZm9yIGEgbWlkZGxld2FyZS10eXBlIGltcGxlbWVudGF0aW9uLlxuICAvLyBoYW5kbGVyIHdpbGwgYmUgYSBuby1vcCBmb3IgdW5uZWVkZWQgcm91dGVzIGFuZCB3ZSBmaWx0ZXIgdGhvc2UgcmVzdWx0c1xuICAvLyBiYWNrIG91dCBiZWxvdy5cbiAgbGV0IHJlc3VsdHMgPSBhd2FpdCBkYXRhU3RyYXRlZ3lJbXBsKHtcbiAgICBtYXRjaGVzOiBkc01hdGNoZXMsXG4gICAgcmVxdWVzdCxcbiAgICBwYXJhbXM6IG1hdGNoZXNbMF0ucGFyYW1zLFxuICAgIGZldGNoZXJLZXksXG4gICAgY29udGV4dDogcmVxdWVzdENvbnRleHRcbiAgfSk7XG4gIC8vIFdhaXQgZm9yIGFsbCByb3V0ZXMgdG8gbG9hZCBoZXJlIGJ1dCAnc3dhbGxvdyB0aGUgZXJyb3Igc2luY2Ugd2Ugd2FudFxuICAvLyBpdCB0byBidWJibGUgdXAgZnJvbSB0aGUgYGF3YWl0IGxvYWRSb3V0ZVByb21pc2VgIGluIGBjYWxsTG9hZGVyT3JBY3Rpb25gIC1cbiAgLy8gY2FsbGVkIGZyb20gYG1hdGNoLnJlc29sdmUoKWBcbiAgdHJ5IHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChsb2FkUm91dGVEZWZpbml0aW9uc1Byb21pc2VzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5vLW9wXG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG4vLyBEZWZhdWx0IGxvZ2ljIGZvciBjYWxsaW5nIGEgbG9hZGVyL2FjdGlvbiBpcyB0aGUgdXNlciBoYXMgbm8gc3BlY2lmaWVkIGEgZGF0YVN0cmF0ZWd5XG5hc3luYyBmdW5jdGlvbiBjYWxsTG9hZGVyT3JBY3Rpb24odHlwZSwgcmVxdWVzdCwgbWF0Y2gsIGxvYWRSb3V0ZVByb21pc2UsIGhhbmRsZXJPdmVycmlkZSwgc3RhdGljQ29udGV4dCkge1xuICBsZXQgcmVzdWx0O1xuICBsZXQgb25SZWplY3Q7XG4gIGxldCBydW5IYW5kbGVyID0gaGFuZGxlciA9PiB7XG4gICAgLy8gU2V0dXAgYSBwcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3Qgc28gdGhhdCBhYm9ydCBzaWduYWxzIHNob3J0IGNpcmN1aXRcbiAgICBsZXQgcmVqZWN0O1xuICAgIC8vIFRoaXMgd2lsbCBuZXZlciByZXNvbHZlIHNvIHNhZmUgdG8gdHlwZSBpdCBhcyBQcm9taXNlPERhdGFTdHJhdGVneVJlc3VsdD4gdG9cbiAgICAvLyBzYXRpc2Z5IHRoZSBmdW5jdGlvbiByZXR1cm4gdmFsdWVcbiAgICBsZXQgYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHJlamVjdCA9IHIpO1xuICAgIG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG4gICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICBsZXQgYWN0dWFsSGFuZGxlciA9IGN0eCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiWW91IGNhbm5vdCBjYWxsIHRoZSBoYW5kbGVyIGZvciBhIHJvdXRlIHdoaWNoIGRlZmluZXMgYSBib29sZWFuIFwiICsgKFwiXFxcIlwiICsgdHlwZSArIFwiXFxcIiBbcm91dGVJZDogXCIgKyBtYXRjaC5yb3V0ZS5pZCArIFwiXVwiKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhbmRsZXIoe1xuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBwYXJhbXM6IG1hdGNoLnBhcmFtcyxcbiAgICAgICAgY29udGV4dDogc3RhdGljQ29udGV4dFxuICAgICAgfSwgLi4uKGN0eCAhPT0gdW5kZWZpbmVkID8gW2N0eF0gOiBbXSkpO1xuICAgIH07XG4gICAgbGV0IGhhbmRsZXJQcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCB2YWwgPSBhd2FpdCAoaGFuZGxlck92ZXJyaWRlID8gaGFuZGxlck92ZXJyaWRlKGN0eCA9PiBhY3R1YWxIYW5kbGVyKGN0eCkpIDogYWN0dWFsSGFuZGxlcigpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcImRhdGFcIixcbiAgICAgICAgICByZXN1bHQ6IHZhbFxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICByZXN1bHQ6IGVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KSgpO1xuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW2hhbmRsZXJQcm9taXNlLCBhYm9ydFByb21pc2VdKTtcbiAgfTtcbiAgdHJ5IHtcbiAgICBsZXQgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuICAgIC8vIElmIHdlIGhhdmUgYSByb3V0ZS5sYXp5IHByb21pc2UsIGF3YWl0IHRoYXQgZmlyc3RcbiAgICBpZiAobG9hZFJvdXRlUHJvbWlzZSkge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgLy8gUnVuIHN0YXRpY2FsbHkgZGVmaW5lZCBoYW5kbGVyIGluIHBhcmFsbGVsIHdpdGggbGF6eSgpXG4gICAgICAgIGxldCBoYW5kbGVyRXJyb3I7XG4gICAgICAgIGxldCBbdmFsdWVdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAvLyBJZiB0aGUgaGFuZGxlciB0aHJvd3MsIGRvbid0IGxldCBpdCBpbW1lZGlhdGVseSBidWJibGUgb3V0LFxuICAgICAgICAvLyBzaW5jZSB3ZSBuZWVkIHRvIGxldCB0aGUgbGF6eSgpIGV4ZWN1dGlvbiBmaW5pc2ggc28gd2Uga25vdyBpZiB0aGlzXG4gICAgICAgIC8vIHJvdXRlIGhhcyBhIGJvdW5kYXJ5IHRoYXQgY2FuIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgICAgcnVuSGFuZGxlcihoYW5kbGVyKS5jYXRjaChlID0+IHtcbiAgICAgICAgICBoYW5kbGVyRXJyb3IgPSBlO1xuICAgICAgICB9KSwgbG9hZFJvdXRlUHJvbWlzZV0pO1xuICAgICAgICBpZiAoaGFuZGxlckVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBoYW5kbGVyRXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBMb2FkIGxhenkgcm91dGUgbW9kdWxlLCB0aGVuIHJ1biBhbnkgcmV0dXJuZWQgaGFuZGxlclxuICAgICAgICBhd2FpdCBsb2FkUm91dGVQcm9taXNlO1xuICAgICAgICBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgLy8gSGFuZGxlciBzdGlsbCBydW5zIGV2ZW4gaWYgd2UgZ290IGludGVycnVwdGVkIHRvIG1haW50YWluIGNvbnNpc3RlbmN5XG4gICAgICAgICAgLy8gd2l0aCB1bi1hYm9ydGFibGUgYmVoYXZpb3Igb2YgaGFuZGxlciBleGVjdXRpb24gb24gbm9uLWxhenkgb3JcbiAgICAgICAgICAvLyBwcmV2aW91c2x5LWxhenktbG9hZGVkIHJvdXRlc1xuICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJhY3Rpb25cIikge1xuICAgICAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgICAgICBsZXQgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICByb3V0ZUlkOiBtYXRjaC5yb3V0ZS5pZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGxhenkoKSByb3V0ZSBoYXMgbm8gbG9hZGVyIHRvIHJ1bi4gIFNob3J0IGNpcmN1aXQgaGVyZSBzbyB3ZSBkb24ndFxuICAgICAgICAgIC8vIGhpdCB0aGUgaW52YXJpYW50IGJlbG93IHRoYXQgZXJyb3JzIG9uIHJldHVybmluZyB1bmRlZmluZWQuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgICAgIHJlc3VsdDogdW5kZWZpbmVkXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgfVxuICAgIGludmFyaWFudChyZXN1bHQucmVzdWx0ICE9PSB1bmRlZmluZWQsIFwiWW91IGRlZmluZWQgXCIgKyAodHlwZSA9PT0gXCJhY3Rpb25cIiA/IFwiYW4gYWN0aW9uXCIgOiBcImEgbG9hZGVyXCIpICsgXCIgZm9yIHJvdXRlIFwiICsgKFwiXFxcIlwiICsgbWF0Y2gucm91dGUuaWQgKyBcIlxcXCIgYnV0IGRpZG4ndCByZXR1cm4gYW55dGhpbmcgZnJvbSB5b3VyIGBcIiArIHR5cGUgKyBcImAgXCIpICsgXCJmdW5jdGlvbi4gUGxlYXNlIHJldHVybiBhIHZhbHVlIG9yIGBudWxsYC5cIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBXZSBzaG91bGQgYWxyZWFkeSBiZSBjYXRjaGluZyBhbmQgY29udmVydGluZyBub3JtYWwgaGFuZGxlciBleGVjdXRpb25zIHRvXG4gICAgLy8gRGF0YVN0cmF0ZWd5UmVzdWx0cyBhbmQgcmV0dXJuaW5nIHRoZW0sIHNvIGFueXRoaW5nIHRoYXQgdGhyb3dzIGhlcmUgaXMgYW5cbiAgICAvLyB1bmV4cGVjdGVkIGVycm9yIHdlIHN0aWxsIG5lZWQgdG8gd3JhcFxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgcmVzdWx0OiBlXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAob25SZWplY3QpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvblJlamVjdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5hc3luYyBmdW5jdGlvbiBjb252ZXJ0RGF0YVN0cmF0ZWd5UmVzdWx0VG9EYXRhUmVzdWx0KGRhdGFTdHJhdGVneVJlc3VsdCkge1xuICBsZXQge1xuICAgIHJlc3VsdCxcbiAgICB0eXBlXG4gIH0gPSBkYXRhU3RyYXRlZ3lSZXN1bHQ7XG4gIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICBsZXQgZGF0YTtcbiAgICB0cnkge1xuICAgICAgbGV0IGNvbnRlbnRUeXBlID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuICAgICAgLy8gQ2hlY2sgYmV0d2VlbiB3b3JkIGJvdW5kYXJpZXMgaW5zdGVhZCBvZiBzdGFydHNXaXRoKCkgZHVlIHRvIHRoZSBsYXN0XG4gICAgICAvLyBwYXJhZ3JhcGggb2YgaHR0cHM6Ly9odHRwd2cub3JnL3NwZWNzL3JmYzkxMTAuaHRtbCNmaWVsZC5jb250ZW50LXR5cGVcbiAgICAgIGlmIChjb250ZW50VHlwZSAmJiAvXFxiYXBwbGljYXRpb25cXC9qc29uXFxiLy50ZXN0KGNvbnRlbnRUeXBlKSkge1xuICAgICAgICBpZiAocmVzdWx0LmJvZHkgPT0gbnVsbCkge1xuICAgICAgICAgIGRhdGEgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSBhd2FpdCByZXN1bHQuanNvbigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gYXdhaXQgcmVzdWx0LnRleHQoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBuZXcgRXJyb3JSZXNwb25zZUltcGwocmVzdWx0LnN0YXR1cywgcmVzdWx0LnN0YXR1c1RleHQsIGRhdGEpLFxuICAgICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgaWYgKGlzRGF0YVdpdGhSZXNwb25zZUluaXQocmVzdWx0KSkge1xuICAgICAgdmFyIF9yZXN1bHQkaW5pdDI7XG4gICAgICBpZiAocmVzdWx0LmRhdGEgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB2YXIgX3Jlc3VsdCRpbml0O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgZXJyb3I6IHJlc3VsdC5kYXRhLFxuICAgICAgICAgIHN0YXR1c0NvZGU6IChfcmVzdWx0JGluaXQgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdC5zdGF0dXNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIC8vIENvbnZlcnQgdGhyb3duIGRhdGEoKSB0byBFcnJvclJlc3BvbnNlIGluc3RhbmNlc1xuICAgICAgcmVzdWx0ID0gbmV3IEVycm9yUmVzcG9uc2VJbXBsKCgoX3Jlc3VsdCRpbml0MiA9IHJlc3VsdC5pbml0KSA9PSBudWxsID8gdm9pZCAwIDogX3Jlc3VsdCRpbml0Mi5zdGF0dXMpIHx8IDUwMCwgdW5kZWZpbmVkLCByZXN1bHQuZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgZXJyb3I6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdCkgPyByZXN1bHQuc3RhdHVzIDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuICBpZiAoaXNEZWZlcnJlZERhdGEocmVzdWx0KSkge1xuICAgIHZhciBfcmVzdWx0JGluaXQzLCBfcmVzdWx0JGluaXQ0O1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRlZmVycmVkLFxuICAgICAgZGVmZXJyZWREYXRhOiByZXN1bHQsXG4gICAgICBzdGF0dXNDb2RlOiAoX3Jlc3VsdCRpbml0MyA9IHJlc3VsdC5pbml0KSA9PSBudWxsID8gdm9pZCAwIDogX3Jlc3VsdCRpbml0My5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiAoKF9yZXN1bHQkaW5pdDQgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDQuaGVhZGVycykgJiYgbmV3IEhlYWRlcnMocmVzdWx0LmluaXQuaGVhZGVycylcbiAgICB9O1xuICB9XG4gIGlmIChpc0RhdGFXaXRoUmVzcG9uc2VJbml0KHJlc3VsdCkpIHtcbiAgICB2YXIgX3Jlc3VsdCRpbml0NSwgX3Jlc3VsdCRpbml0NjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiAoX3Jlc3VsdCRpbml0NSA9IHJlc3VsdC5pbml0KSA9PSBudWxsID8gdm9pZCAwIDogX3Jlc3VsdCRpbml0NS5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiAoX3Jlc3VsdCRpbml0NiA9IHJlc3VsdC5pbml0KSAhPSBudWxsICYmIF9yZXN1bHQkaW5pdDYuaGVhZGVycyA/IG5ldyBIZWFkZXJzKHJlc3VsdC5pbml0LmhlYWRlcnMpIDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICBkYXRhOiByZXN1bHRcbiAgfTtcbn1cbi8vIFN1cHBvcnQgcmVsYXRpdmUgcm91dGluZyBpbiBpbnRlcm5hbCByZWRpcmVjdHNcbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlbGF0aXZlUm91dGluZ1JlZGlyZWN0UmVzcG9uc2UocmVzcG9uc2UsIHJlcXVlc3QsIHJvdXRlSWQsIG1hdGNoZXMsIGJhc2VuYW1lLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICBsZXQgbG9jYXRpb24gPSByZXNwb25zZS5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICBpbnZhcmlhbnQobG9jYXRpb24sIFwiUmVkaXJlY3RzIHJldHVybmVkL3Rocm93biBmcm9tIGxvYWRlcnMvYWN0aW9ucyBtdXN0IGhhdmUgYSBMb2NhdGlvbiBoZWFkZXJcIik7XG4gIGlmICghQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgbGV0IHRyaW1tZWRNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpICsgMSk7XG4gICAgbG9jYXRpb24gPSBub3JtYWxpemVUbyhuZXcgVVJMKHJlcXVlc3QudXJsKSwgdHJpbW1lZE1hdGNoZXMsIGJhc2VuYW1lLCB0cnVlLCBsb2NhdGlvbiwgdjdfcmVsYXRpdmVTcGxhdFBhdGgpO1xuICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgbG9jYXRpb24pO1xuICB9XG4gIHJldHVybiByZXNwb25zZTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlZGlyZWN0TG9jYXRpb24obG9jYXRpb24sIGN1cnJlbnRVcmwsIGJhc2VuYW1lKSB7XG4gIGlmIChBQlNPTFVURV9VUkxfUkVHRVgudGVzdChsb2NhdGlvbikpIHtcbiAgICAvLyBTdHJpcCBvZmYgdGhlIHByb3RvY29sK29yaWdpbiBmb3Igc2FtZS1vcmlnaW4gKyBzYW1lLWJhc2VuYW1lIGFic29sdXRlIHJlZGlyZWN0c1xuICAgIGxldCBub3JtYWxpemVkTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICBsZXQgdXJsID0gbm9ybWFsaXplZExvY2F0aW9uLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIG5vcm1hbGl6ZWRMb2NhdGlvbikgOiBuZXcgVVJMKG5vcm1hbGl6ZWRMb2NhdGlvbik7XG4gICAgbGV0IGlzU2FtZUJhc2VuYW1lID0gc3RyaXBCYXNlbmFtZSh1cmwucGF0aG5hbWUsIGJhc2VuYW1lKSAhPSBudWxsO1xuICAgIGlmICh1cmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBpc1NhbWVCYXNlbmFtZSkge1xuICAgICAgcmV0dXJuIHVybC5wYXRobmFtZSArIHVybC5zZWFyY2ggKyB1cmwuaGFzaDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuLy8gVXRpbGl0eSBtZXRob2QgZm9yIGNyZWF0aW5nIHRoZSBSZXF1ZXN0IGluc3RhbmNlcyBmb3IgbG9hZGVycy9hY3Rpb25zIGR1cmluZ1xuLy8gY2xpZW50LXNpZGUgbmF2aWdhdGlvbnMgYW5kIGZldGNoZXMuICBEdXJpbmcgU1NSIHdlIHdpbGwgYWx3YXlzIGhhdmUgYVxuLy8gUmVxdWVzdCBpbnN0YW5jZSBmcm9tIHRoZSBzdGF0aWMgaGFuZGxlciAocXVlcnkvcXVlcnlSb3V0ZSlcbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGhpc3RvcnksIGxvY2F0aW9uLCBzaWduYWwsIHN1Ym1pc3Npb24pIHtcbiAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0cmlwSGFzaEZyb21QYXRoKGxvY2F0aW9uKSkudG9TdHJpbmcoKTtcbiAgbGV0IGluaXQgPSB7XG4gICAgc2lnbmFsXG4gIH07XG4gIGlmIChzdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgIGxldCB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGVcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICAvLyBEaWRuJ3QgdGhpbmsgd2UgbmVlZGVkIHRoaXMgYnV0IGl0IHR1cm5zIG91dCB1bmxpa2Ugb3RoZXIgbWV0aG9kcywgcGF0Y2hcbiAgICAvLyB3b24ndCBiZSBwcm9wZXJseSBub3JtYWxpemVkIHRvIHVwcGVyY2FzZSBhbmQgcmVzdWx0cyBpbiBhIDQwNSBlcnJvci5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW1ldGhvZFxuICAgIGluaXQubWV0aG9kID0gZm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgIGluaXQuaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogZm9ybUVuY1R5cGVcbiAgICAgIH0pO1xuICAgICAgaW5pdC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoc3VibWlzc2lvbi5qc29uKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBzdWJtaXNzaW9uLnRleHQ7XG4gICAgfSBlbHNlIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiAmJiBzdWJtaXNzaW9uLmZvcm1EYXRhKSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKHN1Ym1pc3Npb24uZm9ybURhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IHN1Ym1pc3Npb24uZm9ybURhdGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xufVxuZnVuY3Rpb24gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGEpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2NvbnZlcnRpbmctYW4tZW50cnktbGlzdC10by1hLWxpc3Qtb2YtbmFtZS12YWx1ZS1wYWlyc1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZSA6IHZhbHVlLm5hbWUpO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5mdW5jdGlvbiBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpIHtcbiAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBzZWFyY2hQYXJhbXMuZW50cmllcygpKSB7XG4gICAgZm9ybURhdGEuYXBwZW5kKGtleSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmb3JtRGF0YTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgcmVzdWx0cywgcGVuZGluZ0FjdGlvblJlc3VsdCwgYWN0aXZlRGVmZXJyZWRzLCBza2lwTG9hZGVyRXJyb3JCdWJibGluZykge1xuICAvLyBGaWxsIGluIGxvYWRlckRhdGEvZXJyb3JzIGZyb20gb3VyIGxvYWRlcnNcbiAgbGV0IGxvYWRlckRhdGEgPSB7fTtcbiAgbGV0IGVycm9ycyA9IG51bGw7XG4gIGxldCBzdGF0dXNDb2RlO1xuICBsZXQgZm91bmRFcnJvciA9IGZhbHNlO1xuICBsZXQgbG9hZGVySGVhZGVycyA9IHt9O1xuICBsZXQgcGVuZGluZ0Vycm9yID0gcGVuZGluZ0FjdGlvblJlc3VsdCAmJiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8gcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5lcnJvciA6IHVuZGVmaW5lZDtcbiAgLy8gUHJvY2VzcyBsb2FkZXIgcmVzdWx0cyBpbnRvIHN0YXRlLmxvYWRlckRhdGEvc3RhdGUuZXJyb3JzXG4gIG1hdGNoZXMuZm9yRWFjaChtYXRjaCA9PiB7XG4gICAgaWYgKCEobWF0Y2gucm91dGUuaWQgaW4gcmVzdWx0cykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGlkID0gbWF0Y2gucm91dGUuaWQ7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaWRdO1xuICAgIGludmFyaWFudCghaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpLCBcIkNhbm5vdCBoYW5kbGUgcmVkaXJlY3QgcmVzdWx0cyBpbiBwcm9jZXNzTG9hZGVyRGF0YVwiKTtcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3I7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZyBhY3Rpb24gZXJyb3IsIHdlIHJlcG9ydCBpdCBhdCB0aGUgaGlnaGVzdC1yb3V0ZVxuICAgICAgLy8gdGhhdCB0aHJvd3MgYSBsb2FkZXIgZXJyb3IsIGFuZCB0aGVuIGNsZWFyIGl0IG91dCB0byBpbmRpY2F0ZSB0aGF0XG4gICAgICAvLyBpdCB3YXMgY29uc3VtZWRcbiAgICAgIGlmIChwZW5kaW5nRXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlcnJvciA9IHBlbmRpbmdFcnJvcjtcbiAgICAgICAgcGVuZGluZ0Vycm9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IHt9O1xuICAgICAgaWYgKHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nKSB7XG4gICAgICAgIGVycm9yc1tpZF0gPSBlcnJvcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIExvb2sgdXB3YXJkcyBmcm9tIHRoZSBtYXRjaGVkIHJvdXRlIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvclxuICAgICAgICAvLyBib3VuZGFyeSwgZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaC4gIFByZWZlciBoaWdoZXIgZXJyb3IgdmFsdWVzXG4gICAgICAgIC8vIGlmIGxvd2VyIGVycm9ycyBidWJibGUgdG8gdGhlIHNhbWUgYm91bmRhcnlcbiAgICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGlkKTtcbiAgICAgICAgaWYgKGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9PSBudWxsKSB7XG4gICAgICAgICAgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID0gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENsZWFyIG91ciBhbnkgcHJpb3IgbG9hZGVyRGF0YSBmb3IgdGhlIHRocm93aW5nIHJvdXRlXG4gICAgICBsb2FkZXJEYXRhW2lkXSA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIE9uY2Ugd2UgZmluZCBvdXIgZmlyc3QgKGhpZ2hlc3QpIGVycm9yLCB3ZSBzZXQgdGhlIHN0YXR1cyBjb2RlIGFuZFxuICAgICAgLy8gcHJldmVudCBkZWVwZXIgc3RhdHVzIGNvZGVzIGZyb20gb3ZlcnJpZGluZ1xuICAgICAgaWYgKCFmb3VuZEVycm9yKSB7XG4gICAgICAgIGZvdW5kRXJyb3IgPSB0cnVlO1xuICAgICAgICBzdGF0dXNDb2RlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDA7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuc2V0KGlkLCByZXN1bHQuZGVmZXJyZWREYXRhKTtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGE7XG4gICAgICAgIC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuICAgICAgICBpZiAocmVzdWx0LnN0YXR1c0NvZGUgIT0gbnVsbCAmJiByZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwICYmICFmb3VuZEVycm9yKSB7XG4gICAgICAgICAgc3RhdHVzQ29kZSA9IHJlc3VsdC5zdGF0dXNDb2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRhdGE7XG4gICAgICAgIC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuICAgICAgICBpZiAocmVzdWx0LnN0YXR1c0NvZGUgJiYgcmVzdWx0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiAhZm91bmRFcnJvcikge1xuICAgICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlLiAgQWxzbyBjbGVhciBvdXQgYW55IGxvYWRlckRhdGEgZm9yIHRoZVxuICAvLyB0aHJvd2luZyByb3V0ZVxuICBpZiAocGVuZGluZ0Vycm9yICE9PSB1bmRlZmluZWQgJiYgcGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICAgIGVycm9ycyA9IHtcbiAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0Vycm9yXG4gICAgfTtcbiAgICBsb2FkZXJEYXRhW3BlbmRpbmdBY3Rpb25SZXN1bHRbMF1dID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSB8fCAyMDAsXG4gICAgbG9hZGVySGVhZGVyc1xuICB9O1xufVxuZnVuY3Rpb24gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIG1hdGNoZXMsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25SZXN1bHQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKSB7XG4gIGxldCB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnNcbiAgfSA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgcmVzdWx0cywgcGVuZGluZ0FjdGlvblJlc3VsdCwgYWN0aXZlRGVmZXJyZWRzLCBmYWxzZSAvLyBUaGlzIG1ldGhvZCBpcyBvbmx5IGNhbGxlZCBjbGllbnQgc2lkZSBzbyB3ZSBhbHdheXMgd2FudCB0byBidWJibGVcbiAgKTtcbiAgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICBsZXQge1xuICAgICAga2V5LFxuICAgICAgbWF0Y2gsXG4gICAgICBjb250cm9sbGVyXG4gICAgfSA9IHJmO1xuICAgIGxldCByZXN1bHQgPSBmZXRjaGVyUmVzdWx0c1trZXldO1xuICAgIGludmFyaWFudChyZXN1bHQsIFwiRGlkIG5vdCBmaW5kIGNvcnJlc3BvbmRpbmcgZmV0Y2hlciByZXN1bHRcIik7XG4gICAgLy8gUHJvY2VzcyBmZXRjaGVyIG5vbi1yZWRpcmVjdCBlcnJvcnNcbiAgICBpZiAoY29udHJvbGxlciAmJiBjb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvIGZvciBhYm9ydGVkIGZldGNoZXJzXG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCBtYXRjaCA9PSBudWxsID8gdm9pZCAwIDogbWF0Y2gucm91dGUuaWQpO1xuICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHtcbiAgICAgICAgZXJyb3JzID0gX2V4dGVuZHMoe30sIGVycm9ycywge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgfSBlbHNlIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgcmVkaXJlY3RzIHNob3VsZCBnZXQgcHJvY2Vzc2VkIGFib3ZlLCBidXQgd2VcbiAgICAgIC8vIGtlZXAgdGhpcyB0byB0eXBlIG5hcnJvdyB0byBhIHN1Y2Nlc3MgcmVzdWx0IGluIHRoZSBlbHNlXG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiVW5oYW5kbGVkIGZldGNoZXIgcmV2YWxpZGF0aW9uIHJlZGlyZWN0XCIpO1xuICAgIH0gZWxzZSBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIGRlZmVycmVkIGRhdGEgc2hvdWxkIGJlIGF3YWl0ZWQgZm9yIGZldGNoZXJzXG4gICAgICAvLyBpbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzXG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIocmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnNcbiAgfTtcbn1cbmZ1bmN0aW9uIG1lcmdlTG9hZGVyRGF0YShsb2FkZXJEYXRhLCBuZXdMb2FkZXJEYXRhLCBtYXRjaGVzLCBlcnJvcnMpIHtcbiAgbGV0IG1lcmdlZExvYWRlckRhdGEgPSBfZXh0ZW5kcyh7fSwgbmV3TG9hZGVyRGF0YSk7XG4gIGZvciAobGV0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICBsZXQgaWQgPSBtYXRjaC5yb3V0ZS5pZDtcbiAgICBpZiAobmV3TG9hZGVyRGF0YS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIGlmIChuZXdMb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbmV3TG9hZGVyRGF0YVtpZF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkICYmIG1hdGNoLnJvdXRlLmxvYWRlcikge1xuICAgICAgLy8gUHJlc2VydmUgZXhpc3Rpbmcga2V5cyBub3QgaW5jbHVkZWQgaW4gbmV3TG9hZGVyRGF0YSBhbmQgd2hlcmUgYSBsb2FkZXJcbiAgICAgIC8vIHdhc24ndCByZW1vdmVkIGJ5IEhNUlxuICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBsb2FkZXJEYXRhW2lkXTtcbiAgICB9XG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAvLyBEb24ndCBrZWVwIGFueSBsb2FkZXIgZGF0YSBiZWxvdyB0aGUgYm91bmRhcnlcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWVyZ2VkTG9hZGVyRGF0YTtcbn1cbmZ1bmN0aW9uIGdldEFjdGlvbkRhdGFGb3JDb21taXQocGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICBpZiAoIXBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgcmV0dXJuIGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkgPyB7XG4gICAgLy8gQ2xlYXIgb3V0IHByaW9yIGFjdGlvbkRhdGEgb24gZXJyb3JzXG4gICAgYWN0aW9uRGF0YToge31cbiAgfSA6IHtcbiAgICBhY3Rpb25EYXRhOiB7XG4gICAgICBbcGVuZGluZ0FjdGlvblJlc3VsdFswXV06IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZGF0YVxuICAgIH1cbiAgfTtcbn1cbi8vIEZpbmQgdGhlIG5lYXJlc3QgZXJyb3IgYm91bmRhcnksIGxvb2tpbmcgdXB3YXJkcyBmcm9tIHRoZSBsZWFmIHJvdXRlIChvciB0aGVcbi8vIHJvdXRlIHNwZWNpZmllZCBieSByb3V0ZUlkKSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgZXJyb3IgYm91bmRhcnksXG4vLyBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG5mdW5jdGlvbiBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIHJvdXRlSWQpIHtcbiAgbGV0IGVsaWdpYmxlTWF0Y2hlcyA9IHJvdXRlSWQgPyBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgKyAxKSA6IFsuLi5tYXRjaGVzXTtcbiAgcmV0dXJuIGVsaWdpYmxlTWF0Y2hlcy5yZXZlcnNlKCkuZmluZChtID0+IG0ucm91dGUuaGFzRXJyb3JCb3VuZGFyeSA9PT0gdHJ1ZSkgfHwgbWF0Y2hlc1swXTtcbn1cbmZ1bmN0aW9uIGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzKSB7XG4gIC8vIFByZWZlciBhIHJvb3QgbGF5b3V0IHJvdXRlIGlmIHByZXNlbnQsIG90aGVyd2lzZSBzaGltIGluIGEgcm91dGUgb2JqZWN0XG4gIGxldCByb3V0ZSA9IHJvdXRlcy5sZW5ndGggPT09IDEgPyByb3V0ZXNbMF0gOiByb3V0ZXMuZmluZChyID0+IHIuaW5kZXggfHwgIXIucGF0aCB8fCByLnBhdGggPT09IFwiL1wiKSB8fCB7XG4gICAgaWQ6IFwiX19zaGltLWVycm9yLXJvdXRlX19cIlxuICB9O1xuICByZXR1cm4ge1xuICAgIG1hdGNoZXM6IFt7XG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgICBwYXRobmFtZUJhc2U6IFwiXCIsXG4gICAgICByb3V0ZVxuICAgIH1dLFxuICAgIHJvdXRlXG4gIH07XG59XG5mdW5jdGlvbiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKHN0YXR1cywgX3RlbXA1KSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUsXG4gICAgcm91dGVJZCxcbiAgICBtZXRob2QsXG4gICAgdHlwZSxcbiAgICBtZXNzYWdlXG4gIH0gPSBfdGVtcDUgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA1O1xuICBsZXQgc3RhdHVzVGV4dCA9IFwiVW5rbm93biBTZXJ2ZXIgRXJyb3JcIjtcbiAgbGV0IGVycm9yTWVzc2FnZSA9IFwiVW5rbm93biBAcmVtaXgtcnVuL3JvdXRlciBlcnJvclwiO1xuICBpZiAoc3RhdHVzID09PSA0MDApIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJCYWQgUmVxdWVzdFwiO1xuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kICsgXCIgcmVxdWVzdCB0byBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIiBidXQgXCIgKyAoXCJkaWQgbm90IHByb3ZpZGUgYSBgbG9hZGVyYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkZWZlci1hY3Rpb25cIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJpbnZhbGlkLWJvZHlcIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJVbmFibGUgdG8gZW5jb2RlIHN1Ym1pc3Npb24gYm9keVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgIHN0YXR1c1RleHQgPSBcIkZvcmJpZGRlblwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiUm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiBkb2VzIG5vdCBtYXRjaCBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgIHN0YXR1c1RleHQgPSBcIk5vdCBGb3VuZFwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiTm8gcm91dGUgbWF0Y2hlcyBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNSkge1xuICAgIHN0YXR1c1RleHQgPSBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiO1xuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhbiBgYWN0aW9uYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgcmVxdWVzdCBtZXRob2QgXFxcIlwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIlxcXCJcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBFcnJvclJlc3BvbnNlSW1wbChzdGF0dXMgfHwgNTAwLCBzdGF0dXNUZXh0LCBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSwgdHJ1ZSk7XG59XG4vLyBGaW5kIGFueSByZXR1cm5lZCByZWRpcmVjdCBlcnJvcnMsIHN0YXJ0aW5nIGZyb20gdGhlIGxvd2VzdCBtYXRjaFxuZnVuY3Rpb24gZmluZFJlZGlyZWN0KHJlc3VsdHMpIHtcbiAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhyZXN1bHRzKTtcbiAgZm9yIChsZXQgaSA9IGVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgW2tleSwgcmVzdWx0XSA9IGVudHJpZXNbaV07XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5LFxuICAgICAgICByZXN1bHRcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgocGF0aCkgOiBwYXRoO1xuICByZXR1cm4gY3JlYXRlUGF0aChfZXh0ZW5kcyh7fSwgcGFyc2VkUGF0aCwge1xuICAgIGhhc2g6IFwiXCJcbiAgfSkpO1xufVxuZnVuY3Rpb24gaXNIYXNoQ2hhbmdlT25seShhLCBiKSB7XG4gIGlmIChhLnBhdGhuYW1lICE9PSBiLnBhdGhuYW1lIHx8IGEuc2VhcmNoICE9PSBiLnNlYXJjaCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYS5oYXNoID09PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UgLT4gL3BhZ2UjaGFzaFxuICAgIHJldHVybiBiLmhhc2ggIT09IFwiXCI7XG4gIH0gZWxzZSBpZiAoYS5oYXNoID09PSBiLmhhc2gpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChiLmhhc2ggIT09IFwiXCIpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI290aGVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gSWYgdGhlIGhhc2ggaXMgcmVtb3ZlZCB0aGUgYnJvd3NlciB3aWxsIHJlLXBlcmZvcm0gYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcbiAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0RhdGFTdHJhdGVneVJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdCAhPSBudWxsICYmIHR5cGVvZiByZXN1bHQgPT09IFwib2JqZWN0XCIgJiYgXCJ0eXBlXCIgaW4gcmVzdWx0ICYmIFwicmVzdWx0XCIgaW4gcmVzdWx0ICYmIChyZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKTtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3REYXRhU3RyYXRlZ3lSZXN1bHRSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdC5yZXN1bHQpICYmIHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHJlc3VsdC5yZXN1bHQuc3RhdHVzKTtcbn1cbmZ1bmN0aW9uIGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kZWZlcnJlZDtcbn1cbmZ1bmN0aW9uIGlzRXJyb3JSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcjtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiAocmVzdWx0ICYmIHJlc3VsdC50eXBlKSA9PT0gUmVzdWx0VHlwZS5yZWRpcmVjdDtcbn1cbmZ1bmN0aW9uIGlzRGF0YVdpdGhSZXNwb25zZUluaXQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPSBudWxsICYmIFwidHlwZVwiIGluIHZhbHVlICYmIFwiZGF0YVwiIGluIHZhbHVlICYmIFwiaW5pdFwiIGluIHZhbHVlICYmIHZhbHVlLnR5cGUgPT09IFwiRGF0YVdpdGhSZXNwb25zZUluaXRcIjtcbn1cbmZ1bmN0aW9uIGlzRGVmZXJyZWREYXRhKHZhbHVlKSB7XG4gIGxldCBkZWZlcnJlZCA9IHZhbHVlO1xuICByZXR1cm4gZGVmZXJyZWQgJiYgdHlwZW9mIGRlZmVycmVkID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBkZWZlcnJlZC5kYXRhID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBkZWZlcnJlZC5zdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZGVmZXJyZWQuY2FuY2VsID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlZmVycmVkLnJlc29sdmVEYXRhID09PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHZhbHVlLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlLmhlYWRlcnMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLmJvZHkgIT09IFwidW5kZWZpbmVkXCI7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzcG9uc2UocmVzdWx0KSB7XG4gIGlmICghaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzO1xuICBsZXQgbG9jYXRpb24gPSByZXN1bHQuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgcmV0dXJuIHN0YXR1cyA+PSAzMDAgJiYgc3RhdHVzIDw9IDM5OSAmJiBsb2NhdGlvbiAhPSBudWxsO1xufVxuZnVuY3Rpb24gaXNWYWxpZE1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkUmVxdWVzdE1ldGhvZHMuaGFzKG1ldGhvZC50b0xvd2VyQ2FzZSgpKTtcbn1cbmZ1bmN0aW9uIGlzTXV0YXRpb25NZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiB2YWxpZE11dGF0aW9uTWV0aG9kcy5oYXMobWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZU5hdmlnYXRpb25EZWZlcnJlZFJlc3VsdHMobWF0Y2hlcywgcmVzdWx0cywgc2lnbmFsLCBjdXJyZW50TWF0Y2hlcywgY3VycmVudExvYWRlckRhdGEpIHtcbiAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhyZXN1bHRzKTtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IFtyb3V0ZUlkLCByZXN1bHRdID0gZW50cmllc1tpbmRleF07XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hlcy5maW5kKG0gPT4gKG0gPT0gbnVsbCA/IHZvaWQgMCA6IG0ucm91dGUuaWQpID09PSByb3V0ZUlkKTtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbWF0Y2gsIHRoZW4gd2UgY2FuIGhhdmUgYSBkZWZlcnJlZCByZXN1bHQgdG8gZG9cbiAgICAvLyBhbnl0aGluZyB3aXRoLiAgVGhpcyBpcyBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXJzIHdoZXJlIHRoZSByb3V0ZSB3YXNcbiAgICAvLyByZW1vdmVkIGR1cmluZyBITVJcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbGV0IGN1cnJlbnRNYXRjaCA9IGN1cnJlbnRNYXRjaGVzLmZpbmQobSA9PiBtLnJvdXRlLmlkID09PSBtYXRjaC5yb3V0ZS5pZCk7XG4gICAgbGV0IGlzUmV2YWxpZGF0aW5nTG9hZGVyID0gY3VycmVudE1hdGNoICE9IG51bGwgJiYgIWlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSAmJiAoY3VycmVudExvYWRlckRhdGEgJiYgY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdKSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgaXNSZXZhbGlkYXRpbmdMb2FkZXIpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgZmFsc2UpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdHNbcm91dGVJZF0gPSByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUZldGNoZXJEZWZlcnJlZFJlc3VsdHMobWF0Y2hlcywgcmVzdWx0cywgcmV2YWxpZGF0aW5nRmV0Y2hlcnMpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCB7XG4gICAgICBrZXksXG4gICAgICByb3V0ZUlkLFxuICAgICAgY29udHJvbGxlclxuICAgIH0gPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tpbmRleF07XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNba2V5XTtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzLmZpbmQobSA9PiAobSA9PSBudWxsID8gdm9pZCAwIDogbS5yb3V0ZS5pZCkgPT09IHJvdXRlSWQpO1xuICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBtYXRjaCwgdGhlbiB3ZSBjYW4gaGF2ZSBhIGRlZmVycmVkIHJlc3VsdCB0byBkb1xuICAgIC8vIGFueXRoaW5nIHdpdGguICBUaGlzIGlzIGZvciByZXZhbGlkYXRpbmcgZmV0Y2hlcnMgd2hlcmUgdGhlIHJvdXRlIHdhc1xuICAgIC8vIHJlbW92ZWQgZHVyaW5nIEhNUlxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBOb3RlOiB3ZSBkbyBub3QgaGF2ZSB0byB0b3VjaCBhY3RpdmVEZWZlcnJlZHMgaGVyZSBzaW5jZSB3ZSByYWNlIHRoZW1cbiAgICAgIC8vIGFnYWluc3QgdGhlIHNpZ25hbCBpbiByZXNvbHZlRGVmZXJyZWREYXRhIGFuZCB0aGV5J2xsIGdldCBhYm9ydGVkXG4gICAgICAvLyB0aGVyZSBpZiBuZWVkZWRcbiAgICAgIGludmFyaWFudChjb250cm9sbGVyLCBcIkV4cGVjdGVkIGFuIEFib3J0Q29udHJvbGxlciBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXIgZGVmZXJyZWQgcmVzdWx0XCIpO1xuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIGNvbnRyb2xsZXIuc2lnbmFsLCB0cnVlKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2tleV0gPSByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgdW53cmFwKSB7XG4gIGlmICh1bndyYXAgPT09IHZvaWQgMCkge1xuICAgIHVud3JhcCA9IGZhbHNlO1xuICB9XG4gIGxldCBhYm9ydGVkID0gYXdhaXQgcmVzdWx0LmRlZmVycmVkRGF0YS5yZXNvbHZlRGF0YShzaWduYWwpO1xuICBpZiAoYWJvcnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodW53cmFwKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS51bndyYXBwZWREYXRhXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIEhhbmRsZSBhbnkgVHJhY2tlZFByb21pc2UuX2Vycm9yIHZhbHVlcyBlbmNvdW50ZXJlZCB3aGlsZSB1bndyYXBwaW5nXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhXG4gIH07XG59XG5mdW5jdGlvbiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoKSB7XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCkuZ2V0QWxsKFwiaW5kZXhcIikuc29tZSh2ID0+IHYgPT09IFwiXCIpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pIHtcbiAgbGV0IHNlYXJjaCA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbikuc2VhcmNoIDogbG9jYXRpb24uc2VhcmNoO1xuICBpZiAobWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmluZGV4ICYmIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2ggfHwgXCJcIikpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGxlYWYgaW5kZXggcm91dGUgd2hlbiBpbmRleCBpcyBwcmVzZW50XG4gICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBPdGhlcndpc2UgZ3JhYiB0aGUgZGVlcGVzdCBcInBhdGggY29udHJpYnV0aW5nXCIgbWF0Y2ggKGlnbm9yaW5nIGluZGV4IGFuZFxuICAvLyBwYXRobGVzcyBsYXlvdXQgcm91dGVzKVxuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgcmV0dXJuIHBhdGhNYXRjaGVzW3BhdGhNYXRjaGVzLmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKG5hdmlnYXRpb24pIHtcbiAgbGV0IHtcbiAgICBmb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGUsXG4gICAgdGV4dCxcbiAgICBmb3JtRGF0YSxcbiAgICBqc29uXG4gIH0gPSBuYXZpZ2F0aW9uO1xuICBpZiAoIWZvcm1NZXRob2QgfHwgIWZvcm1BY3Rpb24gfHwgIWZvcm1FbmNUeXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0XG4gICAgfTtcbiAgfSBlbHNlIGlmIChmb3JtRGF0YSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0gZWxzZSBpZiAoanNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbixcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IG5hdmlnYXRpb24gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9IGVsc2Uge1xuICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgcmV0dXJuIG5hdmlnYXRpb247XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBsb2NhdGlvbixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgfTtcbiAgcmV0dXJuIG5hdmlnYXRpb247XG59XG5mdW5jdGlvbiBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBkYXRhKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0LFxuICAgICAgZGF0YVxuICAgIH07XG4gICAgcmV0dXJuIGZldGNoZXI7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICAgIGRhdGFcbiAgICB9O1xuICAgIHJldHVybiBmZXRjaGVyO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdWJtaXR0aW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBleGlzdGluZ0ZldGNoZXIpIHtcbiAgbGV0IGZldGNoZXIgPSB7XG4gICAgc3RhdGU6IFwic3VibWl0dGluZ1wiLFxuICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCxcbiAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZFxuICB9O1xuICByZXR1cm4gZmV0Y2hlcjtcbn1cbmZ1bmN0aW9uIGdldERvbmVGZXRjaGVyKGRhdGEpIHtcbiAgbGV0IGZldGNoZXIgPSB7XG4gICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgZGF0YVxuICB9O1xuICByZXR1cm4gZmV0Y2hlcjtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVBcHBsaWVkVHJhbnNpdGlvbnMoX3dpbmRvdywgdHJhbnNpdGlvbnMpIHtcbiAgdHJ5IHtcbiAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IF93aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSk7XG4gICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgIGZvciAobGV0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhqc29uIHx8IHt9KSkge1xuICAgICAgICBpZiAodiAmJiBBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbnMuc2V0KGssIG5ldyBTZXQodiB8fCBbXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICB9XG59XG5mdW5jdGlvbiBwZXJzaXN0QXBwbGllZFRyYW5zaXRpb25zKF93aW5kb3csIHRyYW5zaXRpb25zKSB7XG4gIGlmICh0cmFuc2l0aW9ucy5zaXplID4gMCkge1xuICAgIGxldCBqc29uID0ge307XG4gICAgZm9yIChsZXQgW2ssIHZdIG9mIHRyYW5zaXRpb25zKSB7XG4gICAgICBqc29uW2tdID0gWy4uLnZdO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgX3dpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShqc29uKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiRmFpbGVkIHRvIHNhdmUgYXBwbGllZCB2aWV3IHRyYW5zaXRpb25zIGluIHNlc3Npb25TdG9yYWdlIChcIiArIGVycm9yICsgXCIpLlwiKTtcbiAgICB9XG4gIH1cbn1cbi8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uLCBJRExFX0JMT0NLRVIsIElETEVfRkVUQ0hFUiwgSURMRV9OQVZJR0FUSU9OLCBVTlNBRkVfREVGRVJSRURfU1lNQk9MLCBEZWZlcnJlZERhdGEgYXMgVU5TQUZFX0RlZmVycmVkRGF0YSwgRXJyb3JSZXNwb25zZUltcGwgYXMgVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsLCBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCBhcyBVTlNBRkVfY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gsIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMgYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMsIGRlY29kZVBhdGggYXMgVU5TQUZFX2RlY29kZVBhdGgsIGdldFJlc29sdmVUb01hdGNoZXMgYXMgVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMsIGludmFyaWFudCBhcyBVTlNBRkVfaW52YXJpYW50LCB3YXJuaW5nIGFzIFVOU0FGRV93YXJuaW5nLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlciwgY3JlYXRlU3RhdGljSGFuZGxlciwgZGF0YSwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvciwgZ2V0VG9QYXRobmFtZSwgaXNEYXRhV2l0aFJlc3BvbnNlSW5pdCwgaXNEZWZlcnJlZERhdGEsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqb2luUGF0aHMsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIG5vcm1hbGl6ZVBhdGhuYW1lLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZWRpcmVjdERvY3VtZW50LCByZXBsYWNlLCByZXNvbHZlUGF0aCwgcmVzb2x2ZVRvLCBzdHJpcEJhc2VuYW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXIuanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni4yNy4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocywgbWF0Y2hQYXRoLCBVTlNBRkVfZGVjb2RlUGF0aCwgVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMsIFVOU0FGRV93YXJuaW5nLCByZXNvbHZlVG8sIHBhcnNlUGF0aCwgbWF0Y2hSb3V0ZXMsIEFjdGlvbiwgVU5TQUZFX2NvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoLCBzdHJpcEJhc2VuYW1lLCBJRExFX0JMT0NLRVIsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlcGxhY2UsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLy8gQ3JlYXRlIHJlYWN0LXNwZWNpZmljIHR5cGVzIGZyb20gdGhlIGFnbm9zdGljIHR5cGVzIGluIEByZW1peC1ydW4vcm91dGVyIHRvXG4vLyBleHBvcnQgZnJvbSByZWFjdC1yb3V0ZXJcbmNvbnN0IERhdGFSb3V0ZXJDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5jb25zdCBEYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkRhdGFSb3V0ZXJTdGF0ZVwiO1xufVxuY29uc3QgQXdhaXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEF3YWl0Q29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXdhaXRcIjtcbn1cblxuLyoqXG4gKiBBIE5hdmlnYXRvciBpcyBhIFwibG9jYXRpb24gY2hhbmdlclwiOyBpdCdzIGhvdyB5b3UgZ2V0IHRvIGRpZmZlcmVudCBsb2NhdGlvbnMuXG4gKlxuICogRXZlcnkgaGlzdG9yeSBpbnN0YW5jZSBjb25mb3JtcyB0byB0aGUgTmF2aWdhdG9yIGludGVyZmFjZSwgYnV0IHRoZVxuICogZGlzdGluY3Rpb24gaXMgdXNlZnVsIHByaW1hcmlseSB3aGVuIGl0IGNvbWVzIHRvIHRoZSBsb3ctbGV2ZWwgYDxSb3V0ZXI+YCBBUElcbiAqIHdoZXJlIGJvdGggdGhlIGxvY2F0aW9uIGFuZCBhIG5hdmlnYXRvciBtdXN0IGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgaW4gb3JkZXJcbiAqIHRvIGF2b2lkIFwidGVhcmluZ1wiIHRoYXQgbWF5IG9jY3VyIGluIGEgc3VzcGVuc2UtZW5hYmxlZCBhcHAgaWYgdGhlIGFjdGlvblxuICogYW5kL29yIGxvY2F0aW9uIHdlcmUgdG8gYmUgcmVhZCBkaXJlY3RseSBmcm9tIHRoZSBoaXN0b3J5IGluc3RhbmNlLlxuICovXG5cbmNvbnN0IE5hdmlnYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdLFxuICBpc0RhdGFSb3V0ZTogZmFsc2Vcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5jb25zdCBSb3V0ZUVycm9yQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUVycm9yQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVFcnJvclwiO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZ1bGwgaHJlZiBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgZm9yIGJ1aWxkaW5nXG4gKiBjdXN0b20gbGlua3MgdGhhdCBhcmUgYWxzbyBhY2Nlc3NpYmxlIGFuZCBwcmVzZXJ2ZSByaWdodC1jbGljayBiZWhhdmlvci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1ocmVmXG4gKi9cbmZ1bmN0aW9uIHVzZUhyZWYodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTtcblxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBocmVmLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3XG4gIC8vIGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2VcbiAgLy8gb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgYDxSb3V0ZXI+YC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1pbi1yb3V0ZXItY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VJblJvdXRlckNvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1sb2NhdGlvblxuICovXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0aW9uLXR5cGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGlvblR5cGUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIFBhdGhNYXRjaCBvYmplY3QgaWYgdGhlIGdpdmVuIHBhdHRlcm4gbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiBgPE5hdkxpbms+YC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1tYXRjaFxuICovXG5mdW5jdGlvbiB1c2VNYXRjaChwYXR0ZXJuKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIHBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaFBhdGgocGF0dGVybiwgVU5TQUZFX2RlY29kZVBhdGgocGF0aG5hbWUpKSwgW3BhdGhuYW1lLCBwYXR0ZXJuXSk7XG59XG5cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIG5hdmlnYXRlKCkgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB1c2VOYXZpZ2F0ZSgpLlxuICovXG5cbmNvbnN0IG5hdmlnYXRlRWZmZWN0V2FybmluZyA9IFwiWW91IHNob3VsZCBjYWxsIG5hdmlnYXRlKCkgaW4gYSBSZWFjdC51c2VFZmZlY3QoKSwgbm90IHdoZW4gXCIgKyBcInlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLlwiO1xuXG4vLyBNdXRlIHdhcm5pbmdzIGZvciBjYWxscyB0byB1c2VOYXZpZ2F0ZSBpbiBTU1IgZW52aXJvbm1lbnRzXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGNiKSB7XG4gIGxldCBpc1N0YXRpYyA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLnN0YXRpYztcbiAgaWYgKCFpc1N0YXRpYykge1xuICAgIC8vIFdlIHNob3VsZCBiZSBhYmxlIHRvIGdldCByaWQgb2YgdGhpcyBvbmNlIHJlYWN0IDE4LjMgaXMgcmVsZWFzZWRcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzI2Mzk1XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KGNiKTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gaW1wZXJhdGl2ZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBsb2NhdGlvbi4gVXNlZCBieSBgPExpbms+YHMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW5hdmlnYXRlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlKCkge1xuICBsZXQge1xuICAgIGlzRGF0YVJvdXRlXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIHJldHVybiBpc0RhdGFSb3V0ZSA/IHVzZU5hdmlnYXRlU3RhYmxlKCkgOiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCk7XG59XG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgZnV0dXJlLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSk7XG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpIDogdm9pZCAwO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBoZXJlIHNpbmNlIGlmIHRoaXMgaGFwcGVucyBvbiBmaXJzdCByZW5kZXIgdGhlIG5hdmlnYXRlXG4gICAgLy8gaXMgdXNlbGVzcyBiZWNhdXNlIHdlIGhhdmVuJ3Qgd2lyZWQgdXAgb3VyIGhpc3RvcnkgbGlzdGVuZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTtcblxuICAgIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgICAvLyB0byBoYW5kaW5nIG9mZiB0byBoaXN0b3J5IChidXQgb25seSBpZiB3ZSdyZSBub3QgaW4gYSBkYXRhIHJvdXRlcixcbiAgICAvLyBvdGhlcndpc2UgaXQnbGwgcHJlcGVuZCB0aGUgYmFzZW5hbWUgaW5zaWRlIG9mIHRoZSByb3V0ZXIpLlxuICAgIC8vIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2UgbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZVxuICAgIC8vIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYVxuICAgIC8vIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcbiAgICBpZiAoZGF0YVJvdXRlckNvbnRleHQgPT0gbnVsbCAmJiBiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgZGF0YVJvdXRlckNvbnRleHRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgT3V0bGV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXQtY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChPdXRsZXRDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IGA8T3V0bGV0PmAgdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXRcbiAqL1xuZnVuY3Rpb24gdXNlT3V0bGV0KGNvbnRleHQpIHtcbiAgbGV0IG91dGxldCA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KS5vdXRsZXQ7XG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICB9LCBvdXRsZXQpO1xuICB9XG4gIHJldHVybiBvdXRsZXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcGFyYW1zXG4gKi9cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcmVzb2x2ZWQtcGF0aFxuICovXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIGZ1dHVyZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiBgPE91dGxldD5gIHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzXG4gKiBlbGVtZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJvdXRlc1xuICovXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIGxvY2F0aW9uQXJnKTtcbn1cblxuLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gd2l0aCBhY2NlcHQgb3B0aW9uYWwgcGFyYW0gZm9yIFJvdXRlclByb3ZpZGVyIHVzYWdlXG5mdW5jdGlvbiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcsIGRhdGFSb3V0ZXJTdGF0ZSwgZnV0dXJlKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXM6IHBhcmVudE1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBwYXJlbnRNYXRjaGVzW3BhcmVudE1hdGNoZXMubGVuZ3RoIC0gMV07XG4gIGxldCBwYXJlbnRQYXJhbXMgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbiAgbGV0IHBhcmVudFBhdGhuYW1lID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWUgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFBhdGhuYW1lQmFzZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lQmFzZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50Um91dGUgPSByb3V0ZU1hdGNoICYmIHJvdXRlTWF0Y2gucm91dGU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuICBpZiAobG9jYXRpb25BcmcpIHtcbiAgICB2YXIgX3BhcnNlZExvY2F0aW9uQXJnJHBhO1xuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuICBsZXQgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIjtcbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGF0aG5hbWU7XG4gIGlmIChwYXJlbnRQYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSByZW1haW5pbmcgcGF0aG5hbWUgYnkgcmVtb3ZpbmcgdGhlICMgb2YgVVJMIHNlZ21lbnRzIHRoZVxuICAgIC8vIHBhcmVudFBhdGhuYW1lQmFzZSBoYXMsIGluc3RlYWQgb2YgcmVtb3ZpbmcgYmFzZWQgb24gY2hhcmFjdGVyIGNvdW50LlxuICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB3ZSBjYW4ndCBndWFyYW50ZWUgdGhhdCBpbmNvbWluZy9vdXRnb2luZyBlbmNvZGluZ3MvXG4gICAgLy8gZGVjb2RpbmdzIHdpbGwgbWF0Y2ggZXhhY3RseS5cbiAgICAvLyBXZSBkZWNvZGUgcGF0aHMgYmVmb3JlIG1hdGNoaW5nIG9uIGEgcGVyLXNlZ21lbnQgYmFzaXMgd2l0aFxuICAgIC8vIGRlY29kZVVSSUNvbXBvbmVudCgpLCBidXQgd2UgcmUtZW5jb2RlIHBhdGhuYW1lcyB2aWEgYG5ldyBVUkwoKWAgc28gdGhleVxuICAgIC8vIG1hdGNoIHdoYXQgYHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZWAgd291bGQgcmVmbGVjdC4gIFRob3NlIGRvbid0IDEwMCVcbiAgICAvLyBhbGlnbiB3aGVuIGl0IGNvbWVzIHRvIGVuY29kZWQgVVJJIGNoYXJhY3RlcnMgc3VjaCBhcyAlIGFuZCAmLlxuICAgIC8vXG4gICAgLy8gU28gd2UgbWF5IGVuZCB1cCB3aXRoOlxuICAgIC8vICAgcGF0aG5hbWU6ICAgICAgICAgICBcIi9kZXNjZW5kYW50L2ElMjViL21hdGNoXCJcbiAgICAvLyAgIHBhcmVudFBhdGhuYW1lQmFzZTogXCIvZGVzY2VuZGFudC9hJWJcIlxuICAgIC8vXG4gICAgLy8gQW5kIHRoZSBkaXJlY3Qgc3Vic3RyaW5nIHJlbW92YWwgYXBwcm9hY2ggd29uJ3Qgd29yayA6L1xuICAgIGxldCBwYXJlbnRTZWdtZW50cyA9IHBhcmVudFBhdGhuYW1lQmFzZS5yZXBsYWNlKC9eXFwvLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICAgIGxldCBzZWdtZW50cyA9IHBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gICAgcmVtYWluaW5nUGF0aG5hbWUgPSBcIi9cIiArIHNlZ21lbnRzLnNsaWNlKHBhcmVudFNlZ21lbnRzLmxlbmd0aCkuam9pbihcIi9cIik7XG4gIH1cbiAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXMsIHtcbiAgICBwYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWVcbiAgfSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhtYXRjaGVzID09IG51bGwgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuQ29tcG9uZW50ICE9PSB1bmRlZmluZWQgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmxhenkgIT09IHVuZGVmaW5lZCwgXCJNYXRjaGVkIGxlYWYgcm91dGUgYXQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiICsgXCJkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQgb3IgQ29tcG9uZW50LiBUaGlzIG1lYW5zIGl0IHdpbGwgcmVuZGVyIGFuIDxPdXRsZXQgLz4gd2l0aCBhIFwiICsgXCJudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMgJiYgbWF0Y2hlcy5tYXAobWF0Y2ggPT4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gsIHtcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudFBhcmFtcywgbWF0Y2gucGFyYW1zKSxcbiAgICBwYXRobmFtZTogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsXG4gICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24obWF0Y2gucGF0aG5hbWUpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUsIGZ1dHVyZSk7XG5cbiAgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG4gIGlmIChsb2NhdGlvbkFyZyAmJiByZW5kZXJlZE1hdGNoZXMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBsb2NhdGlvbjogX2V4dGVuZHMoe1xuICAgICAgICAgIHBhdGhuYW1lOiBcIi9cIixcbiAgICAgICAgICBzZWFyY2g6IFwiXCIsXG4gICAgICAgICAgaGFzaDogXCJcIixcbiAgICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgICBrZXk6IFwiZGVmYXVsdFwiXG4gICAgICAgIH0sIGxvY2F0aW9uKSxcbiAgICAgICAgbmF2aWdhdGlvblR5cGU6IEFjdGlvbi5Qb3BcbiAgICAgIH1cbiAgICB9LCByZW5kZXJlZE1hdGNoZXMpO1xuICB9XG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5mdW5jdGlvbiBEZWZhdWx0RXJyb3JDb21wb25lbnQoKSB7XG4gIGxldCBlcnJvciA9IHVzZVJvdXRlRXJyb3IoKTtcbiAgbGV0IG1lc3NhZ2UgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgKyBcIiBcIiArIGVycm9yLnN0YXR1c1RleHQgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IEpTT04uc3RyaW5naWZ5KGVycm9yKTtcbiAgbGV0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogbnVsbDtcbiAgbGV0IGxpZ2h0Z3JleSA9IFwicmdiYSgyMDAsMjAwLDIwMCwgMC41KVwiO1xuICBsZXQgcHJlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMC41cmVtXCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGNvZGVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGRldkluZm8gPSBudWxsO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGhhbmRsZWQgYnkgUmVhY3QgUm91dGVyIGRlZmF1bHQgRXJyb3JCb3VuZGFyeTpcIiwgZXJyb3IpO1xuICAgIGRldkluZm8gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiXFx1RDgzRFxcdURDQkYgSGV5IGRldmVsb3BlciBcXHVEODNEXFx1REM0QlwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiWW91IGNhbiBwcm92aWRlIGEgd2F5IGJldHRlciBVWCB0aGFuIHRoaXMgd2hlbiB5b3VyIGFwcCB0aHJvd3MgZXJyb3JzIGJ5IHByb3ZpZGluZyB5b3VyIG93biBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJFcnJvckJvdW5kYXJ5XCIpLCBcIiBvclwiLCBcIiBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJlcnJvckVsZW1lbnRcIiksIFwiIHByb3Agb24geW91ciByb3V0ZS5cIikpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuZXhwZWN0ZWQgQXBwbGljYXRpb24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCBkZXZJbmZvKTtcbn1cbmNvbnN0IGRlZmF1bHRFcnJvckVsZW1lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RXJyb3JDb21wb25lbnQsIG51bGwpO1xuY2xhc3MgUmVuZGVyRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvbixcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvclxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgLy8gV2hlbiB3ZSBnZXQgaW50byBhbiBlcnJvciBzdGF0ZSwgdGhlIHVzZXIgd2lsbCBsaWtlbHkgY2xpY2sgXCJiYWNrXCIgdG8gdGhlXG4gICAgLy8gcHJldmlvdXMgcGFnZSB0aGF0IGRpZG4ndCBoYXZlIGFuIGVycm9yLiBCZWNhdXNlIHRoaXMgd3JhcHMgdGhlIGVudGlyZVxuICAgIC8vIGFwcGxpY2F0aW9uLCB0aGF0IHdpbGwgaGF2ZSBubyBlZmZlY3QtLXRoZSBlcnJvciBwYWdlIGNvbnRpbnVlcyB0byBkaXNwbGF5LlxuICAgIC8vIFRoaXMgZ2l2ZXMgdXMgYSBtZWNoYW5pc20gdG8gcmVjb3ZlciBmcm9tIHRoZSBlcnJvciB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgIC8vXG4gICAgLy8gV2hldGhlciB3ZSdyZSBpbiBhbiBlcnJvciBzdGF0ZSBvciBub3QsIHdlIHVwZGF0ZSB0aGUgbG9jYXRpb24gaW4gc3RhdGVcbiAgICAvLyBzbyB0aGF0IHdoZW4gd2UgYXJlIGluIGFuIGVycm9yIHN0YXRlLCBpdCBnZXRzIHJlc2V0IHdoZW4gYSBuZXcgbG9jYXRpb25cbiAgICAvLyBjb21lcyBpbiBhbmQgdGhlIHVzZXIgcmVjb3ZlcnMgZnJvbSB0aGUgZXJyb3IuXG4gICAgaWYgKHN0YXRlLmxvY2F0aW9uICE9PSBwcm9wcy5sb2NhdGlvbiB8fCBzdGF0ZS5yZXZhbGlkYXRpb24gIT09IFwiaWRsZVwiICYmIHByb3BzLnJldmFsaWRhdGlvbiA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvblxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBub3QgY2hhbmdpbmcgbG9jYXRpb25zLCBwcmVzZXJ2ZSB0aGUgbG9jYXRpb24gYnV0IHN0aWxsIHN1cmZhY2VcbiAgICAvLyBhbnkgbmV3IGVycm9ycyB0aGF0IG1heSBjb21lIHRocm91Z2guIFdlIHJldGFpbiB0aGUgZXhpc3RpbmcgZXJyb3IsIHdlIGRvXG4gICAgLy8gdGhpcyBiZWNhdXNlIHRoZSBlcnJvciBwcm92aWRlZCBmcm9tIHRoZSBhcHAgc3RhdGUgbWF5IGJlIGNsZWFyZWQgd2l0aG91dFxuICAgIC8vIHRoZSBsb2NhdGlvbiBjaGFuZ2luZy5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHByb3BzLmVycm9yICE9PSB1bmRlZmluZWQgPyBwcm9wcy5lcnJvciA6IHN0YXRlLmVycm9yLFxuICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uXG4gICAgfTtcbiAgfVxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlJlYWN0IFJvdXRlciBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5lcnJvciAhPT0gdW5kZWZpbmVkID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yb3V0ZUNvbnRleHRcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUVycm9yQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuZXJyb3IsXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICB9KSkgOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9XG59XG5mdW5jdGlvbiBSZW5kZXJlZFJvdXRlKF9yZWYpIHtcbiAgbGV0IHtcbiAgICByb3V0ZUNvbnRleHQsXG4gICAgbWF0Y2gsXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuXG4gIC8vIFRyYWNrIGhvdyBkZWVwIHdlIGdvdCBpbiBvdXIgcmVuZGVyIHBhc3MgdG8gZW11bGF0ZSBTU1IgY29tcG9uZW50RGlkQ2F0Y2hcbiAgLy8gaW4gYSBEYXRhU3RhdGljUm91dGVyXG4gIGlmIChkYXRhUm91dGVyQ29udGV4dCAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWMgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dCAmJiAobWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnkpKSB7XG4gICAgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCA9IG1hdGNoLnJvdXRlLmlkO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogcm91dGVDb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSwgZnV0dXJlKSB7XG4gIHZhciBfZGF0YVJvdXRlclN0YXRlO1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG4gIGlmIChkYXRhUm91dGVyU3RhdGUgPT09IHZvaWQgMCkge1xuICAgIGRhdGFSb3V0ZXJTdGF0ZSA9IG51bGw7XG4gIH1cbiAgaWYgKGZ1dHVyZSA9PT0gdm9pZCAwKSB7XG4gICAgZnV0dXJlID0gbnVsbDtcbiAgfVxuICBpZiAobWF0Y2hlcyA9PSBudWxsKSB7XG4gICAgdmFyIF9mdXR1cmU7XG4gICAgaWYgKCFkYXRhUm91dGVyU3RhdGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlLmVycm9ycykge1xuICAgICAgLy8gRG9uJ3QgYmFpbCBpZiB3ZSBoYXZlIGRhdGEgcm91dGVyIGVycm9ycyBzbyB3ZSBjYW4gcmVuZGVyIHRoZW0gaW4gdGhlXG4gICAgICAvLyBib3VuZGFyeS4gIFVzZSB0aGUgcHJlLW1hdGNoZWQgKG9yIHNoaW1tZWQpIG1hdGNoZXNcbiAgICAgIG1hdGNoZXMgPSBkYXRhUm91dGVyU3RhdGUubWF0Y2hlcztcbiAgICB9IGVsc2UgaWYgKChfZnV0dXJlID0gZnV0dXJlKSAhPSBudWxsICYmIF9mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiAmJiBwYXJlbnRNYXRjaGVzLmxlbmd0aCA9PT0gMCAmJiAhZGF0YVJvdXRlclN0YXRlLmluaXRpYWxpemVkICYmIGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIERvbid0IGJhaWwgaWYgd2UncmUgaW5pdGlhbGl6aW5nIHdpdGggcGFydGlhbCBoeWRyYXRpb24gYW5kIHdlIGhhdmVcbiAgICAgIC8vIHJvdXRlciBtYXRjaGVzLiAgVGhhdCBtZWFucyB3ZSdyZSBhY3RpdmVseSBydW5uaW5nIGBwYXRjaFJvdXRlc09uTmF2aWdhdGlvbmBcbiAgICAgIC8vIHNvIHdlIHNob3VsZCByZW5kZXIgZG93biB0aGUgcGFydGlhbCBtYXRjaGVzIHRvIHRoZSBhcHByb3ByaWF0ZVxuICAgICAgLy8gYEh5ZHJhdGVGYWxsYmFja2AuICBXZSBvbmx5IGRvIHRoaXMgaWYgYHBhcmVudE1hdGNoZXNgIGlzIGVtcHR5IHNvIGl0XG4gICAgICAvLyBvbmx5IGltcGFjdHMgdGhlIHJvb3QgbWF0Y2hlcyBmb3IgYFJvdXRlclByb3ZpZGVyYCBhbmQgbm8gZGVzY2VuZGFudFxuICAgICAgLy8gYDxSb3V0ZXM+YFxuICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IG1hdGNoZXM7XG5cbiAgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG4gIGxldCBlcnJvcnMgPSAoX2RhdGFSb3V0ZXJTdGF0ZSA9IGRhdGFSb3V0ZXJTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhUm91dGVyU3RhdGUuZXJyb3JzO1xuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZCk7XG4gICAgIShlcnJvckluZGV4ID49IDApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJDb3VsZCBub3QgZmluZCBhIG1hdGNoaW5nIHJvdXRlIGZvciBlcnJvcnMgb24gcm91dGUgSURzOiBcIiArIE9iamVjdC5rZXlzKGVycm9ycykuam9pbihcIixcIikpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIE1hdGgubWluKHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGgsIGVycm9ySW5kZXggKyAxKSk7XG4gIH1cblxuICAvLyBJZiB3ZSdyZSBpbiBhIHBhcnRpYWwgaHlkcmF0aW9uIG1vZGUsIGRldGVjdCBpZiB3ZSBuZWVkIHRvIHJlbmRlciBkb3duIHRvXG4gIC8vIGEgZ2l2ZW4gSHlkcmF0ZUZhbGxiYWNrIHdoaWxlIHdlIGxvYWQgdGhlIHJlc3Qgb2YgdGhlIGh5ZHJhdGlvbiBkYXRhXG4gIGxldCByZW5kZXJGYWxsYmFjayA9IGZhbHNlO1xuICBsZXQgZmFsbGJhY2tJbmRleCA9IC0xO1xuICBpZiAoZGF0YVJvdXRlclN0YXRlICYmIGZ1dHVyZSAmJiBmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyZWRNYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbWF0Y2ggPSByZW5kZXJlZE1hdGNoZXNbaV07XG4gICAgICAvLyBUcmFjayB0aGUgZGVlcGVzdCBmYWxsYmFjayB1cCB1bnRpbCB0aGUgZmlyc3Qgcm91dGUgd2l0aG91dCBkYXRhXG4gICAgICBpZiAobWF0Y2gucm91dGUuSHlkcmF0ZUZhbGxiYWNrIHx8IG1hdGNoLnJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQpIHtcbiAgICAgICAgZmFsbGJhY2tJbmRleCA9IGk7XG4gICAgICB9XG4gICAgICBpZiAobWF0Y2gucm91dGUuaWQpIHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICAgIGVycm9yc1xuICAgICAgICB9ID0gZGF0YVJvdXRlclN0YXRlO1xuICAgICAgICBsZXQgbmVlZHNUb1J1bkxvYWRlciA9IG1hdGNoLnJvdXRlLmxvYWRlciAmJiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkICYmICghZXJyb3JzIHx8IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtYXRjaC5yb3V0ZS5sYXp5IHx8IG5lZWRzVG9SdW5Mb2FkZXIpIHtcbiAgICAgICAgICAvLyBXZSBmb3VuZCB0aGUgZmlyc3Qgcm91dGUgdGhhdCdzIG5vdCByZWFkeSB0byByZW5kZXIgKHdhaXRpbmcgb25cbiAgICAgICAgICAvLyBsYXp5LCBvciBoYXMgYSBsb2FkZXIgdGhhdCBoYXNuJ3QgcnVuIHlldCkuICBGbGFnIHRoYXQgd2UgbmVlZCB0b1xuICAgICAgICAgIC8vIHJlbmRlciBhIGZhbGxiYWNrIGFuZCByZW5kZXIgdXAgdW50aWwgdGhlIGFwcHJvcHJpYXRlIGZhbGxiYWNrXG4gICAgICAgICAgcmVuZGVyRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgIGlmIChmYWxsYmFja0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBmYWxsYmFja0luZGV4ICsgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTWF0Y2hlcyA9IFtyZW5kZXJlZE1hdGNoZXNbMF1dO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIC8vIE9ubHkgZGF0YSByb3V0ZXJzIGhhbmRsZSBlcnJvcnMvZmFsbGJhY2tzXG4gICAgbGV0IGVycm9yO1xuICAgIGxldCBzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2sgPSBmYWxzZTtcbiAgICBsZXQgZXJyb3JFbGVtZW50ID0gbnVsbDtcbiAgICBsZXQgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG51bGw7XG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSkge1xuICAgICAgZXJyb3IgPSBlcnJvcnMgJiYgbWF0Y2gucm91dGUuaWQgPyBlcnJvcnNbbWF0Y2gucm91dGUuaWRdIDogdW5kZWZpbmVkO1xuICAgICAgZXJyb3JFbGVtZW50ID0gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGRlZmF1bHRFcnJvckVsZW1lbnQ7XG4gICAgICBpZiAocmVuZGVyRmFsbGJhY2spIHtcbiAgICAgICAgaWYgKGZhbGxiYWNrSW5kZXggPCAwICYmIGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgd2FybmluZ09uY2UoXCJyb3V0ZS1mYWxsYmFja1wiLCBmYWxzZSwgXCJObyBgSHlkcmF0ZUZhbGxiYWNrYCBlbGVtZW50IHByb3ZpZGVkIHRvIHJlbmRlciBkdXJpbmcgaW5pdGlhbCBoeWRyYXRpb25cIik7XG4gICAgICAgICAgc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmYWxsYmFja0luZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgIHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG1hdGNoLnJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgbWF0Y2hlcyA9IHBhcmVudE1hdGNoZXMuY29uY2F0KHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKTtcbiAgICBsZXQgZ2V0Q2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgICBsZXQgY2hpbGRyZW47XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBlcnJvckVsZW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjaykge1xuICAgICAgICBjaGlsZHJlbiA9IGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoLnJvdXRlLkNvbXBvbmVudCkge1xuICAgICAgICAvLyBOb3RlOiBUaGlzIGlzIGEgZGUtb3B0aW1pemVkIHBhdGggc2luY2UgUmVhY3Qgd29uJ3QgcmUtdXNlIHRoZVxuICAgICAgICAvLyBSZWFjdEVsZW1lbnQgc2luY2UgaXQncyBpZGVudGl0eSBjaGFuZ2VzIHdpdGggZWFjaCBuZXdcbiAgICAgICAgLy8gUmVhY3QuY3JlYXRlRWxlbWVudCBjYWxsLiAgV2Uga2VlcCB0aGlzIHNvIGZvbGtzIGNhbiB1c2VcbiAgICAgICAgLy8gYDxSb3V0ZSBDb21wb25lbnQ9ey4uLn0+YCBpbiBgPFJvdXRlcz5gIGJ1dCBnZW5lcmFsbHkgYENvbXBvbmVudGBcbiAgICAgICAgLy8gdXNhZ2UgaXMgb25seSBhZHZpc2VkIGluIGBSb3V0ZXJQcm92aWRlcmAgd2hlbiB3ZSBjYW4gY29udmVydCBpdCB0b1xuICAgICAgICAvLyBgZWxlbWVudGAgYWhlYWQgb2YgdGltZS5cbiAgICAgICAgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChtYXRjaC5yb3V0ZS5Db21wb25lbnQsIG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIGNoaWxkcmVuID0gbWF0Y2gucm91dGUuZWxlbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuID0gb3V0bGV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlcmVkUm91dGUsIHtcbiAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgICBvdXRsZXQsXG4gICAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgICBpc0RhdGFSb3V0ZTogZGF0YVJvdXRlclN0YXRlICE9IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9O1xuICAgIC8vIE9ubHkgd3JhcCBpbiBhbiBlcnJvciBib3VuZGFyeSB3aXRoaW4gZGF0YSByb3V0ZXIgdXNhZ2VzIHdoZW4gd2UgaGF2ZSBhblxuICAgIC8vIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IG9uIHRoaXMgcm91dGUuICBPdGhlcndpc2UgbGV0IGl0IGJ1YmJsZSB1cCB0b1xuICAgIC8vIGFuIGFuY2VzdG9yIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50XG4gICAgcmV0dXJuIGRhdGFSb3V0ZXJTdGF0ZSAmJiAobWF0Y2gucm91dGUuRXJyb3JCb3VuZGFyeSB8fCBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgaW5kZXggPT09IDApID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVuZGVyRXJyb3JCb3VuZGFyeSwge1xuICAgICAgbG9jYXRpb246IGRhdGFSb3V0ZXJTdGF0ZS5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogZGF0YVJvdXRlclN0YXRlLnJldmFsaWRhdGlvbixcbiAgICAgIGNvbXBvbmVudDogZXJyb3JFbGVtZW50LFxuICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgY2hpbGRyZW46IGdldENoaWxkcmVuKCksXG4gICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgb3V0bGV0OiBudWxsLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBpc0RhdGFSb3V0ZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pIDogZ2V0Q2hpbGRyZW4oKTtcbiAgfSwgbnVsbCk7XG59XG52YXIgRGF0YVJvdXRlckhvb2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlQmxvY2tlclwiXSA9IFwidXNlQmxvY2tlclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZU5hdmlnYXRlU3RhYmxlXCJdID0gXCJ1c2VOYXZpZ2F0ZVwiO1xuICByZXR1cm4gRGF0YVJvdXRlckhvb2s7XG59KERhdGFSb3V0ZXJIb29rIHx8IHt9KTtcbnZhciBEYXRhUm91dGVyU3RhdGVIb29rID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VMb2FkZXJEYXRhXCJdID0gXCJ1c2VMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VBY3Rpb25EYXRhXCJdID0gXCJ1c2VBY3Rpb25EYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUVycm9yXCJdID0gXCJ1c2VSb3V0ZUVycm9yXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VOYXZpZ2F0aW9uXCJdID0gXCJ1c2VOYXZpZ2F0aW9uXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUxvYWRlckRhdGFcIl0gPSBcInVzZVJvdXRlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTWF0Y2hlc1wiXSA9IFwidXNlTWF0Y2hlc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VOYXZpZ2F0ZVN0YWJsZVwiXSA9IFwidXNlTmF2aWdhdGVcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlSWRcIl0gPSBcInVzZVJvdXRlSWRcIjtcbiAgcmV0dXJuIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG59KERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwge30pO1xuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLlwiO1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcm91dGU7XG59XG5cbi8vIEludGVybmFsIHZlcnNpb24gd2l0aCBob29rTmFtZS1hd2FyZSBkZWJ1Z2dpbmdcbmZ1bmN0aW9uIHVzZUN1cnJlbnRSb3V0ZUlkKGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IHVzZVJvdXRlQ29udGV4dChob29rTmFtZSk7XG4gIGxldCB0aGlzUm91dGUgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV07XG4gICF0aGlzUm91dGUucm91dGUuaWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBob29rTmFtZSArIFwiIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiB0aGlzUm91dGUucm91dGUuaWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSUQgZm9yIHRoZSBuZWFyZXN0IGNvbnRleHR1YWwgcm91dGVcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVJZCgpIHtcbiAgcmV0dXJuIHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVJZCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uLCBkZWZhdWx0aW5nIHRvIGFuIFwiaWRsZVwiIG5hdmlnYXRpb24gd2hlblxuICogbm8gbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzc1xuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VOYXZpZ2F0aW9uKTtcbiAgcmV0dXJuIHN0YXRlLm5hdmlnYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHJldmFsaWRhdGUgZnVuY3Rpb24gZm9yIG1hbnVhbGx5IHRyaWdnZXJpbmcgcmV2YWxpZGF0aW9uLCBhcyB3ZWxsXG4gKiBhcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbnkgbWFudWFsIHJldmFsaWRhdGlvbnNcbiAqL1xuZnVuY3Rpb24gdXNlUmV2YWxpZGF0b3IoKSB7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJldmFsaWRhdGU6IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLFxuICAgIHN0YXRlOiBzdGF0ZS5yZXZhbGlkYXRpb25cbiAgfSksIFtkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSwgc3RhdGUucmV2YWxpZGF0aW9uXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aXZlIHJvdXRlIG1hdGNoZXMsIHVzZWZ1bCBmb3IgYWNjZXNzaW5nIGxvYWRlckRhdGEgZm9yXG4gKiBwYXJlbnQvY2hpbGQgcm91dGVzIG9yIHRoZSByb3V0ZSBcImhhbmRsZVwiIHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIHVzZU1hdGNoZXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlcyxcbiAgICBsb2FkZXJEYXRhXG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VNYXRjaGVzKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hlcy5tYXAobSA9PiBVTlNBRkVfY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gobSwgbG9hZGVyRGF0YSkpLCBbbWF0Y2hlcywgbG9hZGVyRGF0YV0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlciBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBsb2FkZXJcbiAqL1xuZnVuY3Rpb24gdXNlTG9hZGVyRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgaWYgKHN0YXRlLmVycm9ycyAmJiBzdGF0ZS5lcnJvcnNbcm91dGVJZF0gIT0gbnVsbCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UgY2Fubm90IGB1c2VMb2FkZXJEYXRhYCBpbiBhbiBlcnJvckVsZW1lbnQgKHJvdXRlSWQ6IFwiICsgcm91dGVJZCArIFwiKVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlckRhdGEgZm9yIHRoZSBnaXZlbiByb3V0ZUlkXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlTG9hZGVyRGF0YShyb3V0ZUlkKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlTG9hZGVyRGF0YSk7XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGlvbiBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBhY3Rpb25cbiAqL1xuZnVuY3Rpb24gdXNlQWN0aW9uRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQWN0aW9uRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmFjdGlvbkRhdGEgPyBzdGF0ZS5hY3Rpb25EYXRhW3JvdXRlSWRdIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgZXJyb3IsIHdoaWNoIGNvdWxkIGJlIGEgbG9hZGVyL2FjdGlvblxuICogZXJyb3Igb3IgYSByZW5kZXIgZXJyb3IuICBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGNhbGxlZCBmcm9tIHlvdXJcbiAqIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVFcnJvcigpIHtcbiAgdmFyIF9zdGF0ZSRlcnJvcnM7XG4gIGxldCBlcnJvciA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVFcnJvckNvbnRleHQpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpO1xuXG4gIC8vIElmIHRoaXMgd2FzIGEgcmVuZGVyIGVycm9yLCB3ZSBwdXQgaXQgaW4gYSBSb3V0ZUVycm9yIGNvbnRleHQgaW5zaWRlXG4gIC8vIG9mIFJlbmRlckVycm9yQm91bmRhcnlcbiAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG4gIHJldHVybiAoX3N0YXRlJGVycm9ycyA9IHN0YXRlLmVycm9ycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9zdGF0ZSRlcnJvcnNbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaGFwcHktcGF0aCBkYXRhIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNWYWx1ZSgpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9kYXRhO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9lcnJvcjtcbn1cbmxldCBibG9ja2VySWQgPSAwO1xuXG4vKipcbiAqIEFsbG93IHRoZSBhcHBsaWNhdGlvbiB0byBibG9jayBuYXZpZ2F0aW9ucyB3aXRoaW4gdGhlIFNQQSBhbmQgcHJlc2VudCB0aGVcbiAqIHVzZXIgYSBjb25maXJtYXRpb24gZGlhbG9nIHRvIGNvbmZpcm0gdGhlIG5hdmlnYXRpb24uICBNb3N0bHkgdXNlZCB0byBhdm9pZFxuICogdXNpbmcgaGFsZi1maWxsZWQgZm9ybSBkYXRhLiAgVGhpcyBkb2VzIG5vdCBoYW5kbGUgaGFyZC1yZWxvYWRzIG9yXG4gKiBjcm9zcy1vcmlnaW4gbmF2aWdhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHVzZUJsb2NrZXIoc2hvdWxkQmxvY2spIHtcbiAgbGV0IHtcbiAgICByb3V0ZXIsXG4gICAgYmFzZW5hbWVcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUJsb2NrZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IFtibG9ja2VyS2V5LCBzZXRCbG9ja2VyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICBsZXQgYmxvY2tlckZ1bmN0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soYXJnID0+IHtcbiAgICBpZiAodHlwZW9mIHNob3VsZEJsb2NrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiAhIXNob3VsZEJsb2NrO1xuICAgIH1cbiAgICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSB7XG4gICAgICByZXR1cm4gc2hvdWxkQmxvY2soYXJnKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGV5IHByb3ZpZGVkIHVzIGEgZnVuY3Rpb24gYW5kIHdlJ3ZlIGdvdCBhbiBhY3RpdmUgYmFzZW5hbWUsIHN0cmlwXG4gICAgLy8gaXQgZnJvbSB0aGUgbG9jYXRpb25zIHdlIGV4cG9zZSB0byB0aGUgdXNlciB0byBtYXRjaCB0aGUgYmVoYXZpb3Igb2ZcbiAgICAvLyB1c2VMb2NhdGlvblxuICAgIGxldCB7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSA9IGFyZztcbiAgICByZXR1cm4gc2hvdWxkQmxvY2soe1xuICAgICAgY3VycmVudExvY2F0aW9uOiBfZXh0ZW5kcyh7fSwgY3VycmVudExvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksXG4gICAgICBuZXh0TG9jYXRpb246IF9leHRlbmRzKHt9LCBuZXh0TG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUobmV4dExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbmV4dExvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSxcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KTtcbiAgfSwgW2Jhc2VuYW1lLCBzaG91bGRCbG9ja10pO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGlzIGluIGNoYXJnZSBvZiBibG9ja2VyIGtleSBhc3NpZ25tZW50IGFuZCBkZWxldGlvbiAod2hpY2ggaXNcbiAgLy8gdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBrZXkpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGtleSA9IFN0cmluZygrK2Jsb2NrZXJJZCk7XG4gICAgc2V0QmxvY2tlcktleShrZXkpO1xuICAgIHJldHVybiAoKSA9PiByb3V0ZXIuZGVsZXRlQmxvY2tlcihrZXkpO1xuICB9LCBbcm91dGVyXSk7XG5cbiAgLy8gVGhpcyBlZmZlY3QgaGFuZGxlcyBhc3NpZ25pbmcgdGhlIGJsb2NrZXJGdW5jdGlvbi4gIFRoaXMgaXMgdG8gaGFuZGxlXG4gIC8vIHVuc3RhYmxlIGJsb2NrZXIgZnVuY3Rpb24gaWRlbnRpdGllcywgYW5kIGhhcHBlbnMgb25seSBhZnRlciB0aGUgcHJpb3JcbiAgLy8gZWZmZWN0IHNvIHdlIGRvbid0IGdldCBhbiBvcnBoYW5lZCBibG9ja2VyRnVuY3Rpb24gaW4gdGhlIHJvdXRlciB3aXRoIGFcbiAgLy8ga2V5IG9mIFwiXCIuICBVbnRpbCB0aGVuIHdlIGp1c3QgaGF2ZSB0aGUgSURMRV9CTE9DS0VSLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyS2V5ICE9PSBcIlwiKSB7XG4gICAgICByb3V0ZXIuZ2V0QmxvY2tlcihibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb24pO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uXSk7XG5cbiAgLy8gUHJlZmVyIHRoZSBibG9ja2VyIGZyb20gYHN0YXRlYCBub3QgYHJvdXRlci5zdGF0ZWAgc2luY2UgRGF0YVJvdXRlckNvbnRleHRcbiAgLy8gaXMgbWVtb2l6ZWQgc28gdGhpcyBlbnN1cmVzIHdlIHVwZGF0ZSBvbiBibG9ja2VyIHN0YXRlIHVwZGF0ZXNcbiAgcmV0dXJuIGJsb2NrZXJLZXkgJiYgc3RhdGUuYmxvY2tlcnMuaGFzKGJsb2NrZXJLZXkpID8gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpIDogSURMRV9CTE9DS0VSO1xufVxuXG4vKipcbiAqIFN0YWJsZSB2ZXJzaW9uIG9mIHVzZU5hdmlnYXRlIHRoYXQgaXMgdXNlZCB3aGVuIHdlIGFyZSBpbiB0aGUgY29udGV4dCBvZlxuICogYSBSb3V0ZXJQcm92aWRlci5cbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGVTdGFibGUoKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VOYXZpZ2F0ZVN0YWJsZSk7XG4gIGxldCBpZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgbmF2aWdhdGVFZmZlY3RXYXJuaW5nKSA6IHZvaWQgMDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaGVyZSBzaW5jZSBpZiB0aGlzIGhhcHBlbnMgb24gZmlyc3QgcmVuZGVyIHRoZSBuYXZpZ2F0ZVxuICAgIC8vIGlzIHVzZWxlc3MgYmVjYXVzZSB3ZSBoYXZlbid0IHdpcmVkIHVwIG91ciByb3V0ZXIgc3Vic2NyaWJlciB5ZXRcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKHRvLCBfZXh0ZW5kcyh7XG4gICAgICAgIGZyb21Sb3V0ZUlkOiBpZFxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgaWRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgYWxyZWFkeVdhcm5lZCA9IHt9O1xuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgbWVzc2FnZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5cbi8qKlxuICogR2l2ZW4gYSBSZW1peCBSb3V0ZXIgaW5zdGFuY2UsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgVUlcbiAqL1xuZnVuY3Rpb24gUm91dGVyUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgIGZhbGxiYWNrRWxlbWVudCxcbiAgICByb3V0ZXIsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmO1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUocm91dGVyLnN0YXRlKTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIGlmICh2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCkge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgICB9XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuXG4gIC8vIE5lZWQgdG8gdXNlIGEgbGF5b3V0IGVmZmVjdCBoZXJlIHNvIHdlIGFyZSBzdWJzY3JpYmVkIGVhcmx5IGVub3VnaCB0b1xuICAvLyBwaWNrIHVwIG9uIGFueSByZW5kZXItZHJpdmVuIHJlZGlyZWN0cy9uYXZpZ2F0aW9ucyAodXNlRWZmZWN0LzxOYXZpZ2F0ZT4pXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiByb3V0ZXIuc3Vic2NyaWJlKHNldFN0YXRlKSwgW3JvdXRlciwgc2V0U3RhdGVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxsYmFja0VsZW1lbnQgPT0gbnVsbCB8fCAhcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uLCBcImA8Um91dGVyUHJvdmlkZXIgZmFsbGJhY2tFbGVtZW50PmAgaXMgZGVwcmVjYXRlZCB3aGVuIHVzaW5nIFwiICsgXCJgdjdfcGFydGlhbEh5ZHJhdGlvbmAsIHVzZSBhIGBIeWRyYXRlRmFsbGJhY2tgIGNvbXBvbmVudCBpbnN0ZWFkXCIpIDogdm9pZCAwO1xuICAgIC8vIE9ubHkgbG9nIHRoaXMgb25jZSBvbiBpbml0aWFsIG1vdW50XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIGxldCBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlSHJlZjogcm91dGVyLmNyZWF0ZUhyZWYsXG4gICAgICBlbmNvZGVMb2NhdGlvbjogcm91dGVyLmVuY29kZUxvY2F0aW9uLFxuICAgICAgZ286IG4gPT4gcm91dGVyLm5hdmlnYXRlKG4pLFxuICAgICAgcHVzaDogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSlcbiAgICB9O1xuICB9LCBbcm91dGVyXSk7XG4gIGxldCBiYXNlbmFtZSA9IHJvdXRlci5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJvdXRlcixcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBmYWxzZSxcbiAgICBiYXNlbmFtZVxuICB9KSwgW3JvdXRlciwgbmF2aWdhdG9yLCBiYXNlbmFtZV0pO1xuXG4gIC8vIFRoZSBmcmFnbWVudCBhbmQge251bGx9IGhlcmUgYXJlIGltcG9ydGFudCEgIFdlIG5lZWQgdGhlbSB0byBrZWVwIFJlYWN0IDE4J3NcbiAgLy8gdXNlSWQgaGFwcHkgd2hlbiB3ZSBhcmUgc2VydmVyLXJlbmRlcmluZyBzaW5jZSB3ZSBtYXkgaGF2ZSBhIDxzY3JpcHQ+IGhlcmVcbiAgLy8gY29udGFpbmluZyB0aGUgaHlkcmF0ZWQgc2VydmVyLXNpZGUgc3RhdGljQ29udGV4dCAoZnJvbSBTdGF0aWNSb3V0ZXJQcm92aWRlcikuXG4gIC8vIHVzZUlkIHJlbGllcyBvbiB0aGUgY29tcG9uZW50IHRyZWUgc3RydWN0dXJlIHRvIGdlbmVyYXRlIGRldGVybWluaXN0aWMgaWQnc1xuICAvLyBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBpdCByZW1haW5zIHRoZSBzYW1lIG9uIHRoZSBjbGllbnQgZXZlbiB0aG91Z2hcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgPHNjcmlwdD4gdGFnXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZGF0YVJvdXRlckNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdGF0ZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yLFxuICAgIGZ1dHVyZToge1xuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IHJvdXRlci5mdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgICB9XG4gIH0sIHN0YXRlLmluaXRpYWxpemVkIHx8IHJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgZnV0dXJlOiByb3V0ZXIuZnV0dXJlLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KSA6IGZhbGxiYWNrRWxlbWVudCkpKSwgbnVsbCk7XG59XG5mdW5jdGlvbiBEYXRhUm91dGVzKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgcm91dGVzLFxuICAgIGZ1dHVyZSxcbiAgICBzdGF0ZVxuICB9ID0gX3JlZjI7XG4gIHJldHVybiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgdW5kZWZpbmVkLCBzdGF0ZSwgZnV0dXJlKTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjM7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmNDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCI8TmF2aWdhdGU+IG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgZnV0dXJlLFxuICAgIHN0YXRpYzogaXNTdGF0aWNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyghaXNTdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuXG4gIC8vIFJlc29sdmUgdGhlIHBhdGggb3V0c2lkZSBvZiB0aGUgZWZmZWN0IHNvIHRoYXQgd2hlbiBlZmZlY3RzIHJ1biB0d2ljZSBpblxuICAvLyBTdHJpY3RNb2RlIHRoZXkgbmF2aWdhdGUgdG8gdGhlIHNhbWUgcGxhY2VcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCksIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIik7XG4gIGxldCBqc29uUGF0aCA9IEpTT04uc3RyaW5naWZ5KHBhdGgpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gbmF2aWdhdGUoSlNPTi5wYXJzZShqc29uUGF0aCksIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0pLCBbbmF2aWdhdGUsIGpzb25QYXRoLCByZWxhdGl2ZSwgcmVwbGFjZSwgc3RhdGVdKTtcbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIGNoaWxkIHJvdXRlJ3MgZWxlbWVudCwgaWYgdGhlcmUgaXMgb25lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9vdXRsZXRcbiAqL1xuZnVuY3Rpb24gT3V0bGV0KHByb3BzKSB7XG4gIHJldHVybiB1c2VPdXRsZXQocHJvcHMuY29udGV4dCk7XG59XG4vKipcbiAqIERlY2xhcmVzIGFuIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQgYXQgYSBjZXJ0YWluIFVSTCBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZShfcHJvcHMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIFwiICsgXCJuZXZlciByZW5kZXJlZCBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciA8Um91dGU+IGluIGEgPFJvdXRlcz4uXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgO1xufVxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIGA8Um91dGVyPmAgZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSBgPEJyb3dzZXJSb3V0ZXI+YFxuICogaW4gd2ViIGJyb3dzZXJzIG9yIGEgYDxTdGF0aWNSb3V0ZXI+YCBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL3JvdXRlclxuICovXG5mdW5jdGlvbiBSb3V0ZXIoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWVQcm9wID0gXCIvXCIsXG4gICAgY2hpbGRyZW4gPSBudWxsLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgbmF2aWdhdGlvblR5cGUgPSBBY3Rpb24uUG9wLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AgPSBmYWxzZSxcbiAgICBmdXR1cmVcbiAgfSA9IF9yZWY1O1xuICAhIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90IHJlbmRlciBhIDxSb3V0ZXI+IGluc2lkZSBhbm90aGVyIDxSb3V0ZXI+LlwiICsgXCIgWW91IHNob3VsZCBuZXZlciBoYXZlIG1vcmUgdGhhbiBvbmUgaW4geW91ciBhcHAuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgLy8gUHJlc2VydmUgdHJhaWxpbmcgc2xhc2hlcyBvbiBiYXNlbmFtZSwgc28gd2UgY2FuIGxldCB0aGUgdXNlciBjb250cm9sXG4gIC8vIHRoZSBlbmZvcmNlbWVudCBvZiB0cmFpbGluZyBzbGFzaGVzIHRocm91Z2hvdXQgdGhlIGFwcFxuICBsZXQgYmFzZW5hbWUgPSBiYXNlbmFtZVByb3AucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4gIGxldCBuYXZpZ2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe1xuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlXG4gICAgfSwgZnV0dXJlKVxuICB9KSwgW2Jhc2VuYW1lLCBmdXR1cmUsIG5hdmlnYXRvciwgc3RhdGljUHJvcF0pO1xuICBpZiAodHlwZW9mIGxvY2F0aW9uUHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApO1xuICB9XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIlxuICB9ID0gbG9jYXRpb25Qcm9wO1xuICBsZXQgbG9jYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IHRyYWlsaW5nUGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSk7XG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBsb2NhdGlvbjoge1xuICAgICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgICAgc2VhcmNoLFxuICAgICAgICBoYXNoLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAga2V5XG4gICAgICB9LFxuICAgICAgbmF2aWdhdGlvblR5cGVcbiAgICB9O1xuICB9LCBbYmFzZW5hbWUsIHBhdGhuYW1lLCBzZWFyY2gsIGhhc2gsIHN0YXRlLCBrZXksIG5hdmlnYXRpb25UeXBlXSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGxvY2F0aW9uQ29udGV4dCAhPSBudWxsLCBcIjxSb3V0ZXIgYmFzZW5hbWU9XFxcIlwiICsgYmFzZW5hbWUgKyBcIlxcXCI+IGlzIG5vdCBhYmxlIHRvIG1hdGNoIHRoZSBVUkwgXCIgKyAoXCJcXFwiXCIgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggKyBcIlxcXCIgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdGFydCB3aXRoIHRoZSBcIikgKyBcImJhc2VuYW1lLCBzbyB0aGUgPFJvdXRlcj4gd29uJ3QgcmVuZGVyIGFueXRoaW5nLlwiKSA6IHZvaWQgMDtcbiAgaWYgKGxvY2F0aW9uQ29udGV4dCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG5hdmlnYXRpb25Db250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICB2YWx1ZTogbG9jYXRpb25Db250ZXh0XG4gIH0pKTtcbn1cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgYDxSb3V0ZT5gIGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvcm91dGVzXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcyhfcmVmNikge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uXG4gIH0gPSBfcmVmNjtcbiAgcmV0dXJuIHVzZVJvdXRlcyhjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pLCBsb2NhdGlvbik7XG59XG4vKipcbiAqIENvbXBvbmVudCB0byB1c2UgZm9yIHJlbmRlcmluZyBsYXppbHkgbG9hZGVkIGRhdGEgZnJvbSByZXR1cm5pbmcgZGVmZXIoKVxuICogaW4gYSBsb2FkZXIgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gQXdhaXQoX3JlZjcpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBlcnJvckVsZW1lbnQsXG4gICAgcmVzb2x2ZVxuICB9ID0gX3JlZjc7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdEVycm9yQm91bmRhcnksIHtcbiAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgIGVycm9yRWxlbWVudDogZXJyb3JFbGVtZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc29sdmVBd2FpdCwgbnVsbCwgY2hpbGRyZW4pKTtcbn1cbnZhciBBd2FpdFJlbmRlclN0YXR1cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoQXdhaXRSZW5kZXJTdGF0dXMpIHtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJwZW5kaW5nXCJdID0gMF0gPSBcInBlbmRpbmdcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJzdWNjZXNzXCJdID0gMV0gPSBcInN1Y2Nlc3NcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJlcnJvclwiXSA9IDJdID0gXCJlcnJvclwiO1xuICByZXR1cm4gQXdhaXRSZW5kZXJTdGF0dXM7XG59KEF3YWl0UmVuZGVyU3RhdHVzIHx8IHt9KTtcbmNvbnN0IG5ldmVyU2V0dGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG5jbGFzcyBBd2FpdEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXJyb3I6IG51bGxcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JcbiAgICB9O1xuICB9XG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiPEF3YWl0PiBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBsZXQge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBlcnJvckVsZW1lbnQsXG4gICAgICByZXNvbHZlXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHByb21pc2UgPSBudWxsO1xuICAgIGxldCBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgIGlmICghKHJlc29sdmUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgLy8gRGlkbid0IGdldCBhIHByb21pc2UgLSBwcm92aWRlIGFzIGEgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcztcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgIC8vIENhdWdodCBhIHJlbmRlciBlcnJvciwgcHJvdmlkZSBpdCBhcyBhIHJlamVjdGVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yO1xuICAgICAgbGV0IHJlbmRlckVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlamVjdCgpLmNhdGNoKCgpID0+IHt9KTsgLy8gQXZvaWQgdW5oYW5kbGVkIHJlamVjdGlvbiB3YXJuaW5nc1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZW5kZXJFcnJvclxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChyZXNvbHZlLl90cmFja2VkKSB7XG4gICAgICAvLyBBbHJlYWR5IHRyYWNrZWQgcHJvbWlzZSAtIGNoZWNrIGNvbnRlbnRzXG4gICAgICBwcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgIHN0YXR1cyA9IFwiX2Vycm9yXCIgaW4gcHJvbWlzZSA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yIDogXCJfZGF0YVwiIGluIHByb21pc2UgPyBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzIDogQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmF3ICh1bnRyYWNrZWQpIHByb21pc2UgLSB0cmFjayBpdFxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSByZXNvbHZlLnRoZW4oZGF0YSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgICAgfSksIGVycm9yID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgcHJvbWlzZS5fZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgLy8gRnJlZXplIHRoZSBVSSBieSB0aHJvd2luZyBhIG5ldmVyIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHRocm93IG5ldmVyU2V0dGxlZFByb21pc2U7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmICFlcnJvckVsZW1lbnQpIHtcbiAgICAgIC8vIE5vIGVycm9yRWxlbWVudCwgdGhyb3cgdG8gdGhlIG5lYXJlc3Qgcm91dGUtbGV2ZWwgZXJyb3IgYm91bmRhcnlcbiAgICAgIHRocm93IHByb21pc2UuX2Vycm9yO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcikge1xuICAgICAgLy8gUmVuZGVyIHZpYSBvdXIgZXJyb3JFbGVtZW50XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogZXJyb3JFbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2Vzcykge1xuICAgICAgLy8gUmVuZGVyIGNoaWxkcmVuIHdpdGggcmVzb2x2ZWQgdmFsdWVcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVGhyb3cgdG8gdGhlIHN1c3BlbnNlIGJvdW5kYXJ5XG4gICAgdGhyb3cgcHJvbWlzZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBJbmRpcmVjdGlvbiB0byBsZXZlcmFnZSB1c2VBc3luY1ZhbHVlIGZvciBhIHJlbmRlci1wcm9wIEFQSSBvbiBgPEF3YWl0PmBcbiAqL1xuZnVuY3Rpb24gUmVzb2x2ZUF3YWl0KF9yZWY4KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY4O1xuICBsZXQgZGF0YSA9IHVzZUFzeW5jVmFsdWUoKTtcbiAgbGV0IHRvUmVuZGVyID0gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbihkYXRhKSA6IGNoaWxkcmVuO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIHRvUmVuZGVyKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvY3JlYXRlLXJvdXRlcy1mcm9tLWNoaWxkcmVuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50UGF0aCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGxldCByb3V0ZXMgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAvLyBJZ25vcmUgbm9uLWVsZW1lbnRzLiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gbW9yZSBlYXNpbHkgaW5saW5lXG4gICAgICAvLyBjb25kaXRpb25hbHMgaW4gdGhlaXIgcm91dGUgY29uZmlnLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFJlYWN0LkZyYWdtZW50KSB7XG4gICAgICAvLyBUcmFuc3BhcmVudGx5IHN1cHBvcnQgUmVhY3QuRnJhZ21lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgIHJvdXRlcy5wdXNoLmFwcGx5KHJvdXRlcywgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICEoZWxlbWVudC50eXBlID09PSBSb3V0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIltcIiArICh0eXBlb2YgZWxlbWVudC50eXBlID09PSBcInN0cmluZ1wiID8gZWxlbWVudC50eXBlIDogZWxlbWVudC50eXBlLm5hbWUpICsgXCJdIGlzIG5vdCBhIDxSb3V0ZT4gY29tcG9uZW50LiBBbGwgY29tcG9uZW50IGNoaWxkcmVuIG9mIDxSb3V0ZXM+IG11c3QgYmUgYSA8Um91dGU+IG9yIDxSZWFjdC5GcmFnbWVudD5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKCFlbGVtZW50LnByb3BzLmluZGV4IHx8ICFlbGVtZW50LnByb3BzLmNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQW4gaW5kZXggcm91dGUgY2Fubm90IGhhdmUgY2hpbGQgcm91dGVzLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGlkOiBlbGVtZW50LnByb3BzLmlkIHx8IHRyZWVQYXRoLmpvaW4oXCItXCIpLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgQ29tcG9uZW50OiBlbGVtZW50LnByb3BzLkNvbXBvbmVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoLFxuICAgICAgbG9hZGVyOiBlbGVtZW50LnByb3BzLmxvYWRlcixcbiAgICAgIGFjdGlvbjogZWxlbWVudC5wcm9wcy5hY3Rpb24sXG4gICAgICBlcnJvckVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50LFxuICAgICAgRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5LFxuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHwgZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQgIT0gbnVsbCxcbiAgICAgIHNob3VsZFJldmFsaWRhdGU6IGVsZW1lbnQucHJvcHMuc2hvdWxkUmV2YWxpZGF0ZSxcbiAgICAgIGhhbmRsZTogZWxlbWVudC5wcm9wcy5oYW5kbGUsXG4gICAgICBsYXp5OiBlbGVtZW50LnByb3BzLmxhenlcbiAgICB9O1xuICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCB0cmVlUGF0aCk7XG4gICAgfVxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IG9mIGBtYXRjaFJvdXRlcygpYCBpbnRvIGEgUmVhY3QgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cblxuZnVuY3Rpb24gbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSB7XG4gIGxldCB1cGRhdGVzID0ge1xuICAgIC8vIE5vdGU6IHRoaXMgY2hlY2sgYWxzbyBvY2N1cnMgaW4gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIHNvIHVwZGF0ZVxuICAgIC8vIHRoZXJlIGlmIHlvdSBjaGFuZ2UgdGhpcyAtLSBwbGVhc2UgYW5kIHRoYW5rIHlvdSFcbiAgICBoYXNFcnJvckJvdW5kYXJ5OiByb3V0ZS5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHwgcm91dGUuZXJyb3JFbGVtZW50ICE9IG51bGxcbiAgfTtcbiAgaWYgKHJvdXRlLkNvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChyb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgQ29tcG9uZW50YCBhbmQgYGVsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArIFwiYENvbXBvbmVudGAgd2lsbCBiZSB1c2VkLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih1cGRhdGVzLCB7XG4gICAgICBlbGVtZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5Db21wb25lbnQpLFxuICAgICAgQ29tcG9uZW50OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICBpZiAocm91dGUuSHlkcmF0ZUZhbGxiYWNrKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBIeWRyYXRlRmFsbGJhY2tgIGFuZCBgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgSHlkcmF0ZUZhbGxiYWNrYCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkh5ZHJhdGVGYWxsYmFjayksXG4gICAgICBIeWRyYXRlRmFsbGJhY2s6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIGlmIChyb3V0ZS5FcnJvckJvdW5kYXJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEVycm9yQm91bmRhcnlgIGFuZCBgZXJyb3JFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBFcnJvckJvdW5kYXJ5YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVycm9yRWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuRXJyb3JCb3VuZGFyeSksXG4gICAgICBFcnJvckJvdW5kYXJ5OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdXBkYXRlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXM6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXg6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEluZGV4XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgZGF0YVN0cmF0ZWd5OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmRhdGFTdHJhdGVneSxcbiAgICBwYXRjaFJvdXRlc09uTmF2aWdhdGlvbjogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wYXRjaFJvdXRlc09uTmF2aWdhdGlvblxuICB9KS5pbml0aWFsaXplKCk7XG59XG5cbmV4cG9ydCB7IEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIERhdGFSb3V0ZXJDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgRGF0YVJvdXRlclN0YXRlQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgTG9jYXRpb25Db250ZXh0IGFzIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIE5hdmlnYXRpb25Db250ZXh0IGFzIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgUm91dGVDb250ZXh0IGFzIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIG1hcFJvdXRlUHJvcGVydGllcyBhcyBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLCB1c2VSb3V0ZUlkIGFzIFVOU0FGRV91c2VSb3V0ZUlkLCB1c2VSb3V0ZXNJbXBsIGFzIFVOU0FGRV91c2VSb3V0ZXNJbXBsLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIGFzIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgcmVuZGVyTWF0Y2hlcywgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlQmxvY2tlciwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4yNy4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBSb3V0ZXIsIFVOU0FGRV91c2VSb3V0ZXNJbXBsLCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIHVzZUhyZWYsIHVzZVJlc29sdmVkUGF0aCwgdXNlTG9jYXRpb24sIHVzZU5hdmlnYXRlLCBjcmVhdGVQYXRoLCBVTlNBRkVfdXNlUm91dGVJZCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGlvbiwgdXNlQmxvY2tlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBVTlNBRkVfUm91dGVDb250ZXh0LCBVTlNBRkVfdXNlUm91dGVJZCwgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlbmRlck1hdGNoZXMsIHJlcGxhY2UsIHJlc29sdmVQYXRoLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VCbG9ja2VyLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgc3RyaXBCYXNlbmFtZSwgVU5TQUZFX3dhcm5pbmcsIGNyZWF0ZVJvdXRlciwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwsIFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocywgSURMRV9GRVRDSEVSLCBtYXRjaFBhdGggfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5leHBvcnQgeyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwgfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgZGVmYXVsdE1ldGhvZCA9IFwiZ2V0XCI7XG5jb25zdCBkZWZhdWx0RW5jVHlwZSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgdHlwZW9mIG9iamVjdC50YWdOYW1lID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNCdXR0b25FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYnV0dG9uXCI7XG59XG5mdW5jdGlvbiBpc0Zvcm1FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZm9ybVwiO1xufVxuZnVuY3Rpb24gaXNJbnB1dEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiO1xufVxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwICYmIChcbiAgLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmXG4gIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gIDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSBcIlwiO1xuICB9XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHR5cGVvZiBpbml0ID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoaW5pdCkgfHwgaW5pdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/IGluaXQgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGluaXRba2V5XTtcbiAgICByZXR1cm4gbWVtby5jb25jYXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAodiA9PiBba2V5LCB2XSkgOiBbW2tleSwgdmFsdWVdXSk7XG4gIH0sIFtdKSk7XG59XG5mdW5jdGlvbiBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvblNlYXJjaCwgZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uU2VhcmNoKTtcbiAgaWYgKGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgICAvLyBVc2UgYGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCguLi4pYCBoZXJlIGluc3RlYWQgb2YgaXRlcmF0aW5nIG9mXG4gICAgLy8gYGRlZmF1bHRTZWFyY2hQYXJhbXMua2V5cygpYCB0byB3b3JrLWFyb3VuZCBhIGJ1ZyBpbiBGaXJlZm94IHJlbGF0ZWQgdG9cbiAgICAvLyB3ZWIgZXh0ZW5zaW9ucy4gUmVsZXZhbnQgQnVnemlsbGEgdGlja2V0czpcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDE0NjAyXG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTAyMzk4NFxuICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zLmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG4vLyBPbmUtdGltZSBjaGVjayBmb3Igc3VibWl0dGVyIHN1cHBvcnRcbmxldCBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IG51bGw7XG5mdW5jdGlvbiBpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkge1xuICBpZiAoX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPT09IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZvcm1EYXRhKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpZiBGb3JtRGF0YSBzdXBwb3J0cyB0aGUgc3VibWl0dGVyIHBhcmFtZXRlciwgdGhpcyB3aWxsIHRocm93XG4gICAgICAwKTtcbiAgICAgIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXI7XG59XG5jb25zdCBzdXBwb3J0ZWRGb3JtRW5jVHlwZXMgPSBuZXcgU2V0KFtcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiwgXCJ0ZXh0L3BsYWluXCJdKTtcbmZ1bmN0aW9uIGdldEZvcm1FbmNUeXBlKGVuY1R5cGUpIHtcbiAgaWYgKGVuY1R5cGUgIT0gbnVsbCAmJiAhc3VwcG9ydGVkRm9ybUVuY1R5cGVzLmhhcyhlbmNUeXBlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIlxcXCJcIiArIGVuY1R5cGUgKyBcIlxcXCIgaXMgbm90IGEgdmFsaWQgYGVuY1R5cGVgIGZvciBgPEZvcm0+YC9gPGZldGNoZXIuRm9ybT5gIFwiICsgKFwiYW5kIHdpbGwgZGVmYXVsdCB0byBcXFwiXCIgKyBkZWZhdWx0RW5jVHlwZSArIFwiXFxcIlwiKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGVuY1R5cGU7XG59XG5mdW5jdGlvbiBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBiYXNlbmFtZSkge1xuICBsZXQgbWV0aG9kO1xuICBsZXQgYWN0aW9uO1xuICBsZXQgZW5jVHlwZTtcbiAgbGV0IGZvcm1EYXRhO1xuICBsZXQgYm9keTtcbiAgaWYgKGlzRm9ybUVsZW1lbnQodGFyZ2V0KSkge1xuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgZW5jVHlwZSA9IGdldEZvcm1FbmNUeXBlKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuICB9IGVsc2UgaWYgKGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8IGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiYgKHRhcmdldC50eXBlID09PSBcInN1Ym1pdFwiIHx8IHRhcmdldC50eXBlID09PSBcImltYWdlXCIpKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcbiAgICBpZiAoZm9ybSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGEgPGJ1dHRvbj4gb3IgPGlucHV0IHR5cGU9XFxcInN1Ym1pdFxcXCI+IHdpdGhvdXQgYSA8Zm9ybT5cIik7XG4gICAgfVxuICAgIC8vIDxidXR0b24+LzxpbnB1dCB0eXBlPVwic3VibWl0XCI+IG1heSBvdmVycmlkZSBhdHRyaWJ1dGVzIG9mIDxmb3JtPlxuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG4gICAgbWV0aG9kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1lbmN0eXBlXCIpKSB8fCBnZXRGb3JtRW5jVHlwZShmb3JtLmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIC8vIEJ1aWxkIGEgRm9ybURhdGEgb2JqZWN0IHBvcHVsYXRlZCBmcm9tIGEgZm9ybSBhbmQgc3VibWl0dGVyXG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSwgdGFyZ2V0KTtcbiAgICAvLyBJZiB0aGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSBgRm9ybURhdGEoZWwsIHN1Ym1pdHRlcilgIGZvcm1hdCxcbiAgICAvLyB0aGVuIHRhY2sgb24gdGhlIHN1Ym1pdHRlciB2YWx1ZSBhdCB0aGUgZW5kLiAgVGhpcyBpcyBhIGxpZ2h0d2VpZ2h0XG4gICAgLy8gc29sdXRpb24gdGhhdCBpcyBub3QgMTAwJSBzcGVjIGNvbXBsaWFudC4gIEZvciBjb21wbGV0ZSBzdXBwb3J0IGluIG9sZGVyXG4gICAgLy8gYnJvd3NlcnMsIGNvbnNpZGVyIHVzaW5nIHRoZSBgZm9ybWRhdGEtc3VibWl0dGVyLXBvbHlmaWxsYCBwYWNrYWdlXG4gICAgaWYgKCFpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHZhbHVlXG4gICAgICB9ID0gdGFyZ2V0O1xuICAgICAgaWYgKHR5cGUgPT09IFwiaW1hZ2VcIikge1xuICAgICAgICBsZXQgcHJlZml4ID0gbmFtZSA/IG5hbWUgKyBcIi5cIiA6IFwiXCI7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInhcIiwgXCIwXCIpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQocHJlZml4ICsgXCJ5XCIsIFwiMFwiKTtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSkge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc0h0bWxFbGVtZW50KHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgXCIgKyBcIjxpbnB1dCB0eXBlPVxcXCJzdWJtaXR8aW1hZ2VcXFwiPlwiKTtcbiAgfSBlbHNlIHtcbiAgICBtZXRob2QgPSBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG51bGw7XG4gICAgZW5jVHlwZSA9IGRlZmF1bHRFbmNUeXBlO1xuICAgIGJvZHkgPSB0YXJnZXQ7XG4gIH1cbiAgLy8gU2VuZCBib2R5IGZvciA8Rm9ybSBlbmNUeXBlPVwidGV4dC9wbGFpblwiIHNvIHdlIGVuY29kZSBpdCBpbnRvIHRleHRcbiAgaWYgKGZvcm1EYXRhICYmIGVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgYm9keSA9IGZvcm1EYXRhO1xuICAgIGZvcm1EYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB7XG4gICAgYWN0aW9uLFxuICAgIG1ldGhvZDogbWV0aG9kLnRvTG93ZXJDYXNlKCksXG4gICAgZW5jVHlwZSxcbiAgICBmb3JtRGF0YSxcbiAgICBib2R5XG4gIH07XG59XG5cbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2xpY2tcIiwgXCJyZWxhdGl2ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwidGFyZ2V0XCIsIFwidG9cIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiwgXCJ2aWV3VHJhbnNpdGlvblwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwidmlld1RyYW5zaXRpb25cIiwgXCJjaGlsZHJlblwiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcImZldGNoZXJLZXlcIiwgXCJuYXZpZ2F0ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwibWV0aG9kXCIsIFwiYWN0aW9uXCIsIFwib25TdWJtaXRcIiwgXCJyZWxhdGl2ZVwiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiLCBcInZpZXdUcmFuc2l0aW9uXCJdO1xuLy8gSEVZIFlPVSEgRE9OJ1QgVE9VQ0ggVEhJUyBWQVJJQUJMRSFcbi8vXG4vLyBJdCBpcyByZXBsYWNlZCB3aXRoIHRoZSBwcm9wZXIgdmVyc2lvbiBhdCBidWlsZCB0aW1lIHZpYSBhIGJhYmVsIHBsdWdpbiBpblxuLy8gdGhlIHJvbGx1cCBjb25maWcuXG4vL1xuLy8gRXhwb3J0IGEgZ2xvYmFsIHByb3BlcnR5IG9udG8gdGhlIHdpbmRvdyBmb3IgUmVhY3QgUm91dGVyIGRldGVjdGlvbiBieSB0aGVcbi8vIENvcmUgV2ViIFZpdGFscyBUZWNobm9sb2d5IFJlcG9ydC4gIFRoaXMgd2F5IHRoZXkgY2FuIGNvbmZpZ3VyZSB0aGUgYHdhcHBhbHl6ZXJgXG4vLyB0byBkZXRlY3QgYW5kIHByb3Blcmx5IGNsYXNzaWZ5IGxpdmUgd2Vic2l0ZXMgYXMgYmVpbmcgYnVpbHQgd2l0aCBSZWFjdCBSb3V0ZXI6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vSFRUUEFyY2hpdmUvd2FwcGFseXplci9ibG9iL21haW4vc3JjL3RlY2hub2xvZ2llcy9yLmpzb25cbmNvbnN0IFJFQUNUX1JPVVRFUl9WRVJTSU9OID0gXCI2XCI7XG50cnkge1xuICB3aW5kb3cuX19yZWFjdFJvdXRlclZlcnNpb24gPSBSRUFDVF9ST1VURVJfVkVSU0lPTjtcbn0gY2F0Y2ggKGUpIHtcbiAgLy8gbm8tb3Bcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe30sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLCB7XG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWVcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllczogVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcyxcbiAgICBkYXRhU3RyYXRlZ3k6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZGF0YVN0cmF0ZWd5LFxuICAgIHBhdGNoUm91dGVzT25OYXZpZ2F0aW9uOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnBhdGNoUm91dGVzT25OYXZpZ2F0aW9uLFxuICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlSGFzaFJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgIGRhdGFTdHJhdGVneTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5kYXRhU3RyYXRlZ3ksXG4gICAgcGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb246IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb24sXG4gICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICB9KS5pbml0aWFsaXplKCk7XG59XG5mdW5jdGlvbiBwYXJzZUh5ZHJhdGlvbkRhdGEoKSB7XG4gIHZhciBfd2luZG93O1xuICBsZXQgc3RhdGUgPSAoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cuX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhO1xuICBpZiAoc3RhdGUgJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgIGVycm9yczogZGVzZXJpYWxpemVFcnJvcnMoc3RhdGUuZXJyb3JzKVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIGRlc2VyaWFsaXplRXJyb3JzKGVycm9ycykge1xuICBpZiAoIWVycm9ycykgcmV0dXJuIG51bGw7XG4gIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoZXJyb3JzKTtcbiAgbGV0IHNlcmlhbGl6ZWQgPSB7fTtcbiAgZm9yIChsZXQgW2tleSwgdmFsXSBvZiBlbnRyaWVzKSB7XG4gICAgLy8gSGV5IHlvdSEgIElmIHlvdSBjaGFuZ2UgdGhpcywgcGxlYXNlIGNoYW5nZSB0aGUgY29ycmVzcG9uZGluZyBsb2dpYyBpblxuICAgIC8vIHNlcmlhbGl6ZUVycm9ycyBpbiByZWFjdC1yb3V0ZXItZG9tL3NlcnZlci50c3ggOilcbiAgICBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiUm91dGVFcnJvclJlc3BvbnNlXCIpIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IG5ldyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwodmFsLnN0YXR1cywgdmFsLnN0YXR1c1RleHQsIHZhbC5kYXRhLCB2YWwuaW50ZXJuYWwgPT09IHRydWUpO1xuICAgIH0gZWxzZSBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiRXJyb3JcIikge1xuICAgICAgLy8gQXR0ZW1wdCB0byByZWNvbnN0cnVjdCB0aGUgcmlnaHQgdHlwZSBvZiBFcnJvciAoaS5lLiwgUmVmZXJlbmNlRXJyb3IpXG4gICAgICBpZiAodmFsLl9fc3ViVHlwZSkge1xuICAgICAgICBsZXQgRXJyb3JDb25zdHJ1Y3RvciA9IHdpbmRvd1t2YWwuX19zdWJUeXBlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvckNvbnN0cnVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yQ29uc3RydWN0b3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBuby1vcCAtIGZhbGwgdGhyb3VnaCBhbmQgY3JlYXRlIGEgbm9ybWFsIEVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VyaWFsaXplZFtrZXldID09IG51bGwpIHtcbiAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbmNvbnN0IFZpZXdUcmFuc2l0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFZpZXdUcmFuc2l0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiVmlld1RyYW5zaXRpb25cIjtcbn1cbmNvbnN0IEZldGNoZXJzQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG5ldyBNYXAoKSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZldGNoZXJzQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRmV0Y2hlcnNcIjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBDb21wb25lbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5jb25zdCBGTFVTSF9TWU5DID0gXCJmbHVzaFN5bmNcIjtcbmNvbnN0IGZsdXNoU3luY0ltcGwgPSBSZWFjdERPTVtGTFVTSF9TWU5DXTtcbmNvbnN0IFVTRV9JRCA9IFwidXNlSWRcIjtcbmNvbnN0IHVzZUlkSW1wbCA9IFJlYWN0W1VTRV9JRF07XG5mdW5jdGlvbiBzdGFydFRyYW5zaXRpb25TYWZlKGNiKSB7XG4gIGlmIChzdGFydFRyYW5zaXRpb25JbXBsKSB7XG4gICAgc3RhcnRUcmFuc2l0aW9uSW1wbChjYik7XG4gIH0gZWxzZSB7XG4gICAgY2IoKTtcbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hTeW5jU2FmZShjYikge1xuICBpZiAoZmx1c2hTeW5jSW1wbCkge1xuICAgIGZsdXNoU3luY0ltcGwoY2IpO1xuICB9IGVsc2Uge1xuICAgIGNiKCk7XG4gIH1cbn1cbmNsYXNzIERlZmVycmVkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBcInBlbmRpbmdcIjtcbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnJlc29sdmUgPSB2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwicmVzb2x2ZWRcIjtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMucmVqZWN0ID0gcmVhc29uID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCBbcGVuZGluZ1N0YXRlLCBzZXRQZW5kaW5nU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFt2dENvbnRleHQsIHNldFZ0Q29udGV4dF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICB9KTtcbiAgbGV0IFtyZW5kZXJEZmQsIHNldFJlbmRlckRmZF0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW3RyYW5zaXRpb24sIHNldFRyYW5zaXRpb25dID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFtpbnRlcnJ1cHRpb24sIHNldEludGVycnVwdGlvbl0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgZmV0Y2hlckRhdGEgPSBSZWFjdC51c2VSZWYobmV3IE1hcCgpKTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IG9wdEluU3RhcnRUcmFuc2l0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soY2IgPT4ge1xuICAgIGlmICh2N19zdGFydFRyYW5zaXRpb24pIHtcbiAgICAgIHN0YXJ0VHJhbnNpdGlvblNhZmUoY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfSwgW3Y3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygobmV3U3RhdGUsIF9yZWYyKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGRlbGV0ZWRGZXRjaGVycyxcbiAgICAgIGZsdXNoU3luYzogZmx1c2hTeW5jLFxuICAgICAgdmlld1RyYW5zaXRpb25PcHRzOiB2aWV3VHJhbnNpdGlvbk9wdHNcbiAgICB9ID0gX3JlZjI7XG4gICAgZGVsZXRlZEZldGNoZXJzLmZvckVhY2goa2V5ID0+IGZldGNoZXJEYXRhLmN1cnJlbnQuZGVsZXRlKGtleSkpO1xuICAgIG5ld1N0YXRlLmZldGNoZXJzLmZvckVhY2goKGZldGNoZXIsIGtleSkgPT4ge1xuICAgICAgaWYgKGZldGNoZXIuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZldGNoZXJEYXRhLmN1cnJlbnQuc2V0KGtleSwgZmV0Y2hlci5kYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlID0gcm91dGVyLndpbmRvdyA9PSBudWxsIHx8IHJvdXRlci53aW5kb3cuZG9jdW1lbnQgPT0gbnVsbCB8fCB0eXBlb2Ygcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uICE9PSBcImZ1bmN0aW9uXCI7XG4gICAgLy8gSWYgdGhpcyBpc24ndCBhIHZpZXcgdHJhbnNpdGlvbiBvciBpdCdzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBicm93c2VyLFxuICAgIC8vIGp1c3QgdXBkYXRlIGFuZCBiZSBkb25lIHdpdGggaXRcbiAgICBpZiAoIXZpZXdUcmFuc2l0aW9uT3B0cyB8fCBpc1ZpZXdUcmFuc2l0aW9uVW5hdmFpbGFibGUpIHtcbiAgICAgIGlmIChmbHVzaFN5bmMpIHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdEluU3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmbHVzaFN5bmMgKyBzdGFydFZpZXdUcmFuc2l0aW9uXG4gICAgaWYgKGZsdXNoU3luYykge1xuICAgICAgLy8gRmx1c2ggdGhyb3VnaCB0aGUgY29udGV4dCB0byBtYXJrIERPTSBlbGVtZW50cyBhcyB0cmFuc2l0aW9uPWluZ1xuICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiB7XG4gICAgICAgIC8vIENhbmNlbCBhbnkgcGVuZGluZyB0cmFuc2l0aW9uc1xuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgIHJlbmRlckRmZCAmJiByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgICAgICAgIHRyYW5zaXRpb24uc2tpcFRyYW5zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZSxcbiAgICAgICAgICBmbHVzaFN5bmM6IHRydWUsXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLy8gVXBkYXRlIHRoZSBET01cbiAgICAgIGxldCB0ID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQ2xlYW4gdXAgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXNcbiAgICAgIHQuZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4ge1xuICAgICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICAgIHNldFRyYW5zaXRpb24odW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRQZW5kaW5nU3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRUcmFuc2l0aW9uKHQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc3RhcnRUcmFuc2l0aW9uICsgc3RhcnRWaWV3VHJhbnNpdGlvblxuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAvLyBJbnRlcnJ1cHRpbmcgYW4gaW4tcHJvZ3Jlc3MgdHJhbnNpdGlvbiwgY2FuY2VsIGFuZCBsZXQgZXZlcnl0aGluZyBmbHVzaFxuICAgICAgLy8gb3V0LCBhbmQgdGhlbiBraWNrIG9mZiBhIG5ldyB0cmFuc2l0aW9uIGZyb20gdGhlIGludGVycnVwdGlvbiBzdGF0ZVxuICAgICAgcmVuZGVyRGZkICYmIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgICB0cmFuc2l0aW9uLnNraXBUcmFuc2l0aW9uKCk7XG4gICAgICBzZXRJbnRlcnJ1cHRpb24oe1xuICAgICAgICBzdGF0ZTogbmV3U3RhdGUsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29tcGxldGVkIG5hdmlnYXRpb24gdXBkYXRlIHdpdGggb3B0ZWQtaW4gdmlldyB0cmFuc2l0aW9ucywgbGV0ICdlciByaXBcbiAgICAgIHNldFBlbmRpbmdTdGF0ZShuZXdTdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIud2luZG93LCB0cmFuc2l0aW9uLCByZW5kZXJEZmQsIGZldGNoZXJEYXRhLCBvcHRJblN0YXJ0VHJhbnNpdGlvbl0pO1xuICAvLyBOZWVkIHRvIHVzZSBhIGxheW91dCBlZmZlY3QgaGVyZSBzbyB3ZSBhcmUgc3Vic2NyaWJlZCBlYXJseSBlbm91Z2ggdG9cbiAgLy8gcGljayB1cCBvbiBhbnkgcmVuZGVyLWRyaXZlbiByZWRpcmVjdHMvbmF2aWdhdGlvbnMgKHVzZUVmZmVjdC88TmF2aWdhdGU+KVxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gcm91dGVyLnN1YnNjcmliZShzZXRTdGF0ZSksIFtyb3V0ZXIsIHNldFN0YXRlXSk7XG4gIC8vIFdoZW4gd2Ugc3RhcnQgYSB2aWV3IHRyYW5zaXRpb24sIGNyZWF0ZSBhIERlZmVycmVkIHdlIGNhbiB1c2UgZm9yIHRoZVxuICAvLyBldmVudHVhbCBcImNvbXBsZXRlZFwiIHJlbmRlclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmICF2dENvbnRleHQuZmx1c2hTeW5jKSB7XG4gICAgICBzZXRSZW5kZXJEZmQobmV3IERlZmVycmVkKCkpO1xuICAgIH1cbiAgfSwgW3Z0Q29udGV4dF0pO1xuICAvLyBPbmNlIHRoZSBkZWZlcnJlZCBpcyBjcmVhdGVkLCBraWNrIG9mZiBzdGFydFZpZXdUcmFuc2l0aW9uKCkgdG8gdXBkYXRlIHRoZVxuICAvLyBET00gYW5kIHRoZW4gd2FpdCBvbiB0aGUgRGVmZXJyZWQgdG8gcmVzb2x2ZSAoaW5kaWNhdGluZyB0aGUgRE9NIHVwZGF0ZSBoYXNcbiAgLy8gaGFwcGVuZWQpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgcm91dGVyLndpbmRvdykge1xuICAgICAgbGV0IG5ld1N0YXRlID0gcGVuZGluZ1N0YXRlO1xuICAgICAgbGV0IHJlbmRlclByb21pc2UgPSByZW5kZXJEZmQucHJvbWlzZTtcbiAgICAgIGxldCB0cmFuc2l0aW9uID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgb3B0SW5TdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICAgIGF3YWl0IHJlbmRlclByb21pc2U7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zaXRpb24uZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICBzZXRUcmFuc2l0aW9uKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFBlbmRpbmdTdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHNldFRyYW5zaXRpb24odHJhbnNpdGlvbik7XG4gICAgfVxuICB9LCBbb3B0SW5TdGFydFRyYW5zaXRpb24sIHBlbmRpbmdTdGF0ZSwgcmVuZGVyRGZkLCByb3V0ZXIud2luZG93XSk7XG4gIC8vIFdoZW4gdGhlIG5ldyBsb2NhdGlvbiBmaW5hbGx5IHJlbmRlcnMgYW5kIGlzIGNvbW1pdHRlZCB0byB0aGUgRE9NLCB0aGlzXG4gIC8vIGVmZmVjdCB3aWxsIHJ1biB0byByZXNvbHZlIHRoZSB0cmFuc2l0aW9uXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgc3RhdGUubG9jYXRpb24ua2V5ID09PSBwZW5kaW5nU3RhdGUubG9jYXRpb24ua2V5KSB7XG4gICAgICByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgIH1cbiAgfSwgW3JlbmRlckRmZCwgdHJhbnNpdGlvbiwgc3RhdGUubG9jYXRpb24sIHBlbmRpbmdTdGF0ZV0pO1xuICAvLyBJZiB3ZSBnZXQgaW50ZXJydXB0ZWQgd2l0aCBhIG5ldyBuYXZpZ2F0aW9uIGR1cmluZyBhIHRyYW5zaXRpb24sIHdlIHNraXBcbiAgLy8gdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBsZXQgaXQgY2xlYW51cCwgdGhlbiBraWNrIGl0IG9mZiBhZ2FpbiBoZXJlXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmIGludGVycnVwdGlvbikge1xuICAgICAgc2V0UGVuZGluZ1N0YXRlKGludGVycnVwdGlvbi5zdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogaW50ZXJydXB0aW9uLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBpbnRlcnJ1cHRpb24ubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICAgIHNldEludGVycnVwdGlvbih1bmRlZmluZWQpO1xuICAgIH1cbiAgfSwgW3Z0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcsIGludGVycnVwdGlvbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbGxiYWNrRWxlbWVudCA9PSBudWxsIHx8ICFyb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24sIFwiYDxSb3V0ZXJQcm92aWRlciBmYWxsYmFja0VsZW1lbnQ+YCBpcyBkZXByZWNhdGVkIHdoZW4gdXNpbmcgXCIgKyBcImB2N19wYXJ0aWFsSHlkcmF0aW9uYCwgdXNlIGEgYEh5ZHJhdGVGYWxsYmFja2AgY29tcG9uZW50IGluc3RlYWRcIikgOiB2b2lkIDA7XG4gICAgLy8gT25seSBsb2cgdGhpcyBvbmNlIG9uIGluaXRpYWwgbW91bnRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcm91dGVyLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IGZhbHNlLFxuICAgIGJhc2VuYW1lXG4gIH0pLCBbcm91dGVyLCBuYXZpZ2F0b3IsIGJhc2VuYW1lXSk7XG4gIGxldCByb3V0ZXJGdXR1cmUgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IHJvdXRlci5mdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgfSksIFtyb3V0ZXIuZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoXSk7XG4gIC8vIFRoZSBmcmFnbWVudCBhbmQge251bGx9IGhlcmUgYXJlIGltcG9ydGFudCEgIFdlIG5lZWQgdGhlbSB0byBrZWVwIFJlYWN0IDE4J3NcbiAgLy8gdXNlSWQgaGFwcHkgd2hlbiB3ZSBhcmUgc2VydmVyLXJlbmRlcmluZyBzaW5jZSB3ZSBtYXkgaGF2ZSBhIDxzY3JpcHQ+IGhlcmVcbiAgLy8gY29udGFpbmluZyB0aGUgaHlkcmF0ZWQgc2VydmVyLXNpZGUgc3RhdGljQ29udGV4dCAoZnJvbSBTdGF0aWNSb3V0ZXJQcm92aWRlcikuXG4gIC8vIHVzZUlkIHJlbGllcyBvbiB0aGUgY29tcG9uZW50IHRyZWUgc3RydWN0dXJlIHRvIGdlbmVyYXRlIGRldGVybWluaXN0aWMgaWQnc1xuICAvLyBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBpdCByZW1haW5zIHRoZSBzYW1lIG9uIHRoZSBjbGllbnQgZXZlbiB0aG91Z2hcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgPHNjcmlwdD4gdGFnXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRhdGFSb3V0ZXJDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZldGNoZXJzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBmZXRjaGVyRGF0YS5jdXJyZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFZpZXdUcmFuc2l0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB2dENvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvcixcbiAgICBmdXR1cmU6IHJvdXRlckZ1dHVyZVxuICB9LCBzdGF0ZS5pbml0aWFsaXplZCB8fCByb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNZW1vaXplZERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgZnV0dXJlOiByb3V0ZXIuZnV0dXJlLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KSA6IGZhbGxiYWNrRWxlbWVudCkpKSkpLCBudWxsKTtcbn1cbi8vIE1lbW9pemUgdG8gYXZvaWQgcmUtcmVuZGVycyB3aGVuIHVwZGF0aW5nIGBWaWV3VHJhbnNpdGlvbkNvbnRleHRgXG5jb25zdCBNZW1vaXplZERhdGFSb3V0ZXMgPSAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyhEYXRhUm91dGVzKTtcbmZ1bmN0aW9uIERhdGFSb3V0ZXMoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXMsXG4gICAgZnV0dXJlLFxuICAgIHN0YXRlXG4gIH0gPSBfcmVmMztcbiAgcmV0dXJuIFVOU0FGRV91c2VSb3V0ZXNJbXBsKHJvdXRlcywgdW5kZWZpbmVkLCBzdGF0ZSwgZnV0dXJlKTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuZnVuY3Rpb24gQnJvd3NlclJvdXRlcihfcmVmNCkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY0O1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3csXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBTdG9yZXMgdGhlIGxvY2F0aW9uIGluIHRoZSBoYXNoXG4gKiBwb3J0aW9uIG9mIHRoZSBVUkwgc28gaXQgaXMgbm90IHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gSGFzaFJvdXRlcihfcmVmNSkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY1O1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3csXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgYWNjZXB0cyBhIHByZS1pbnN0YW50aWF0ZWQgaGlzdG9yeSBvYmplY3QuIEl0J3MgaW1wb3J0YW50XG4gKiB0byBub3RlIHRoYXQgdXNpbmcgeW91ciBvd24gaGlzdG9yeSBvYmplY3QgaXMgaGlnaGx5IGRpc2NvdXJhZ2VkIGFuZCBtYXkgYWRkXG4gKiB0d28gdmVyc2lvbnMgb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0byB5b3VyIGJ1bmRsZXMgdW5sZXNzIHlvdSB1c2UgdGhlIHNhbWVcbiAqIHZlcnNpb24gb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0aGF0IFJlYWN0IFJvdXRlciB1c2VzIGludGVybmFsbHkuXG4gKi9cbmZ1bmN0aW9uIEhpc3RvcnlSb3V0ZXIoX3JlZjYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgaGlzdG9yeVxuICB9ID0gX3JlZjY7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5LFxuICAgIGZ1dHVyZTogZnV0dXJlXG4gIH0pO1xufVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIaXN0b3J5Um91dGVyLmRpc3BsYXlOYW1lID0gXCJ1bnN0YWJsZV9IaXN0b3J5Um91dGVyXCI7XG59XG5jb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSBgPGE+YC5cbiAqL1xuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY3LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIG9uQ2xpY2ssXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgdGFyZ2V0LFxuICAgICAgdG8sXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB2aWV3VHJhbnNpdGlvblxuICAgIH0gPSBfcmVmNyxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjcsIF9leGNsdWRlZCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgYWJzb2x1dGUgVVJMc1xuICBsZXQgYWJzb2x1dGVIcmVmO1xuICBsZXQgaXNFeHRlcm5hbCA9IGZhbHNlO1xuICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiICYmIEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHRvKSkge1xuICAgIC8vIFJlbmRlciB0aGUgYWJzb2x1dGUgaHJlZiBzZXJ2ZXItIGFuZCBjbGllbnQtc2lkZVxuICAgIGFic29sdXRlSHJlZiA9IHRvO1xuICAgIC8vIE9ubHkgY2hlY2sgZm9yIGV4dGVybmFsIG9yaWdpbnMgY2xpZW50LXNpZGVcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBsZXQgdGFyZ2V0VXJsID0gdG8uc3RhcnRzV2l0aChcIi8vXCIpID8gbmV3IFVSTChjdXJyZW50VXJsLnByb3RvY29sICsgdG8pIDogbmV3IFVSTCh0byk7XG4gICAgICAgIGxldCBwYXRoID0gc3RyaXBCYXNlbmFtZSh0YXJnZXRVcmwucGF0aG5hbWUsIGJhc2VuYW1lKTtcbiAgICAgICAgaWYgKHRhcmdldFVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luICYmIHBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIC8vIFN0cmlwIHRoZSBwcm90b2NvbC9vcmlnaW4vYmFzZW5hbWUgZm9yIHNhbWUtb3JpZ2luIGFic29sdXRlIFVSTHNcbiAgICAgICAgICB0byA9IHBhdGggKyB0YXJnZXRVcmwuc2VhcmNoICsgdGFyZ2V0VXJsLmhhc2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNFeHRlcm5hbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3QgZG8gZXh0ZXJuYWwgVVJMIGRldGVjdGlvbiB3aXRob3V0IGEgdmFsaWQgVVJMXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIjxMaW5rIHRvPVxcXCJcIiArIHRvICsgXCJcXFwiPiBjb250YWlucyBhbiBpbnZhbGlkIFVSTCB3aGljaCB3aWxsIHByb2JhYmx5IGJyZWFrIFwiICsgXCJ3aGVuIGNsaWNrZWQgLSBwbGVhc2UgdXBkYXRlIHRvIGEgdmFsaWQgVVJMIHBhdGguXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciByZWxhdGl2ZSBVUkxzXG4gIGxldCBocmVmID0gdXNlSHJlZih0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgaW50ZXJuYWxPbkNsaWNrID0gdXNlTGlua0NsaWNrSGFuZGxlcih0bywge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZSxcbiAgICB2aWV3VHJhbnNpdGlvblxuICB9KTtcbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBpbnRlcm5hbE9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50XG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGFic29sdXRlSHJlZiB8fCBocmVmLFxuICAgICAgb25DbGljazogaXNFeHRlcm5hbCB8fCByZWxvYWREb2N1bWVudCA/IG9uQ2xpY2sgOiBoYW5kbGVDbGljayxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9KSlcbiAgKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG59XG4vKipcbiAqIEEgYDxMaW5rPmAgd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmNvbnN0IE5hdkxpbmsgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXZMaW5rV2l0aFJlZihfcmVmOCwgcmVmKSB7XG4gIGxldCB7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFByb3AgPSBcInBhZ2VcIixcbiAgICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCA9IFwiXCIsXG4gICAgICBlbmQgPSBmYWxzZSxcbiAgICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgICB0byxcbiAgICAgIHZpZXdUcmFuc2l0aW9uLFxuICAgICAgY2hpbGRyZW5cbiAgICB9ID0gX3JlZjgsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY4LCBfZXhjbHVkZWQyKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogcmVzdC5yZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yLFxuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBpc1RyYW5zaXRpb25pbmcgPSByb3V0ZXJTdGF0ZSAhPSBudWxsICYmXG4gIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIHVzZVZpZXdUcmFuc2l0aW9uU3RhdGUocGF0aCkgJiYgdmlld1RyYW5zaXRpb24gPT09IHRydWU7XG4gIGxldCB0b1BhdGhuYW1lID0gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKHBhdGgpLnBhdGhuYW1lIDogcGF0aC5wYXRobmFtZTtcbiAgbGV0IGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRMb2NhdGlvblBhdGhuYW1lID0gcm91dGVyU3RhdGUgJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbiAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uID8gcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbi5wYXRobmFtZSA6IG51bGw7XG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBuZXh0TG9jYXRpb25QYXRobmFtZSA/IG5leHRMb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgaWYgKG5leHRMb2NhdGlvblBhdGhuYW1lICYmIGJhc2VuYW1lKSB7XG4gICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKG5leHRMb2NhdGlvblBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbmV4dExvY2F0aW9uUGF0aG5hbWU7XG4gIH1cbiAgLy8gSWYgdGhlIGB0b2AgaGFzIGEgdHJhaWxpbmcgc2xhc2gsIGxvb2sgYXQgdGhhdCBleGFjdCBzcG90LiAgT3RoZXJ3aXNlLFxuICAvLyB3ZSdyZSBsb29raW5nIGZvciBhIHNsYXNoIF9hZnRlcl8gd2hhdCdzIGluIGB0b2AuICBGb3IgZXhhbXBsZTpcbiAgLy9cbiAgLy8gPE5hdkxpbmsgdG89XCIvdXNlcnNcIj4gYW5kIDxOYXZMaW5rIHRvPVwiL3VzZXJzL1wiPlxuICAvLyBib3RoIHdhbnQgdG8gbG9vayBmb3IgYSAvIGF0IGluZGV4IDYgdG8gbWF0Y2ggVVJMIGAvdXNlcnMvbWF0dGBcbiAgY29uc3QgZW5kU2xhc2hQb3NpdGlvbiA9IHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZS5sZW5ndGggLSAxIDogdG9QYXRobmFtZS5sZW5ndGg7XG4gIGxldCBpc0FjdGl2ZSA9IGxvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQoZW5kU2xhc2hQb3NpdGlvbikgPT09IFwiL1wiO1xuICBsZXQgaXNQZW5kaW5nID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgIT0gbnVsbCAmJiAobmV4dExvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiKTtcbiAgbGV0IHJlbmRlclByb3BzID0ge1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZyxcbiAgICBpc1RyYW5zaXRpb25pbmdcbiAgfTtcbiAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG4gIGxldCBjbGFzc05hbWU7XG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcChyZW5kZXJQcm9wcyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGNsYXNzTmFtZSBwcm9wIGlzIG5vdCBhIGZ1bmN0aW9uLCB3ZSB1c2UgYSBkZWZhdWx0IGBhY3RpdmVgXG4gICAgLy8gY2xhc3MgZm9yIDxOYXZMaW5rIC8+cyB0aGF0IGFyZSBhY3RpdmUuIEluIHY1IGBhY3RpdmVgIHdhcyB0aGUgZGVmYXVsdFxuICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgLy8gdXNlIHRoZSBvbGQgZGVmYXVsdCBiZWhhdmlvciBmb3IgYSBjbGVhbmVyIHVwZ3JhZGUgcGF0aCBhbmQga2VlcCB0aGVcbiAgICAvLyBzaW1wbGUgc3R5bGluZyBydWxlcyB3b3JraW5nIGFzIHRoZXkgY3VycmVudGx5IGRvLlxuICAgIGNsYXNzTmFtZSA9IFtjbGFzc05hbWVQcm9wLCBpc0FjdGl2ZSA/IFwiYWN0aXZlXCIgOiBudWxsLCBpc1BlbmRpbmcgPyBcInBlbmRpbmdcIiA6IG51bGwsIGlzVHJhbnNpdGlvbmluZyA/IFwidHJhbnNpdGlvbmluZ1wiIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG4gIGxldCBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcChyZW5kZXJQcm9wcykgOiBzdHlsZVByb3A7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0bzogdG8sXG4gICAgdmlld1RyYW5zaXRpb246IHZpZXdUcmFuc2l0aW9uXG4gIH0pLCB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHJlbmRlclByb3BzKSA6IGNoaWxkcmVuKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59XG4vKipcbiAqIEEgYEByZW1peC1ydW4vcm91dGVyYC1hd2FyZSBgPGZvcm0+YC4gSXQgYmVoYXZlcyBsaWtlIGEgbm9ybWFsIGZvcm0gZXhjZXB0XG4gKiB0aGF0IHRoZSBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgaXMgd2l0aCBgZmV0Y2hgIGluc3RlYWQgb2YgbmV3IGRvY3VtZW50XG4gKiByZXF1ZXN0cywgYWxsb3dpbmcgY29tcG9uZW50cyB0byBhZGQgbmljZXIgVVggdG8gdGhlIHBhZ2UgYXMgdGhlIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZCBhbmQgcmV0dXJucyB3aXRoIGRhdGEuXG4gKi9cbmNvbnN0IEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoX3JlZjksIGZvcndhcmRlZFJlZikgPT4ge1xuICBsZXQge1xuICAgICAgZmV0Y2hlcktleSxcbiAgICAgIG5hdmlnYXRlLFxuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICBtZXRob2QgPSBkZWZhdWx0TWV0aG9kLFxuICAgICAgYWN0aW9uLFxuICAgICAgb25TdWJtaXQsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHZpZXdUcmFuc2l0aW9uXG4gICAgfSA9IF9yZWY5LFxuICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjksIF9leGNsdWRlZDMpO1xuICBsZXQgc3VibWl0ID0gdXNlU3VibWl0KCk7XG4gIGxldCBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGZvcm1NZXRob2QgPSBtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gXCJnZXRcIiA/IFwiZ2V0XCIgOiBcInBvc3RcIjtcbiAgbGV0IHN1Ym1pdEhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgb25TdWJtaXQgJiYgb25TdWJtaXQoZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgc3VibWl0dGVyID0gZXZlbnQubmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIGxldCBzdWJtaXRNZXRob2QgPSAoc3VibWl0dGVyID09IG51bGwgPyB2b2lkIDAgOiBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSkgfHwgbWV0aG9kO1xuICAgIHN1Ym1pdChzdWJtaXR0ZXIgfHwgZXZlbnQuY3VycmVudFRhcmdldCwge1xuICAgICAgZmV0Y2hlcktleSxcbiAgICAgIG1ldGhvZDogc3VibWl0TWV0aG9kLFxuICAgICAgbmF2aWdhdGUsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHZpZXdUcmFuc2l0aW9uXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImZvcm1cIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogZm9yd2FyZGVkUmVmLFxuICAgIG1ldGhvZDogZm9ybU1ldGhvZCxcbiAgICBhY3Rpb246IGZvcm1BY3Rpb24sXG4gICAgb25TdWJtaXQ6IHJlbG9hZERvY3VtZW50ID8gb25TdWJtaXQgOiBzdWJtaXRIYW5kbGVyXG4gIH0sIHByb3BzKSk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRm9ybS5kaXNwbGF5TmFtZSA9IFwiRm9ybVwiO1xufVxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB3aWxsIGVtdWxhdGUgdGhlIGJyb3dzZXIncyBzY3JvbGwgcmVzdG9yYXRpb24gb24gbG9jYXRpb25cbiAqIGNoYW5nZXMuXG4gKi9cbmZ1bmN0aW9uIFNjcm9sbFJlc3RvcmF0aW9uKF9yZWYxMCkge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfcmVmMTA7XG4gIHVzZVNjcm9sbFJlc3RvcmF0aW9uKHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFNjcm9sbFJlc3RvcmF0aW9uLmRpc3BsYXlOYW1lID0gXCJTY3JvbGxSZXN0b3JhdGlvblwiO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhvb2tzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xudmFyIERhdGFSb3V0ZXJIb29rO1xuKGZ1bmN0aW9uIChEYXRhUm91dGVySG9vaykge1xuICBEYXRhUm91dGVySG9va1tcIlVzZVNjcm9sbFJlc3RvcmF0aW9uXCJdID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVN1Ym1pdFwiXSA9IFwidXNlU3VibWl0XCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU3VibWl0RmV0Y2hlclwiXSA9IFwidXNlU3VibWl0RmV0Y2hlclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZUZldGNoZXJcIl0gPSBcInVzZUZldGNoZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlXCJdID0gXCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlXCI7XG59KShEYXRhUm91dGVySG9vayB8fCAoRGF0YVJvdXRlckhvb2sgPSB7fSkpO1xudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUZldGNoZXJcIl0gPSBcInVzZUZldGNoZXJcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUZldGNoZXJzXCJdID0gXCJ1c2VGZXRjaGVyc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG59KShEYXRhUm91dGVyU3RhdGVIb29rIHx8IChEYXRhUm91dGVyU3RhdGVIb29rID0ge30pKTtcbi8vIEludGVybmFsIGhvb2tzXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gICFzdGF0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG4vLyBFeHRlcm5hbCBob29rc1xuLyoqXG4gKiBIYW5kbGVzIHRoZSBjbGljayBiZWhhdmlvciBmb3Igcm91dGVyIGA8TGluaz5gIGNvbXBvbmVudHMuIFRoaXMgaXMgdXNlZnVsIGlmXG4gKiB5b3UgbmVlZCB0byBjcmVhdGUgY3VzdG9tIGA8TGluaz5gIGNvbXBvbmVudHMgd2l0aCB0aGUgc2FtZSBjbGljayBiZWhhdmlvciB3ZVxuICogdXNlIGluIG91ciBleHBvcnRlZCBgPExpbms+YC5cbiAqL1xuZnVuY3Rpb24gdXNlTGlua0NsaWNrSGFuZGxlcih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICB0YXJnZXQsXG4gICAgcmVwbGFjZTogcmVwbGFjZVByb3AsXG4gICAgc3RhdGUsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlLFxuICAgIHZpZXdUcmFuc2l0aW9uXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIElmIHRoZSBVUkwgaGFzbid0IGNoYW5nZWQsIGEgcmVndWxhciA8YT4gd2lsbCBkbyBhIHJlcGxhY2UgaW5zdGVhZCBvZlxuICAgICAgLy8gYSBwdXNoLCBzbyBkbyB0aGUgc2FtZSBoZXJlIHVubGVzcyB0aGUgcmVwbGFjZSBwcm9wIGlzIGV4cGxpY2l0bHkgc2V0XG4gICAgICBsZXQgcmVwbGFjZSA9IHJlcGxhY2VQcm9wICE9PSB1bmRlZmluZWQgPyByZXBsYWNlUHJvcCA6IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuICAgICAgbmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIHZpZXdUcmFuc2l0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtsb2NhdGlvbiwgbmF2aWdhdGUsIHBhdGgsIHJlcGxhY2VQcm9wLCBzdGF0ZSwgdGFyZ2V0LCB0bywgcHJldmVudFNjcm9sbFJlc2V0LCByZWxhdGl2ZSwgdmlld1RyYW5zaXRpb25dKTtcbn1cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc2VhcmNoIHBhcmFtZXRlcnMgdmlhIHRoZVxuICogVVJMU2VhcmNoUGFyYW1zIGludGVyZmFjZS5cbiAqL1xuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09IFwidW5kZWZpbmVkXCIsIFwiWW91IGNhbm5vdCB1c2UgdGhlIGB1c2VTZWFyY2hQYXJhbXNgIGhvb2sgaW4gYSBicm93c2VyIHRoYXQgZG9lcyBub3QgXCIgKyBcInN1cHBvcnQgdGhlIFVSTFNlYXJjaFBhcmFtcyBBUEkuIElmIHlvdSBuZWVkIHRvIHN1cHBvcnQgSW50ZXJuZXQgXCIgKyBcIkV4cGxvcmVyIDExLCB3ZSByZWNvbW1lbmQgeW91IGxvYWQgYSBwb2x5ZmlsbCBzdWNoIGFzIFwiICsgXCJodHRwczovL2dpdGh1Yi5jb20vdW5nYXAvdXJsLXNlYXJjaC1wYXJhbXMuXCIpIDogdm9pZCAwO1xuICBsZXQgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihjcmVhdGVTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpKTtcbiAgbGV0IGhhc1NldFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VNZW1vKCgpID0+XG4gIC8vIE9ubHkgbWVyZ2UgaW4gdGhlIGRlZmF1bHRzIGlmIHdlIGhhdmVuJ3QgeWV0IGNhbGxlZCBzZXRTZWFyY2hQYXJhbXMuXG4gIC8vIE9uY2Ugd2UgY2FsbCB0aGF0IHdlIHdhbnQgdGhvc2UgdG8gdGFrZSBwcmVjZWRlbmNlLCBvdGhlcndpc2UgeW91IGNhbid0XG4gIC8vIHJlbW92ZSBhIHBhcmFtIHdpdGggc2V0U2VhcmNoUGFyYW1zKHt9KSBpZiBpdCBoYXMgYW4gaW5pdGlhbCB2YWx1ZVxuICBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvbi5zZWFyY2gsIGhhc1NldFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50ID8gbnVsbCA6IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCksIFtsb2NhdGlvbi5zZWFyY2hdKTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IHNldFNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZUNhbGxiYWNrKChuZXh0SW5pdCwgbmF2aWdhdGVPcHRpb25zKSA9PiB7XG4gICAgY29uc3QgbmV3U2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHR5cGVvZiBuZXh0SW5pdCA9PT0gXCJmdW5jdGlvblwiID8gbmV4dEluaXQoc2VhcmNoUGFyYW1zKSA6IG5leHRJbml0KTtcbiAgICBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA9IHRydWU7XG4gICAgbmF2aWdhdGUoXCI/XCIgKyBuZXdTZWFyY2hQYXJhbXMsIG5hdmlnYXRlT3B0aW9ucyk7XG4gIH0sIFtuYXZpZ2F0ZSwgc2VhcmNoUGFyYW1zXSk7XG4gIHJldHVybiBbc2VhcmNoUGFyYW1zLCBzZXRTZWFyY2hQYXJhbXNdO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVDbGllbnRTaWRlU3VibWlzc2lvbigpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgY2FsbGluZyBzdWJtaXQgZHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyLiBcIiArIFwiVHJ5IGNhbGxpbmcgc3VibWl0IHdpdGhpbiBhIGB1c2VFZmZlY3RgIG9yIGNhbGxiYWNrIGluc3RlYWQuXCIpO1xuICB9XG59XG5sZXQgZmV0Y2hlcklkID0gMDtcbmxldCBnZXRVbmlxdWVGZXRjaGVySWQgPSAoKSA9PiBcIl9fXCIgKyBTdHJpbmcoKytmZXRjaGVySWQpICsgXCJfX1wiO1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBwcm9ncmFtbWF0aWNhbGx5IHN1Ym1pdCBhIGZvcm0gKG9yXG4gKiBzb21lIGFyYml0cmFyeSBkYXRhKSB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiB1c2VTdWJtaXQoKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTdWJtaXQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBjdXJyZW50Um91dGVJZCA9IFVOU0FGRV91c2VSb3V0ZUlkKCk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCk7XG4gICAgbGV0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIG1ldGhvZCxcbiAgICAgIGVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGJvZHlcbiAgICB9ID0gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgYmFzZW5hbWUpO1xuICAgIGlmIChvcHRpb25zLm5hdmlnYXRlID09PSBmYWxzZSkge1xuICAgICAgbGV0IGtleSA9IG9wdGlvbnMuZmV0Y2hlcktleSB8fCBnZXRVbmlxdWVGZXRjaGVySWQoKTtcbiAgICAgIHJvdXRlci5mZXRjaChrZXksIGN1cnJlbnRSb3V0ZUlkLCBvcHRpb25zLmFjdGlvbiB8fCBhY3Rpb24sIHtcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgZm9ybURhdGEsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IG1ldGhvZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IG9wdGlvbnMuZW5jVHlwZSB8fCBlbmNUeXBlLFxuICAgICAgICBmbHVzaFN5bmM6IG9wdGlvbnMuZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKG9wdGlvbnMuYWN0aW9uIHx8IGFjdGlvbiwge1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdGlvbnMucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgYm9keSxcbiAgICAgICAgZm9ybU1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgbWV0aG9kLFxuICAgICAgICBmb3JtRW5jVHlwZTogb3B0aW9ucy5lbmNUeXBlIHx8IGVuY1R5cGUsXG4gICAgICAgIHJlcGxhY2U6IG9wdGlvbnMucmVwbGFjZSxcbiAgICAgICAgc3RhdGU6IG9wdGlvbnMuc3RhdGUsXG4gICAgICAgIGZyb21Sb3V0ZUlkOiBjdXJyZW50Um91dGVJZCxcbiAgICAgICAgZmx1c2hTeW5jOiBvcHRpb25zLmZsdXNoU3luYyxcbiAgICAgICAgdmlld1RyYW5zaXRpb246IG9wdGlvbnMudmlld1RyYW5zaXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgYmFzZW5hbWUsIGN1cnJlbnRSb3V0ZUlkXSk7XG59XG4vLyB2NzogRXZlbnR1YWxseSB3ZSBzaG91bGQgZGVwcmVjYXRlIHRoaXMgZW50aXJlbHkgaW4gZmF2b3Igb2YgdXNpbmcgdGhlXG4vLyByb3V0ZXIgbWV0aG9kIGRpcmVjdGx5P1xuZnVuY3Rpb24gdXNlRm9ybUFjdGlvbihhY3Rpb24sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCByb3V0ZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICAhcm91dGVDb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGb3JtQWN0aW9uIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFttYXRjaF0gPSByb3V0ZUNvbnRleHQubWF0Y2hlcy5zbGljZSgtMSk7XG4gIC8vIFNoYWxsb3cgY2xvbmUgcGF0aCBzbyB3ZSBjYW4gbW9kaWZ5IGl0IGJlbG93LCBvdGhlcndpc2Ugd2UgbW9kaWZ5IHRoZVxuICAvLyBvYmplY3QgcmVmZXJlbmNlZCBieSB1c2VNZW1vIGluc2lkZSB1c2VSZXNvbHZlZFBhdGhcbiAgbGV0IHBhdGggPSBfZXh0ZW5kcyh7fSwgdXNlUmVzb2x2ZWRQYXRoKGFjdGlvbiA/IGFjdGlvbiA6IFwiLlwiLCB7XG4gICAgcmVsYXRpdmVcbiAgfSkpO1xuICAvLyBJZiBubyBhY3Rpb24gd2FzIHNwZWNpZmllZCwgYnJvd3NlcnMgd2lsbCBwZXJzaXN0IGN1cnJlbnQgc2VhcmNoIHBhcmFtc1xuICAvLyB3aGVuIGRldGVybWluaW5nIHRoZSBwYXRoLCBzbyBtYXRjaCB0aGF0IGJlaGF2aW9yXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBpZiAoYWN0aW9uID09IG51bGwpIHtcbiAgICAvLyBTYWZlIHRvIHdyaXRlIHRvIHRoaXMgZGlyZWN0bHkgaGVyZSBzaW5jZSBpZiBhY3Rpb24gd2FzIHVuZGVmaW5lZCwgd2VcbiAgICAvLyB3b3VsZCBoYXZlIGNhbGxlZCB1c2VSZXNvbHZlZFBhdGgoXCIuXCIpIHdoaWNoIHdpbGwgbmV2ZXIgaW5jbHVkZSBhIHNlYXJjaFxuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIC8vIFdoZW4gZ3JhYmJpbmcgc2VhcmNoIHBhcmFtcyBmcm9tIHRoZSBVUkwsIHJlbW92ZSBhbnkgaW5jbHVkZWQgP2luZGV4IHBhcmFtXG4gICAgLy8gc2luY2UgaXQgbWlnaHQgbm90IGFwcGx5IHRvIG91ciBjb250ZXh0dWFsIHJvdXRlLiAgV2UgYWRkIGl0IGJhY2sgYmFzZWRcbiAgICAvLyBvbiBtYXRjaC5yb3V0ZS5pbmRleCBiZWxvd1xuICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhdGguc2VhcmNoKTtcbiAgICBsZXQgaW5kZXhWYWx1ZXMgPSBwYXJhbXMuZ2V0QWxsKFwiaW5kZXhcIik7XG4gICAgbGV0IGhhc05ha2VkSW5kZXhQYXJhbSA9IGluZGV4VmFsdWVzLnNvbWUodiA9PiB2ID09PSBcIlwiKTtcbiAgICBpZiAoaGFzTmFrZWRJbmRleFBhcmFtKSB7XG4gICAgICBwYXJhbXMuZGVsZXRlKFwiaW5kZXhcIik7XG4gICAgICBpbmRleFZhbHVlcy5maWx0ZXIodiA9PiB2KS5mb3JFYWNoKHYgPT4gcGFyYW1zLmFwcGVuZChcImluZGV4XCIsIHYpKTtcbiAgICAgIGxldCBxcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICAgICAgcGF0aC5zZWFyY2ggPSBxcyA/IFwiP1wiICsgcXMgOiBcIlwiO1xuICAgIH1cbiAgfVxuICBpZiAoKCFhY3Rpb24gfHwgYWN0aW9uID09PSBcIi5cIikgJiYgbWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gIH1cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgZm9ybSBhY3Rpb24uICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlXG4gIC8vIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZVxuICAvLyBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG4vLyBUT0RPOiAodjcpIENoYW5nZSB0aGUgdXNlRmV0Y2hlciBnZW5lcmljIGRlZmF1bHQgZnJvbSBgYW55YCB0byBgdW5rbm93bmBcbi8qKlxuICogSW50ZXJhY3RzIHdpdGggcm91dGUgbG9hZGVycyBhbmQgYWN0aW9ucyB3aXRob3V0IGNhdXNpbmcgYSBuYXZpZ2F0aW9uLiBHcmVhdFxuICogZm9yIGFueSBpbnRlcmFjdGlvbiB0aGF0IHN0YXlzIG9uIHRoZSBzYW1lIHBhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXIoX3RlbXAzKSB7XG4gIHZhciBfcm91dGUkbWF0Y2hlcztcbiAgbGV0IHtcbiAgICBrZXlcbiAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCBmZXRjaGVyRGF0YSA9IFJlYWN0LnVzZUNvbnRleHQoRmV0Y2hlcnNDb250ZXh0KTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlSWQgPSAoX3JvdXRlJG1hdGNoZXMgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0pID09IG51bGwgPyB2b2lkIDAgOiBfcm91dGUkbWF0Y2hlcy5yb3V0ZS5pZDtcbiAgIWZldGNoZXJEYXRhID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBGZXRjaGVyc0NvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIShyb3V0ZUlkICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIC8vIEZldGNoZXIga2V5IGhhbmRsaW5nXG4gIC8vIE9LIHRvIGNhbGwgY29uZGl0aW9uYWxseSB0byBmZWF0dXJlIGRldGVjdCBgdXNlSWRgXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICBsZXQgZGVmYXVsdEtleSA9IHVzZUlkSW1wbCA/IHVzZUlkSW1wbCgpIDogXCJcIjtcbiAgbGV0IFtmZXRjaGVyS2V5LCBzZXRGZXRjaGVyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKGtleSB8fCBkZWZhdWx0S2V5KTtcbiAgaWYgKGtleSAmJiBrZXkgIT09IGZldGNoZXJLZXkpIHtcbiAgICBzZXRGZXRjaGVyS2V5KGtleSk7XG4gIH0gZWxzZSBpZiAoIWZldGNoZXJLZXkpIHtcbiAgICAvLyBXZSB3aWxsIG9ubHkgZmFsbCB0aHJvdWdoIGhlcmUgd2hlbiBgdXNlSWRgIGlzIG5vdCBhdmFpbGFibGVcbiAgICBzZXRGZXRjaGVyS2V5KGdldFVuaXF1ZUZldGNoZXJJZCgpKTtcbiAgfVxuICAvLyBSZWdpc3RyYXRpb24vY2xlYW51cFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJvdXRlci5nZXRGZXRjaGVyKGZldGNoZXJLZXkpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyBUZWxsIHRoZSByb3V0ZXIgd2UndmUgdW5tb3VudGVkIC0gaWYgdjdfZmV0Y2hlclBlcnNpc3QgaXMgZW5hYmxlZCB0aGlzXG4gICAgICAvLyB3aWxsIG5vdCBkZWxldGUgaW1tZWRpYXRlbHkgYnV0IGluc3RlYWQgcXVldWUgdXAgYSBkZWxldGUgYWZ0ZXIgdGhlXG4gICAgICAvLyBmZXRjaGVyIHJldHVybnMgdG8gYW4gYGlkbGVgIHN0YXRlXG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG4gIC8vIEZldGNoZXIgYWRkaXRpb25zXG4gIGxldCBsb2FkID0gUmVhY3QudXNlQ2FsbGJhY2soKGhyZWYsIG9wdHMpID0+IHtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYsIG9wdHMpO1xuICB9LCBbZmV0Y2hlcktleSwgcm91dGVJZCwgcm91dGVyXSk7XG4gIGxldCBzdWJtaXRJbXBsID0gdXNlU3VibWl0KCk7XG4gIGxldCBzdWJtaXQgPSBSZWFjdC51c2VDYWxsYmFjaygodGFyZ2V0LCBvcHRzKSA9PiB7XG4gICAgc3VibWl0SW1wbCh0YXJnZXQsIF9leHRlbmRzKHt9LCBvcHRzLCB7XG4gICAgICBuYXZpZ2F0ZTogZmFsc2UsXG4gICAgICBmZXRjaGVyS2V5XG4gICAgfSkpO1xuICB9LCBbZmV0Y2hlcktleSwgc3VibWl0SW1wbF0pO1xuICBsZXQgRmV0Y2hlckZvcm0gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgRmV0Y2hlckZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm0sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBuYXZpZ2F0ZTogZmFsc2UsXG4gICAgICAgIGZldGNoZXJLZXk6IGZldGNoZXJLZXksXG4gICAgICAgIHJlZjogcmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgRmV0Y2hlckZvcm0uZGlzcGxheU5hbWUgPSBcImZldGNoZXIuRm9ybVwiO1xuICAgIH1cbiAgICByZXR1cm4gRmV0Y2hlckZvcm07XG4gIH0sIFtmZXRjaGVyS2V5XSk7XG4gIC8vIEV4cG9zZWQgRmV0Y2hlcldpdGhDb21wb25lbnRzXG4gIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGZldGNoZXJLZXkpIHx8IElETEVfRkVUQ0hFUjtcbiAgbGV0IGRhdGEgPSBmZXRjaGVyRGF0YS5nZXQoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IF9leHRlbmRzKHtcbiAgICBGb3JtOiBGZXRjaGVyRm9ybSxcbiAgICBzdWJtaXQsXG4gICAgbG9hZFxuICB9LCBmZXRjaGVyLCB7XG4gICAgZGF0YVxuICB9KSwgW0ZldGNoZXJGb3JtLCBzdWJtaXQsIGxvYWQsIGZldGNoZXIsIGRhdGFdKTtcbiAgcmV0dXJuIGZldGNoZXJXaXRoQ29tcG9uZW50cztcbn1cbi8qKlxuICogUHJvdmlkZXMgYWxsIGZldGNoZXJzIGN1cnJlbnRseSBvbiB0aGUgcGFnZS4gVXNlZnVsIGZvciBsYXlvdXRzIGFuZCBwYXJlbnRcbiAqIHJvdXRlcyB0aGF0IG5lZWQgdG8gcHJvdmlkZSBwZW5kaW5nL29wdGltaXN0aWMgVUkgcmVnYXJkaW5nIHRoZSBmZXRjaC5cbiAqL1xuZnVuY3Rpb24gdXNlRmV0Y2hlcnMoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXJzKTtcbiAgcmV0dXJuIEFycmF5LmZyb20oc3RhdGUuZmV0Y2hlcnMuZW50cmllcygpKS5tYXAoX3JlZjExID0+IHtcbiAgICBsZXQgW2tleSwgZmV0Y2hlcl0gPSBfcmVmMTE7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBmZXRjaGVyLCB7XG4gICAgICBrZXlcbiAgICB9KTtcbiAgfSk7XG59XG5jb25zdCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkgPSBcInJlYWN0LXJvdXRlci1zY3JvbGwtcG9zaXRpb25zXCI7XG5sZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSB7fTtcbi8qKlxuICogV2hlbiByZW5kZXJlZCBpbnNpZGUgYSBSb3V0ZXJQcm92aWRlciwgd2lsbCByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbnMgb24gbmF2aWdhdGlvbnNcbiAqL1xuZnVuY3Rpb24gdXNlU2Nyb2xsUmVzdG9yYXRpb24oX3RlbXA0KSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCB7XG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBtYXRjaGVzID0gdXNlTWF0Y2hlcygpO1xuICBsZXQgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTtcbiAgLy8gVHJpZ2dlciBtYW51YWwgc2Nyb2xsIHJlc3RvcmF0aW9uIHdoaWxlIHdlJ3JlIGFjdGl2ZVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIjtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgICB9O1xuICB9LCBbXSk7XG4gIC8vIFNhdmUgcG9zaXRpb25zIG9uIHBhZ2VoaWRlXG4gIHVzZVBhZ2VIaWRlKFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAobmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIGxldCBrZXkgPSAoZ2V0S2V5ID8gZ2V0S2V5KGxvY2F0aW9uLCBtYXRjaGVzKSA6IG51bGwpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNhdmVkU2Nyb2xsUG9zaXRpb25zKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIkZhaWxlZCB0byBzYXZlIHNjcm9sbCBwb3NpdGlvbnMgaW4gc2Vzc2lvblN0b3JhZ2UsIDxTY3JvbGxSZXN0b3JhdGlvbiAvPiB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IChcIiArIGVycm9yICsgXCIpLlwiKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgfSwgW3N0b3JhZ2VLZXksIGdldEtleSwgbmF2aWdhdGlvbi5zdGF0ZSwgbG9jYXRpb24sIG1hdGNoZXNdKSk7XG4gIC8vIFJlYWQgaW4gYW55IHNhdmVkIHNjcm9sbCBsb2NhdGlvbnNcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgICB9XG4gICAgfSwgW3N0b3JhZ2VLZXldKTtcbiAgICAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IGdldEtleVdpdGhvdXRCYXNlbmFtZSA9IGdldEtleSAmJiBiYXNlbmFtZSAhPT0gXCIvXCIgPyAobG9jYXRpb24sIG1hdGNoZXMpID0+IGdldEtleSggLy8gU3RyaXAgdGhlIGJhc2VuYW1lIHRvIG1hdGNoIHVzZUxvY2F0aW9uKClcbiAgICAgIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSwgbWF0Y2hlcykgOiBnZXRLZXk7XG4gICAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZXIuZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24oc2F2ZWRTY3JvbGxQb3NpdGlvbnMsICgpID0+IHdpbmRvdy5zY3JvbGxZLCBnZXRLZXlXaXRob3V0QmFzZW5hbWUpO1xuICAgICAgcmV0dXJuICgpID0+IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiAmJiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24oKTtcbiAgICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgZ2V0S2V5XSk7XG4gICAgLy8gUmVzdG9yZSBzY3JvbGxpbmcgd2hlbiBzdGF0ZS5yZXN0b3JlU2Nyb2xsUG9zaXRpb24gY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAvLyBFeHBsaWNpdCBmYWxzZSBtZWFucyBkb24ndCBkbyBhbnl0aGluZyAodXNlZCBmb3Igc3VibWlzc2lvbnMpXG4gICAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBiZWVuIGhlcmUgYmVmb3JlLCBzY3JvbGwgdG8gaXRcbiAgICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyB0cnkgdG8gc2Nyb2xsIHRvIHRoZSBoYXNoXG4gICAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkZWNvZGVVUklDb21wb25lbnQobG9jYXRpb24uaGFzaC5zbGljZSgxKSkpO1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBlbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgcmVzZXQgaWYgdGhpcyBuYXZpZ2F0aW9uIG9wdGVkIG91dFxuICAgICAgaWYgKHByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xuICB9XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBiZWZvcmV1bmxvYWRgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZUJlZm9yZVVubG9hZChjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYHBhZ2VoaWRlYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLiAgVGhpcyBldmVudCBpcyBiZXR0ZXIgc3VwcG9ydGVkIHRoYW4gYmVmb3JldW5sb2FkIGFjcm9zcyBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZnVuY3Rpb24gdXNlUGFnZUhpZGUoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB1c2VCbG9ja2VyIHRvIHNob3cgYSB3aW5kb3cuY29uZmlybSBwcm9tcHQgdG8gdXNlcnMgaW5zdGVhZFxuICogb2YgYnVpbGRpbmcgYSBjdXN0b20gVUkgd2l0aCB1c2VCbG9ja2VyLlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgaGFzICphIGxvdCBvZiByb3VnaCBlZGdlcyogYW5kIGJlaGF2ZXMgdmVyeSBkaWZmZXJlbnRseSAoYW5kXG4gKiB2ZXJ5IGluY29ycmVjdGx5IGluIHNvbWUgY2FzZXMpIGFjcm9zcyBicm93c2VycyBpZiB1c2VyIGNsaWNrIGFkZGl0aW9uXG4gKiBiYWNrL2ZvcndhcmQgbmF2aWdhdGlvbnMgd2hpbGUgdGhlIGNvbmZpcm0gaXMgb3Blbi4gIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiB1c2VQcm9tcHQoX3JlZjEyKSB7XG4gIGxldCB7XG4gICAgd2hlbixcbiAgICBtZXNzYWdlXG4gIH0gPSBfcmVmMTI7XG4gIGxldCBibG9ja2VyID0gdXNlQmxvY2tlcih3aGVuKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIpIHtcbiAgICAgIGxldCBwcm9jZWVkID0gd2luZG93LmNvbmZpcm0obWVzc2FnZSk7XG4gICAgICBpZiAocHJvY2VlZCkge1xuICAgICAgICAvLyBUaGlzIHRpbWVvdXQgaXMgbmVlZGVkIHRvIGF2b2lkIGEgd2VpcmQgXCJyYWNlXCIgb24gUE9QIG5hdmlnYXRpb25zXG4gICAgICAgIC8vIGJldHdlZW4gdGhlIGB3aW5kb3cuaGlzdG9yeWAgcmV2ZXJ0IG5hdmlnYXRpb24gYW5kIHRoZSByZXN1bHQgb2ZcbiAgICAgICAgLy8gYHdpbmRvdy5jb25maXJtYFxuICAgICAgICBzZXRUaW1lb3V0KGJsb2NrZXIucHJvY2VlZCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYmxvY2tlciwgbWVzc2FnZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiAhd2hlbikge1xuICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIHdoZW5dKTtcbn1cbi8qKlxuICogUmV0dXJuIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSB2aWV3IHRyYW5zaXRpb24gdG8gdGhlXG4gKiBnaXZlbiBocmVmLiAgWW91IGNhbiB1c2UgdGhpcyB2YWx1ZSB0byByZW5kZXIgQ1NTIGNsYXNzZXMgb3Igdmlld1RyYW5zaXRpb25OYW1lXG4gKiBzdHlsZXMgb250byB5b3VyIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtIGhyZWYgVGhlIGRlc3RpbmF0aW9uIGhyZWZcbiAqIEBwYXJhbSBbb3B0cy5yZWxhdGl2ZV0gUmVsYXRpdmUgcm91dGluZyB0eXBlIChcInJvdXRlXCIgfCBcInBhdGhcIilcbiAqL1xuZnVuY3Rpb24gdXNlVmlld1RyYW5zaXRpb25TdGF0ZSh0bywgb3B0cykge1xuICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIGxldCB2dENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFZpZXdUcmFuc2l0aW9uQ29udGV4dCk7XG4gICEodnRDb250ZXh0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJgdXNlVmlld1RyYW5zaXRpb25TdGF0ZWAgbXVzdCBiZSB1c2VkIHdpdGhpbiBgcmVhY3Qtcm91dGVyLWRvbWAncyBgUm91dGVyUHJvdmlkZXJgLiAgXCIgKyBcIkRpZCB5b3UgYWNjaWRlbnRhbGx5IGltcG9ydCBgUm91dGVyUHJvdmlkZXJgIGZyb20gYHJlYWN0LXJvdXRlcmA/XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLnVzZVZpZXdUcmFuc2l0aW9uU3RhdGUpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiBvcHRzLnJlbGF0aXZlXG4gIH0pO1xuICBpZiAoIXZ0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGN1cnJlbnRQYXRoID0gc3RyaXBCYXNlbmFtZSh2dENvbnRleHQuY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgdnRDb250ZXh0LmN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRQYXRoID0gc3RyaXBCYXNlbmFtZSh2dENvbnRleHQubmV4dExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgdnRDb250ZXh0Lm5leHRMb2NhdGlvbi5wYXRobmFtZTtcbiAgLy8gVHJhbnNpdGlvbiBpcyBhY3RpdmUgaWYgd2UncmUgZ29pbmcgdG8gb3IgY29taW5nIGZyb20gdGhlIGluZGljYXRlZFxuICAvLyBkZXN0aW5hdGlvbi4gIFRoaXMgZW5zdXJlcyB0aGF0IG90aGVyIFBVU0ggbmF2aWdhdGlvbnMgdGhhdCByZXZlcnNlXG4gIC8vIGFuIGluZGljYXRlZCB0cmFuc2l0aW9uIGFwcGx5LiAgSS5lLiwgb24gdGhlIGxpc3QgdmlldyB5b3UgaGF2ZTpcbiAgLy9cbiAgLy8gICA8TmF2TGluayB0bz1cIi9kZXRhaWxzLzFcIiB2aWV3VHJhbnNpdGlvbj5cbiAgLy9cbiAgLy8gSWYgeW91IGNsaWNrIHRoZSBicmVhZGNydW1iIGJhY2sgdG8gdGhlIGxpc3QgdmlldzpcbiAgLy9cbiAgLy8gICA8TmF2TGluayB0bz1cIi9saXN0XCIgdmlld1RyYW5zaXRpb24+XG4gIC8vXG4gIC8vIFdlIHNob3VsZCBhcHBseSB0aGUgdHJhbnNpdGlvbiBiZWNhdXNlIGl0J3MgaW5kaWNhdGVkIGFzIGFjdGl2ZSBnb2luZ1xuICAvLyBmcm9tIC9saXN0IC0+IC9kZXRhaWxzLzEgYW5kIHRoZXJlZm9yZSBzaG91bGQgYmUgYWN0aXZlIG9uIHRoZSByZXZlcnNlXG4gIC8vIChldmVuIHRob3VnaCB0aGlzIGlzbid0IHN0cmljdGx5IGEgUE9QIHJldmVyc2UpXG4gIHJldHVybiBtYXRjaFBhdGgocGF0aC5wYXRobmFtZSwgbmV4dFBhdGgpICE9IG51bGwgfHwgbWF0Y2hQYXRoKHBhdGgucGF0aG5hbWUsIGN1cnJlbnRQYXRoKSAhPSBudWxsO1xufVxuLy8jZW5kcmVnaW9uXG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEZvcm0sIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmssIFJvdXRlclByb3ZpZGVyLCBTY3JvbGxSZXN0b3JhdGlvbiwgRmV0Y2hlcnNDb250ZXh0IGFzIFVOU0FGRV9GZXRjaGVyc0NvbnRleHQsIFZpZXdUcmFuc2l0aW9uQ29udGV4dCBhcyBVTlNBRkVfVmlld1RyYW5zaXRpb25Db250ZXh0LCB1c2VTY3JvbGxSZXN0b3JhdGlvbiBhcyBVTlNBRkVfdXNlU2Nyb2xsUmVzdG9yYXRpb24sIGNyZWF0ZUJyb3dzZXJSb3V0ZXIsIGNyZWF0ZUhhc2hSb3V0ZXIsIGNyZWF0ZVNlYXJjaFBhcmFtcywgSGlzdG9yeVJvdXRlciBhcyB1bnN0YWJsZV9IaXN0b3J5Um91dGVyLCB1c2VQcm9tcHQgYXMgdW5zdGFibGVfdXNlUHJvbXB0LCB1c2VCZWZvcmVVbmxvYWQsIHVzZUZldGNoZXIsIHVzZUZldGNoZXJzLCB1c2VGb3JtQWN0aW9uLCB1c2VMaW5rQ2xpY2tIYW5kbGVyLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVN1Ym1pdCwgdXNlVmlld1RyYW5zaXRpb25TdGF0ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJpbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlU3RhdGUsIHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxudmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxudHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XHJcbiAgICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICAgIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XHJcbn07XG5cbmZ1bmN0aW9uIGUoZSx0KXt2YXIgaT17fTtmb3IodmFyIG8gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKSYmdC5pbmRleE9mKG8pPDAmJihpW29dPWVbb10pO2lmKG51bGwhPWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBuPTA7Zm9yKG89T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTtuPG8ubGVuZ3RoO24rKyl0LmluZGV4T2Yob1tuXSk8MCYmT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGUsb1tuXSkmJihpW29bbl1dPWVbb1tuXV0pO31yZXR1cm4gaX1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTdXBwcmVzc2VkRXJyb3ImJlN1cHByZXNzZWRFcnJvcjt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6e307ZnVuY3Rpb24gaShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcImRlZmF1bHRcIik/ZS5kZWZhdWx0OmV9ZnVuY3Rpb24gbyhlLHQpe3JldHVybiBlKHQ9e2V4cG9ydHM6e319LHQuZXhwb3J0cyksdC5leHBvcnRzfXZhciBuPW8oKGZ1bmN0aW9uKGUsdCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dmFyIGU9dGhpczt0aGlzLmxvY2tlZD1uZXcgTWFwLHRoaXMuYWRkVG9Mb2NrZWQ9ZnVuY3Rpb24odCxpKXt2YXIgbz1lLmxvY2tlZC5nZXQodCk7dm9pZCAwPT09bz92b2lkIDA9PT1pP2UubG9ja2VkLnNldCh0LFtdKTplLmxvY2tlZC5zZXQodCxbaV0pOnZvaWQgMCE9PWkmJihvLnVuc2hpZnQoaSksZS5sb2NrZWQuc2V0KHQsbykpO30sdGhpcy5pc0xvY2tlZD1mdW5jdGlvbih0KXtyZXR1cm4gZS5sb2NrZWQuaGFzKHQpfSx0aGlzLmxvY2s9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihpLG8pe2UuaXNMb2NrZWQodCk/ZS5hZGRUb0xvY2tlZCh0LGkpOihlLmFkZFRvTG9ja2VkKHQpLGkoKSk7fSkpfSx0aGlzLnVubG9jaz1mdW5jdGlvbih0KXt2YXIgaT1lLmxvY2tlZC5nZXQodCk7aWYodm9pZCAwIT09aSYmMCE9PWkubGVuZ3RoKXt2YXIgbz1pLnBvcCgpO2UubG9ja2VkLnNldCh0LGkpLHZvaWQgMCE9PW8mJnNldFRpbWVvdXQobywwKTt9ZWxzZSBlLmxvY2tlZC5kZWxldGUodCk7fTt9cmV0dXJuIGUuZ2V0SW5zdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09ZS5pbnN0YW5jZSYmKGUuaW5zdGFuY2U9bmV3IGUpLGUuaW5zdGFuY2V9LGV9KCk7dC5kZWZhdWx0PWZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0SW5zdGFuY2UoKX07fSkpO2kobik7dmFyIGE9aShvKChmdW5jdGlvbihlLGkpe3ZhciBvPXQmJnQuX19hd2FpdGVyfHxmdW5jdGlvbihlLHQsaSxvKXtyZXR1cm4gbmV3KGl8fChpPVByb21pc2UpKSgoZnVuY3Rpb24obixhKXtmdW5jdGlvbiByKGUpe3RyeXtjKG8ubmV4dChlKSk7fWNhdGNoKGUpe2EoZSk7fX1mdW5jdGlvbiBzKGUpe3RyeXtjKG8udGhyb3coZSkpO31jYXRjaChlKXthKGUpO319ZnVuY3Rpb24gYyhlKXtlLmRvbmU/bihlLnZhbHVlKTpuZXcgaSgoZnVuY3Rpb24odCl7dChlLnZhbHVlKTt9KSkudGhlbihyLHMpO31jKChvPW8uYXBwbHkoZSx0fHxbXSkpLm5leHQoKSk7fSkpfSxhPXQmJnQuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIGksbyxuLGEscj17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoMSZuWzBdKXRocm93IG5bMV07cmV0dXJuIG5bMV19LHRyeXM6W10sb3BzOltdfTtyZXR1cm4gYT17bmV4dDpzKDApLHRocm93OnMoMSkscmV0dXJuOnMoMil9LFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKGFbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksYTtmdW5jdGlvbiBzKGEpe3JldHVybiBmdW5jdGlvbihzKXtyZXR1cm4gZnVuY3Rpb24oYSl7aWYoaSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO3I7KXRyeXtpZihpPTEsbyYmKG49MiZhWzBdP28ucmV0dXJuOmFbMF0/by50aHJvd3x8KChuPW8ucmV0dXJuKSYmbi5jYWxsKG8pLDApOm8ubmV4dCkmJiEobj1uLmNhbGwobyxhWzFdKSkuZG9uZSlyZXR1cm4gbjtzd2l0Y2gobz0wLG4mJihhPVsyJmFbMF0sbi52YWx1ZV0pLGFbMF0pe2Nhc2UgMDpjYXNlIDE6bj1hO2JyZWFrO2Nhc2UgNDpyZXR1cm4gci5sYWJlbCsrLHt2YWx1ZTphWzFdLGRvbmU6ITF9O2Nhc2UgNTpyLmxhYmVsKyssbz1hWzFdLGE9WzBdO2NvbnRpbnVlO2Nhc2UgNzphPXIub3BzLnBvcCgpLHIudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEobj1yLnRyeXMsKG49bi5sZW5ndGg+MCYmbltuLmxlbmd0aC0xXSl8fDYhPT1hWzBdJiYyIT09YVswXSkpe3I9MDtjb250aW51ZX1pZigzPT09YVswXSYmKCFufHxhWzFdPm5bMF0mJmFbMV08blszXSkpe3IubGFiZWw9YVsxXTticmVha31pZig2PT09YVswXSYmci5sYWJlbDxuWzFdKXtyLmxhYmVsPW5bMV0sbj1hO2JyZWFrfWlmKG4mJnIubGFiZWw8blsyXSl7ci5sYWJlbD1uWzJdLHIub3BzLnB1c2goYSk7YnJlYWt9blsyXSYmci5vcHMucG9wKCksci50cnlzLnBvcCgpO2NvbnRpbnVlfWE9dC5jYWxsKGUscik7fWNhdGNoKGUpe2E9WzYsZV0sbz0wO31maW5hbGx5e2k9bj0wO31pZig1JmFbMF0pdGhyb3cgYVsxXTtyZXR1cm4ge3ZhbHVlOmFbMF0/YVsxXTp2b2lkIDAsZG9uZTohMH19KFthLHNdKX19fSxyPXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGksXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9XCJicm93c2VyLXRhYnMtbG9jay1rZXlcIixjPXtrZXk6ZnVuY3Rpb24oZSl7cmV0dXJuIG8ocix2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBhKHRoaXMsKGZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkXCIpfSkpfSkpfSxnZXRJdGVtOmZ1bmN0aW9uKGUpe3JldHVybiBvKHIsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gYSh0aGlzLChmdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZFwiKX0pKX0pKX0sY2xlYXI6ZnVuY3Rpb24oKXtyZXR1cm4gbyhyLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIGEodGhpcywoZnVuY3Rpb24oZSl7cmV0dXJuIFsyLHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKV19KSl9KSl9LHJlbW92ZUl0ZW06ZnVuY3Rpb24oZSl7cmV0dXJuIG8ocix2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBhKHRoaXMsKGZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkXCIpfSkpfSkpfSxzZXRJdGVtOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8ocix2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBhKHRoaXMsKGZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkXCIpfSkpfSkpfSxrZXlTeW5jOmZ1bmN0aW9uKGUpe3JldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLmtleShlKX0sZ2V0SXRlbVN5bmM6ZnVuY3Rpb24oZSl7cmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShlKX0sY2xlYXJTeW5jOmZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKX0scmVtb3ZlSXRlbVN5bmM6ZnVuY3Rpb24oZSl7cmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShlKX0sc2V0SXRlbVN5bmM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGUsdCl9fTtmdW5jdGlvbiBkKGUpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7cmV0dXJuIHNldFRpbWVvdXQodCxlKX0pKX1mdW5jdGlvbiB1KGUpe2Zvcih2YXIgdD1cIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hUWmFiY2RlZmdoaWtsbW5vcHFyc3R1dnd4eXpcIixpPVwiXCIsbz0wO288ZTtvKyspe2krPXRbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnQubGVuZ3RoKV07fXJldHVybiBpfXZhciBsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt0aGlzLmFjcXVpcmVkSWF0U2V0PW5ldyBTZXQsdGhpcy5zdG9yYWdlSGFuZGxlcj12b2lkIDAsdGhpcy5pZD1EYXRlLm5vdygpLnRvU3RyaW5nKCkrdSgxNSksdGhpcy5hY3F1aXJlTG9jaz10aGlzLmFjcXVpcmVMb2NrLmJpbmQodGhpcyksdGhpcy5yZWxlYXNlTG9jaz10aGlzLnJlbGVhc2VMb2NrLmJpbmQodGhpcyksdGhpcy5yZWxlYXNlTG9ja19fcHJpdmF0ZV9fPXRoaXMucmVsZWFzZUxvY2tfX3ByaXZhdGVfXy5iaW5kKHRoaXMpLHRoaXMud2FpdEZvclNvbWV0aGluZ1RvQ2hhbmdlPXRoaXMud2FpdEZvclNvbWV0aGluZ1RvQ2hhbmdlLmJpbmQodGhpcyksdGhpcy5yZWZyZXNoTG9ja1doaWxlQWNxdWlyZWQ9dGhpcy5yZWZyZXNoTG9ja1doaWxlQWNxdWlyZWQuYmluZCh0aGlzKSx0aGlzLnN0b3JhZ2VIYW5kbGVyPXQsdm9pZCAwPT09ZS53YWl0ZXJzJiYoZS53YWl0ZXJzPVtdKTt9cmV0dXJuIGUucHJvdG90eXBlLmFjcXVpcmVMb2NrPWZ1bmN0aW9uKHQsaSl7cmV0dXJuIHZvaWQgMD09PWkmJihpPTVlMyksbyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG8sbixyLGwsaCxwLG07cmV0dXJuIGEodGhpcywoZnVuY3Rpb24oYSl7c3dpdGNoKGEubGFiZWwpe2Nhc2UgMDpvPURhdGUubm93KCkrdSg0KSxuPURhdGUubm93KCkraSxyPXMrXCItXCIrdCxsPXZvaWQgMD09PXRoaXMuc3RvcmFnZUhhbmRsZXI/Yzp0aGlzLnN0b3JhZ2VIYW5kbGVyLGEubGFiZWw9MTtjYXNlIDE6cmV0dXJuIERhdGUubm93KCk8bj9bNCxkKDMwKV06WzMsOF07Y2FzZSAyOnJldHVybiBhLnNlbnQoKSxudWxsIT09bC5nZXRJdGVtU3luYyhyKT9bMyw1XTooaD10aGlzLmlkK1wiLVwiK3QrXCItXCIrbyxbNCxkKE1hdGguZmxvb3IoMjUqTWF0aC5yYW5kb20oKSkpXSk7Y2FzZSAzOnJldHVybiBhLnNlbnQoKSxsLnNldEl0ZW1TeW5jKHIsSlNPTi5zdHJpbmdpZnkoe2lkOnRoaXMuaWQsaWF0Om8sdGltZW91dEtleTpoLHRpbWVBY3F1aXJlZDpEYXRlLm5vdygpLHRpbWVSZWZyZXNoZWQ6RGF0ZS5ub3coKX0pKSxbNCxkKDMwKV07Y2FzZSA0OnJldHVybiBhLnNlbnQoKSxudWxsIT09KHA9bC5nZXRJdGVtU3luYyhyKSkmJihtPUpTT04ucGFyc2UocCkpLmlkPT09dGhpcy5pZCYmbS5pYXQ9PT1vPyh0aGlzLmFjcXVpcmVkSWF0U2V0LmFkZChvKSx0aGlzLnJlZnJlc2hMb2NrV2hpbGVBY3F1aXJlZChyLG8pLFsyLCEwXSk6WzMsN107Y2FzZSA1OnJldHVybiBlLmxvY2tDb3JyZWN0b3Iodm9pZCAwPT09dGhpcy5zdG9yYWdlSGFuZGxlcj9jOnRoaXMuc3RvcmFnZUhhbmRsZXIpLFs0LHRoaXMud2FpdEZvclNvbWV0aGluZ1RvQ2hhbmdlKG4pXTtjYXNlIDY6YS5zZW50KCksYS5sYWJlbD03O2Nhc2UgNzpyZXR1cm4gbz1EYXRlLm5vdygpK3UoNCksWzMsMV07Y2FzZSA4OnJldHVybiBbMiwhMV19fSkpfSkpfSxlLnByb3RvdHlwZS5yZWZyZXNoTG9ja1doaWxlQWNxdWlyZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGk9dGhpcztyZXR1cm4gYSh0aGlzLChmdW5jdGlvbihyKXtyZXR1cm4gc2V0VGltZW91dCgoZnVuY3Rpb24oKXtyZXR1cm4gbyhpLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGksbyxyO3JldHVybiBhKHRoaXMsKGZ1bmN0aW9uKGEpe3N3aXRjaChhLmxhYmVsKXtjYXNlIDA6cmV0dXJuIFs0LG4uZGVmYXVsdCgpLmxvY2sodCldO2Nhc2UgMTpyZXR1cm4gYS5zZW50KCksdGhpcy5hY3F1aXJlZElhdFNldC5oYXModCk/KGk9dm9pZCAwPT09dGhpcy5zdG9yYWdlSGFuZGxlcj9jOnRoaXMuc3RvcmFnZUhhbmRsZXIsbnVsbD09PShvPWkuZ2V0SXRlbVN5bmMoZSkpPyhuLmRlZmF1bHQoKS51bmxvY2sodCksWzJdKTooKHI9SlNPTi5wYXJzZShvKSkudGltZVJlZnJlc2hlZD1EYXRlLm5vdygpLGkuc2V0SXRlbVN5bmMoZSxKU09OLnN0cmluZ2lmeShyKSksbi5kZWZhdWx0KCkudW5sb2NrKHQpLHRoaXMucmVmcmVzaExvY2tXaGlsZUFjcXVpcmVkKGUsdCksWzJdKSk6KG4uZGVmYXVsdCgpLnVubG9jayh0KSxbMl0pfX0pKX0pKX0pLDFlMyksWzJdfSkpfSkpfSxlLnByb3RvdHlwZS53YWl0Rm9yU29tZXRoaW5nVG9DaGFuZ2U9ZnVuY3Rpb24odCl7cmV0dXJuIG8odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBhKHRoaXMsKGZ1bmN0aW9uKGkpe3N3aXRjaChpLmxhYmVsKXtjYXNlIDA6cmV0dXJuIFs0LG5ldyBQcm9taXNlKChmdW5jdGlvbihpKXt2YXIgbz0hMSxuPURhdGUubm93KCksYT0hMTtmdW5jdGlvbiByKCl7aWYoYXx8KHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic3RvcmFnZVwiLHIpLGUucmVtb3ZlRnJvbVdhaXRpbmcociksY2xlYXJUaW1lb3V0KHMpLGE9ITApLCFvKXtvPSEwO3ZhciB0PTUwLShEYXRlLm5vdygpLW4pO3Q+MD9zZXRUaW1lb3V0KGksdCk6aShudWxsKTt9fXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic3RvcmFnZVwiLHIpLGUuYWRkVG9XYWl0aW5nKHIpO3ZhciBzPXNldFRpbWVvdXQocixNYXRoLm1heCgwLHQtRGF0ZS5ub3coKSkpO30pKV07Y2FzZSAxOnJldHVybiBpLnNlbnQoKSxbMl19fSkpfSkpfSxlLmFkZFRvV2FpdGluZz1mdW5jdGlvbih0KXt0aGlzLnJlbW92ZUZyb21XYWl0aW5nKHQpLHZvaWQgMCE9PWUud2FpdGVycyYmZS53YWl0ZXJzLnB1c2godCk7fSxlLnJlbW92ZUZyb21XYWl0aW5nPWZ1bmN0aW9uKHQpe3ZvaWQgMCE9PWUud2FpdGVycyYmKGUud2FpdGVycz1lLndhaXRlcnMuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4gZSE9PXR9KSkpO30sZS5ub3RpZnlXYWl0ZXJzPWZ1bmN0aW9uKCl7dm9pZCAwIT09ZS53YWl0ZXJzJiZlLndhaXRlcnMuc2xpY2UoKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gZSgpfSkpO30sZS5wcm90b3R5cGUucmVsZWFzZUxvY2s9ZnVuY3Rpb24oZSl7cmV0dXJuIG8odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBhKHRoaXMsKGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmxhYmVsKXtjYXNlIDA6cmV0dXJuIFs0LHRoaXMucmVsZWFzZUxvY2tfX3ByaXZhdGVfXyhlKV07Y2FzZSAxOnJldHVybiBbMix0LnNlbnQoKV19fSkpfSkpfSxlLnByb3RvdHlwZS5yZWxlYXNlTG9ja19fcHJpdmF0ZV9fPWZ1bmN0aW9uKHQpe3JldHVybiBvKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgaSxvLHIsZDtyZXR1cm4gYSh0aGlzLChmdW5jdGlvbihhKXtzd2l0Y2goYS5sYWJlbCl7Y2FzZSAwOnJldHVybiBpPXZvaWQgMD09PXRoaXMuc3RvcmFnZUhhbmRsZXI/Yzp0aGlzLnN0b3JhZ2VIYW5kbGVyLG89cytcIi1cIit0LG51bGw9PT0ocj1pLmdldEl0ZW1TeW5jKG8pKT9bMl06KGQ9SlNPTi5wYXJzZShyKSkuaWQhPT10aGlzLmlkP1szLDJdOls0LG4uZGVmYXVsdCgpLmxvY2soZC5pYXQpXTtjYXNlIDE6YS5zZW50KCksdGhpcy5hY3F1aXJlZElhdFNldC5kZWxldGUoZC5pYXQpLGkucmVtb3ZlSXRlbVN5bmMobyksbi5kZWZhdWx0KCkudW5sb2NrKGQuaWF0KSxlLm5vdGlmeVdhaXRlcnMoKSxhLmxhYmVsPTI7Y2FzZSAyOnJldHVybiBbMl19fSkpfSkpfSxlLmxvY2tDb3JyZWN0b3I9ZnVuY3Rpb24odCl7Zm9yKHZhciBpPURhdGUubm93KCktNWUzLG89dCxuPVtdLGE9MDs7KXt2YXIgcj1vLmtleVN5bmMoYSk7aWYobnVsbD09PXIpYnJlYWs7bi5wdXNoKHIpLGErKzt9Zm9yKHZhciBjPSExLGQ9MDtkPG4ubGVuZ3RoO2QrKyl7dmFyIHU9bltkXTtpZih1LmluY2x1ZGVzKHMpKXt2YXIgbD1vLmdldEl0ZW1TeW5jKHUpO2lmKG51bGwhPT1sKXt2YXIgaD1KU09OLnBhcnNlKGwpOyh2b2lkIDA9PT1oLnRpbWVSZWZyZXNoZWQmJmgudGltZUFjcXVpcmVkPGl8fHZvaWQgMCE9PWgudGltZVJlZnJlc2hlZCYmaC50aW1lUmVmcmVzaGVkPGkpJiYoby5yZW1vdmVJdGVtU3luYyh1KSxjPSEwKTt9fX1jJiZlLm5vdGlmeVdhaXRlcnMoKTt9LGUud2FpdGVycz12b2lkIDAsZX0oKTtpLmRlZmF1bHQ9bDt9KSkpO2NvbnN0IHI9e3RpbWVvdXRJblNlY29uZHM6NjB9LHM9e25hbWU6XCJhdXRoMC1zcGEtanNcIix2ZXJzaW9uOlwiMi4xLjNcIn0sYz0oKT0+RGF0ZS5ub3coKTtjbGFzcyBkIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IoZSx0KXtzdXBlcih0KSx0aGlzLmVycm9yPWUsdGhpcy5lcnJvcl9kZXNjcmlwdGlvbj10LE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLGQucHJvdG90eXBlKTt9c3RhdGljIGZyb21QYXlsb2FkKHtlcnJvcjplLGVycm9yX2Rlc2NyaXB0aW9uOnR9KXtyZXR1cm4gbmV3IGQoZSx0KX19Y2xhc3MgdSBleHRlbmRzIGR7Y29uc3RydWN0b3IoZSx0LGksbz1udWxsKXtzdXBlcihlLHQpLHRoaXMuc3RhdGU9aSx0aGlzLmFwcFN0YXRlPW8sT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsdS5wcm90b3R5cGUpO319Y2xhc3MgbCBleHRlbmRzIGR7Y29uc3RydWN0b3IoKXtzdXBlcihcInRpbWVvdXRcIixcIlRpbWVvdXRcIiksT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsbC5wcm90b3R5cGUpO319Y2xhc3MgaCBleHRlbmRzIGx7Y29uc3RydWN0b3IoZSl7c3VwZXIoKSx0aGlzLnBvcHVwPWUsT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsaC5wcm90b3R5cGUpO319Y2xhc3MgcCBleHRlbmRzIGR7Y29uc3RydWN0b3IoZSl7c3VwZXIoXCJjYW5jZWxsZWRcIixcIlBvcHVwIGNsb3NlZFwiKSx0aGlzLnBvcHVwPWUsT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMscC5wcm90b3R5cGUpO319Y2xhc3MgbSBleHRlbmRzIGR7Y29uc3RydWN0b3IoZSx0LGkpe3N1cGVyKGUsdCksdGhpcy5tZmFfdG9rZW49aSxPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcyxtLnByb3RvdHlwZSk7fX1jbGFzcyBmIGV4dGVuZHMgZHtjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKFwibWlzc2luZ19yZWZyZXNoX3Rva2VuXCIsYE1pc3NpbmcgUmVmcmVzaCBUb2tlbiAoYXVkaWVuY2U6ICcke2coZSxbXCJkZWZhdWx0XCJdKX0nLCBzY29wZTogJyR7Zyh0KX0nKWApLHRoaXMuYXVkaWVuY2U9ZSx0aGlzLnNjb3BlPXQsT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsZi5wcm90b3R5cGUpO319ZnVuY3Rpb24gZyhlLHQ9W10pe3JldHVybiBlJiYhdC5pbmNsdWRlcyhlKT9lOlwiXCJ9Y29uc3Qgdz0oKT0+d2luZG93LmNyeXB0byx5PSgpPT57Y29uc3QgZT1cIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV9+LlwiO2xldCB0PVwiXCI7cmV0dXJuIEFycmF5LmZyb20odygpLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSg0MykpKS5mb3JFYWNoKChpPT50Kz1lW2klZS5sZW5ndGhdKSksdH0saz1lPT5idG9hKGUpLHY9dD0+e3ZhcntjbGllbnRJZDppfT10LG89ZSh0LFtcImNsaWVudElkXCJdKTtyZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcygoZT0+T2JqZWN0LmtleXMoZSkuZmlsdGVyKCh0PT52b2lkIDAhPT1lW3RdKSkucmVkdWNlKCgodCxpKT0+T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LHQpLHtbaV06ZVtpXX0pKSx7fSkpKE9iamVjdC5hc3NpZ24oe2NsaWVudF9pZDppfSxvKSkpLnRvU3RyaW5nKCl9LGI9ZT0+KGU9PmRlY29kZVVSSUNvbXBvbmVudChhdG9iKGUpLnNwbGl0KFwiXCIpLm1hcCgoZT0+XCIlXCIrKFwiMDBcIitlLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikpKS5qb2luKFwiXCIpKSkoZS5yZXBsYWNlKC9fL2csXCIvXCIpLnJlcGxhY2UoLy0vZyxcIitcIikpLF89YXN5bmMoZSx0KT0+e2NvbnN0IGk9YXdhaXQgZmV0Y2goZSx0KTtyZXR1cm4ge29rOmkub2ssanNvbjphd2FpdCBpLmpzb24oKX19LEk9YXN5bmMoZSx0LGkpPT57Y29uc3Qgbz1uZXcgQWJvcnRDb250cm9sbGVyO2xldCBuO3JldHVybiB0LnNpZ25hbD1vLnNpZ25hbCxQcm9taXNlLnJhY2UoW18oZSx0KSxuZXcgUHJvbWlzZSgoKGUsdCk9PntuPXNldFRpbWVvdXQoKCgpPT57by5hYm9ydCgpLHQobmV3IEVycm9yKFwiVGltZW91dCB3aGVuIGV4ZWN1dGluZyAnZmV0Y2gnXCIpKTt9KSxpKTt9KSldKS5maW5hbGx5KCgoKT0+e2NsZWFyVGltZW91dChuKTt9KSl9LFM9YXN5bmMoZSx0LGksbyxuLGEscik9PntyZXR1cm4gcz17YXV0aDp7YXVkaWVuY2U6dCxzY29wZTppfSx0aW1lb3V0Om4sZmV0Y2hVcmw6ZSxmZXRjaE9wdGlvbnM6byx1c2VGb3JtRGF0YTpyfSxjPWEsbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUsdCl7Y29uc3QgaT1uZXcgTWVzc2FnZUNoYW5uZWw7aS5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24obyl7by5kYXRhLmVycm9yP3QobmV3IEVycm9yKG8uZGF0YS5lcnJvcikpOmUoby5kYXRhKSxpLnBvcnQxLmNsb3NlKCk7fSxjLnBvc3RNZXNzYWdlKHMsW2kucG9ydDJdKTt9KSk7dmFyIHMsYzt9LE89YXN5bmMoZSx0LGksbyxuLGEscj0xZTQpPT5uP1MoZSx0LGksbyxyLG4sYSk6SShlLG8scik7YXN5bmMgZnVuY3Rpb24gVCh0LGkpe3ZhcntiYXNlVXJsOm8sdGltZW91dDpuLGF1ZGllbmNlOmEsc2NvcGU6cixhdXRoMENsaWVudDpjLHVzZUZvcm1EYXRhOnV9PXQsbD1lKHQsW1wiYmFzZVVybFwiLFwidGltZW91dFwiLFwiYXVkaWVuY2VcIixcInNjb3BlXCIsXCJhdXRoMENsaWVudFwiLFwidXNlRm9ybURhdGFcIl0pO2NvbnN0IGg9dT92KGwpOkpTT04uc3RyaW5naWZ5KGwpO3JldHVybiBhd2FpdCBhc3luYyBmdW5jdGlvbih0LGksbyxuLGEscixzKXtsZXQgYyx1PW51bGw7Zm9yKGxldCBlPTA7ZTwzO2UrKyl0cnl7Yz1hd2FpdCBPKHQsbyxuLGEscixzLGkpLHU9bnVsbDticmVha31jYXRjaChlKXt1PWU7fWlmKHUpdGhyb3cgdTtjb25zdCBsPWMuanNvbix7ZXJyb3I6aCxlcnJvcl9kZXNjcmlwdGlvbjpwfT1sLGc9ZShsLFtcImVycm9yXCIsXCJlcnJvcl9kZXNjcmlwdGlvblwiXSkse29rOnd9PWM7aWYoIXcpe2NvbnN0IGU9cHx8YEhUVFAgZXJyb3IuIFVuYWJsZSB0byBmZXRjaCAke3R9YDtpZihcIm1mYV9yZXF1aXJlZFwiPT09aCl0aHJvdyBuZXcgbShoLGUsZy5tZmFfdG9rZW4pO2lmKFwibWlzc2luZ19yZWZyZXNoX3Rva2VuXCI9PT1oKXRocm93IG5ldyBmKG8sbik7dGhyb3cgbmV3IGQoaHx8XCJyZXF1ZXN0X2Vycm9yXCIsZSl9cmV0dXJuIGd9KGAke299L29hdXRoL3Rva2VuYCxuLGF8fFwiZGVmYXVsdFwiLHIse21ldGhvZDpcIlBPU1RcIixib2R5OmgsaGVhZGVyczp7XCJDb250ZW50LVR5cGVcIjp1P1wiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI6XCJhcHBsaWNhdGlvbi9qc29uXCIsXCJBdXRoMC1DbGllbnRcIjpidG9hKEpTT04uc3RyaW5naWZ5KGN8fHMpKX19LGksdSl9Y29uc3Qgaj0oLi4uZSk9PntyZXR1cm4gKHQ9ZS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIikudHJpbSgpLnNwbGl0KC9cXHMrLyksQXJyYXkuZnJvbShuZXcgU2V0KHQpKSkuam9pbihcIiBcIik7dmFyIHQ7fTtjbGFzcyBDe2NvbnN0cnVjdG9yKGUsdD1cIkBAYXV0aDBzcGFqc0BAXCIsaSl7dGhpcy5wcmVmaXg9dCx0aGlzLnN1ZmZpeD1pLHRoaXMuY2xpZW50SWQ9ZS5jbGllbnRJZCx0aGlzLnNjb3BlPWUuc2NvcGUsdGhpcy5hdWRpZW5jZT1lLmF1ZGllbmNlO310b0tleSgpe3JldHVybiBbdGhpcy5wcmVmaXgsdGhpcy5jbGllbnRJZCx0aGlzLmF1ZGllbmNlLHRoaXMuc2NvcGUsdGhpcy5zdWZmaXhdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiOjpcIil9c3RhdGljIGZyb21LZXkoZSl7Y29uc3RbdCxpLG8sbl09ZS5zcGxpdChcIjo6XCIpO3JldHVybiBuZXcgQyh7Y2xpZW50SWQ6aSxzY29wZTpuLGF1ZGllbmNlOm99LHQpfXN0YXRpYyBmcm9tQ2FjaGVFbnRyeShlKXtjb25zdHtzY29wZTp0LGF1ZGllbmNlOmksY2xpZW50X2lkOm99PWU7cmV0dXJuIG5ldyBDKHtzY29wZTp0LGF1ZGllbmNlOmksY2xpZW50SWQ6b30pfX1jbGFzcyB6e3NldChlLHQpe2xvY2FsU3RvcmFnZS5zZXRJdGVtKGUsSlNPTi5zdHJpbmdpZnkodCkpO31nZXQoZSl7Y29uc3QgdD13aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oZSk7aWYodCl0cnl7cmV0dXJuIEpTT04ucGFyc2UodCl9Y2F0Y2goZSl7cmV0dXJufX1yZW1vdmUoZSl7bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oZSk7fWFsbEtleXMoKXtyZXR1cm4gT2JqZWN0LmtleXMod2luZG93LmxvY2FsU3RvcmFnZSkuZmlsdGVyKChlPT5lLnN0YXJ0c1dpdGgoXCJAQGF1dGgwc3BhanNAQFwiKSkpfX1jbGFzcyBQe2NvbnN0cnVjdG9yKCl7dGhpcy5lbmNsb3NlZENhY2hlPWZ1bmN0aW9uKCl7bGV0IGU9e307cmV0dXJuIHtzZXQodCxpKXtlW3RdPWk7fSxnZXQodCl7Y29uc3QgaT1lW3RdO2lmKGkpcmV0dXJuIGl9LHJlbW92ZSh0KXtkZWxldGUgZVt0XTt9LGFsbEtleXM6KCk9Pk9iamVjdC5rZXlzKGUpfX0oKTt9fWNsYXNzIHh7Y29uc3RydWN0b3IoZSx0LGkpe3RoaXMuY2FjaGU9ZSx0aGlzLmtleU1hbmlmZXN0PXQsdGhpcy5ub3dQcm92aWRlcj1pfHxjO31hc3luYyBzZXRJZFRva2VuKGUsdCxpKXt2YXIgbztjb25zdCBuPXRoaXMuZ2V0SWRUb2tlbkNhY2hlS2V5KGUpO2F3YWl0IHRoaXMuY2FjaGUuc2V0KG4se2lkX3Rva2VuOnQsZGVjb2RlZFRva2VuOml9KSxhd2FpdChudWxsPT09KG89dGhpcy5rZXlNYW5pZmVzdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8uYWRkKG4pKTt9YXN5bmMgZ2V0SWRUb2tlbihlKXtjb25zdCB0PWF3YWl0IHRoaXMuY2FjaGUuZ2V0KHRoaXMuZ2V0SWRUb2tlbkNhY2hlS2V5KGUuY2xpZW50SWQpKTtpZighdCYmZS5zY29wZSYmZS5hdWRpZW5jZSl7Y29uc3QgdD1hd2FpdCB0aGlzLmdldChlKTtpZighdClyZXR1cm47aWYoIXQuaWRfdG9rZW58fCF0LmRlY29kZWRUb2tlbilyZXR1cm47cmV0dXJuIHtpZF90b2tlbjp0LmlkX3Rva2VuLGRlY29kZWRUb2tlbjp0LmRlY29kZWRUb2tlbn19aWYodClyZXR1cm4ge2lkX3Rva2VuOnQuaWRfdG9rZW4sZGVjb2RlZFRva2VuOnQuZGVjb2RlZFRva2VufX1hc3luYyBnZXQoZSx0PTApe3ZhciBpO2xldCBvPWF3YWl0IHRoaXMuY2FjaGUuZ2V0KGUudG9LZXkoKSk7aWYoIW8pe2NvbnN0IHQ9YXdhaXQgdGhpcy5nZXRDYWNoZUtleXMoKTtpZighdClyZXR1cm47Y29uc3QgaT10aGlzLm1hdGNoRXhpc3RpbmdDYWNoZUtleShlLHQpO2kmJihvPWF3YWl0IHRoaXMuY2FjaGUuZ2V0KGkpKTt9aWYoIW8pcmV0dXJuO2NvbnN0IG49YXdhaXQgdGhpcy5ub3dQcm92aWRlcigpLGE9TWF0aC5mbG9vcihuLzFlMyk7cmV0dXJuIG8uZXhwaXJlc0F0LXQ8YT9vLmJvZHkucmVmcmVzaF90b2tlbj8oby5ib2R5PXtyZWZyZXNoX3Rva2VuOm8uYm9keS5yZWZyZXNoX3Rva2VufSxhd2FpdCB0aGlzLmNhY2hlLnNldChlLnRvS2V5KCksbyksby5ib2R5KTooYXdhaXQgdGhpcy5jYWNoZS5yZW1vdmUoZS50b0tleSgpKSx2b2lkIGF3YWl0KG51bGw9PT0oaT10aGlzLmtleU1hbmlmZXN0KXx8dm9pZCAwPT09aT92b2lkIDA6aS5yZW1vdmUoZS50b0tleSgpKSkpOm8uYm9keX1hc3luYyBzZXQoZSl7dmFyIHQ7Y29uc3QgaT1uZXcgQyh7Y2xpZW50SWQ6ZS5jbGllbnRfaWQsc2NvcGU6ZS5zY29wZSxhdWRpZW5jZTplLmF1ZGllbmNlfSksbz1hd2FpdCB0aGlzLndyYXBDYWNoZUVudHJ5KGUpO2F3YWl0IHRoaXMuY2FjaGUuc2V0KGkudG9LZXkoKSxvKSxhd2FpdChudWxsPT09KHQ9dGhpcy5rZXlNYW5pZmVzdCl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuYWRkKGkudG9LZXkoKSkpO31hc3luYyBjbGVhcihlKXt2YXIgdDtjb25zdCBpPWF3YWl0IHRoaXMuZ2V0Q2FjaGVLZXlzKCk7aSYmKGF3YWl0IGkuZmlsdGVyKCh0PT4hZXx8dC5pbmNsdWRlcyhlKSkpLnJlZHVjZSgoYXN5bmMoZSx0KT0+e2F3YWl0IGUsYXdhaXQgdGhpcy5jYWNoZS5yZW1vdmUodCk7fSksUHJvbWlzZS5yZXNvbHZlKCkpLGF3YWl0KG51bGw9PT0odD10aGlzLmtleU1hbmlmZXN0KXx8dm9pZCAwPT09dD92b2lkIDA6dC5jbGVhcigpKSk7fWFzeW5jIHdyYXBDYWNoZUVudHJ5KGUpe2NvbnN0IHQ9YXdhaXQgdGhpcy5ub3dQcm92aWRlcigpO3JldHVybiB7Ym9keTplLGV4cGlyZXNBdDpNYXRoLmZsb29yKHQvMWUzKStlLmV4cGlyZXNfaW59fWFzeW5jIGdldENhY2hlS2V5cygpe3ZhciBlO3JldHVybiB0aGlzLmtleU1hbmlmZXN0P251bGw9PT0oZT1hd2FpdCB0aGlzLmtleU1hbmlmZXN0LmdldCgpKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5rZXlzOnRoaXMuY2FjaGUuYWxsS2V5cz90aGlzLmNhY2hlLmFsbEtleXMoKTp2b2lkIDB9Z2V0SWRUb2tlbkNhY2hlS2V5KGUpe3JldHVybiBuZXcgQyh7Y2xpZW50SWQ6ZX0sXCJAQGF1dGgwc3BhanNAQFwiLFwiQEB1c2VyQEBcIikudG9LZXkoKX1tYXRjaEV4aXN0aW5nQ2FjaGVLZXkoZSx0KXtyZXR1cm4gdC5maWx0ZXIoKHQ9Pnt2YXIgaTtjb25zdCBvPUMuZnJvbUtleSh0KSxuPW5ldyBTZXQoby5zY29wZSYmby5zY29wZS5zcGxpdChcIiBcIikpLGE9KG51bGw9PT0oaT1lLnNjb3BlKXx8dm9pZCAwPT09aT92b2lkIDA6aS5zcGxpdChcIiBcIikpfHxbXSxyPW8uc2NvcGUmJmEucmVkdWNlKCgoZSx0KT0+ZSYmbi5oYXModCkpLCEwKTtyZXR1cm4gXCJAQGF1dGgwc3BhanNAQFwiPT09by5wcmVmaXgmJm8uY2xpZW50SWQ9PT1lLmNsaWVudElkJiZvLmF1ZGllbmNlPT09ZS5hdWRpZW5jZSYmcn0pKVswXX19Y2xhc3MgWntjb25zdHJ1Y3RvcihlLHQsaSl7dGhpcy5zdG9yYWdlPWUsdGhpcy5jbGllbnRJZD10LHRoaXMuY29va2llRG9tYWluPWksdGhpcy5zdG9yYWdlS2V5PWBhMC5zcGFqcy50eHMuJHt0aGlzLmNsaWVudElkfWA7fWNyZWF0ZShlKXt0aGlzLnN0b3JhZ2Uuc2F2ZSh0aGlzLnN0b3JhZ2VLZXksZSx7ZGF5c1VudGlsRXhwaXJlOjEsY29va2llRG9tYWluOnRoaXMuY29va2llRG9tYWlufSk7fWdldCgpe3JldHVybiB0aGlzLnN0b3JhZ2UuZ2V0KHRoaXMuc3RvcmFnZUtleSl9cmVtb3ZlKCl7dGhpcy5zdG9yYWdlLnJlbW92ZSh0aGlzLnN0b3JhZ2VLZXkse2Nvb2tpZURvbWFpbjp0aGlzLmNvb2tpZURvbWFpbn0pO319Y29uc3QgSz1lPT5cIm51bWJlclwiPT10eXBlb2YgZSxXPVtcImlzc1wiLFwiYXVkXCIsXCJleHBcIixcIm5iZlwiLFwiaWF0XCIsXCJqdGlcIixcImF6cFwiLFwibm9uY2VcIixcImF1dGhfdGltZVwiLFwiYXRfaGFzaFwiLFwiY19oYXNoXCIsXCJhY3JcIixcImFtclwiLFwic3ViX2p3a1wiLFwiY25mXCIsXCJzaXBfZnJvbV90YWdcIixcInNpcF9kYXRlXCIsXCJzaXBfY2FsbGlkXCIsXCJzaXBfY3NlcV9udW1cIixcInNpcF92aWFfYnJhbmNoXCIsXCJvcmlnXCIsXCJkZXN0XCIsXCJta3lcIixcImV2ZW50c1wiLFwidG9lXCIsXCJ0eG5cIixcInJwaFwiLFwic2lkXCIsXCJ2b3RcIixcInZ0bVwiXSxFPWU9PntpZighZS5pZF90b2tlbil0aHJvdyBuZXcgRXJyb3IoXCJJRCB0b2tlbiBpcyByZXF1aXJlZCBidXQgbWlzc2luZ1wiKTtjb25zdCB0PShlPT57Y29uc3QgdD1lLnNwbGl0KFwiLlwiKSxbaSxvLG5dPXQ7aWYoMyE9PXQubGVuZ3RofHwhaXx8IW98fCFuKXRocm93IG5ldyBFcnJvcihcIklEIHRva2VuIGNvdWxkIG5vdCBiZSBkZWNvZGVkXCIpO2NvbnN0IGE9SlNPTi5wYXJzZShiKG8pKSxyPXtfX3JhdzplfSxzPXt9O3JldHVybiBPYmplY3Qua2V5cyhhKS5mb3JFYWNoKChlPT57cltlXT1hW2VdLFcuaW5jbHVkZXMoZSl8fChzW2VdPWFbZV0pO30pKSx7ZW5jb2RlZDp7aGVhZGVyOmkscGF5bG9hZDpvLHNpZ25hdHVyZTpufSxoZWFkZXI6SlNPTi5wYXJzZShiKGkpKSxjbGFpbXM6cix1c2VyOnN9fSkoZS5pZF90b2tlbik7aWYoIXQuY2xhaW1zLmlzcyl0aHJvdyBuZXcgRXJyb3IoXCJJc3N1ZXIgKGlzcykgY2xhaW0gbXVzdCBiZSBhIHN0cmluZyBwcmVzZW50IGluIHRoZSBJRCB0b2tlblwiKTtpZih0LmNsYWltcy5pc3MhPT1lLmlzcyl0aHJvdyBuZXcgRXJyb3IoYElzc3VlciAoaXNzKSBjbGFpbSBtaXNtYXRjaCBpbiB0aGUgSUQgdG9rZW47IGV4cGVjdGVkIFwiJHtlLmlzc31cIiwgZm91bmQgXCIke3QuY2xhaW1zLmlzc31cImApO2lmKCF0LnVzZXIuc3ViKXRocm93IG5ldyBFcnJvcihcIlN1YmplY3QgKHN1YikgY2xhaW0gbXVzdCBiZSBhIHN0cmluZyBwcmVzZW50IGluIHRoZSBJRCB0b2tlblwiKTtpZihcIlJTMjU2XCIhPT10LmhlYWRlci5hbGcpdGhyb3cgbmV3IEVycm9yKGBTaWduYXR1cmUgYWxnb3JpdGhtIG9mIFwiJHt0LmhlYWRlci5hbGd9XCIgaXMgbm90IHN1cHBvcnRlZC4gRXhwZWN0ZWQgdGhlIElEIHRva2VuIHRvIGJlIHNpZ25lZCB3aXRoIFwiUlMyNTZcIi5gKTtpZighdC5jbGFpbXMuYXVkfHxcInN0cmluZ1wiIT10eXBlb2YgdC5jbGFpbXMuYXVkJiYhQXJyYXkuaXNBcnJheSh0LmNsYWltcy5hdWQpKXRocm93IG5ldyBFcnJvcihcIkF1ZGllbmNlIChhdWQpIGNsYWltIG11c3QgYmUgYSBzdHJpbmcgb3IgYXJyYXkgb2Ygc3RyaW5ncyBwcmVzZW50IGluIHRoZSBJRCB0b2tlblwiKTtpZihBcnJheS5pc0FycmF5KHQuY2xhaW1zLmF1ZCkpe2lmKCF0LmNsYWltcy5hdWQuaW5jbHVkZXMoZS5hdWQpKXRocm93IG5ldyBFcnJvcihgQXVkaWVuY2UgKGF1ZCkgY2xhaW0gbWlzbWF0Y2ggaW4gdGhlIElEIHRva2VuOyBleHBlY3RlZCBcIiR7ZS5hdWR9XCIgYnV0IHdhcyBub3Qgb25lIG9mIFwiJHt0LmNsYWltcy5hdWQuam9pbihcIiwgXCIpfVwiYCk7aWYodC5jbGFpbXMuYXVkLmxlbmd0aD4xKXtpZighdC5jbGFpbXMuYXpwKXRocm93IG5ldyBFcnJvcihcIkF1dGhvcml6ZWQgUGFydHkgKGF6cCkgY2xhaW0gbXVzdCBiZSBhIHN0cmluZyBwcmVzZW50IGluIHRoZSBJRCB0b2tlbiB3aGVuIEF1ZGllbmNlIChhdWQpIGNsYWltIGhhcyBtdWx0aXBsZSB2YWx1ZXNcIik7aWYodC5jbGFpbXMuYXpwIT09ZS5hdWQpdGhyb3cgbmV3IEVycm9yKGBBdXRob3JpemVkIFBhcnR5IChhenApIGNsYWltIG1pc21hdGNoIGluIHRoZSBJRCB0b2tlbjsgZXhwZWN0ZWQgXCIke2UuYXVkfVwiLCBmb3VuZCBcIiR7dC5jbGFpbXMuYXpwfVwiYCl9fWVsc2UgaWYodC5jbGFpbXMuYXVkIT09ZS5hdWQpdGhyb3cgbmV3IEVycm9yKGBBdWRpZW5jZSAoYXVkKSBjbGFpbSBtaXNtYXRjaCBpbiB0aGUgSUQgdG9rZW47IGV4cGVjdGVkIFwiJHtlLmF1ZH1cIiBidXQgZm91bmQgXCIke3QuY2xhaW1zLmF1ZH1cImApO2lmKGUubm9uY2Upe2lmKCF0LmNsYWltcy5ub25jZSl0aHJvdyBuZXcgRXJyb3IoXCJOb25jZSAobm9uY2UpIGNsYWltIG11c3QgYmUgYSBzdHJpbmcgcHJlc2VudCBpbiB0aGUgSUQgdG9rZW5cIik7aWYodC5jbGFpbXMubm9uY2UhPT1lLm5vbmNlKXRocm93IG5ldyBFcnJvcihgTm9uY2UgKG5vbmNlKSBjbGFpbSBtaXNtYXRjaCBpbiB0aGUgSUQgdG9rZW47IGV4cGVjdGVkIFwiJHtlLm5vbmNlfVwiLCBmb3VuZCBcIiR7dC5jbGFpbXMubm9uY2V9XCJgKX1pZihlLm1heF9hZ2UmJiFLKHQuY2xhaW1zLmF1dGhfdGltZSkpdGhyb3cgbmV3IEVycm9yKFwiQXV0aGVudGljYXRpb24gVGltZSAoYXV0aF90aW1lKSBjbGFpbSBtdXN0IGJlIGEgbnVtYmVyIHByZXNlbnQgaW4gdGhlIElEIHRva2VuIHdoZW4gTWF4IEFnZSAobWF4X2FnZSkgaXMgc3BlY2lmaWVkXCIpO2lmKG51bGw9PXQuY2xhaW1zLmV4cHx8IUsodC5jbGFpbXMuZXhwKSl0aHJvdyBuZXcgRXJyb3IoXCJFeHBpcmF0aW9uIFRpbWUgKGV4cCkgY2xhaW0gbXVzdCBiZSBhIG51bWJlciBwcmVzZW50IGluIHRoZSBJRCB0b2tlblwiKTtpZighSyh0LmNsYWltcy5pYXQpKXRocm93IG5ldyBFcnJvcihcIklzc3VlZCBBdCAoaWF0KSBjbGFpbSBtdXN0IGJlIGEgbnVtYmVyIHByZXNlbnQgaW4gdGhlIElEIHRva2VuXCIpO2NvbnN0IGk9ZS5sZWV3YXl8fDYwLG89bmV3IERhdGUoZS5ub3d8fERhdGUubm93KCkpLG49bmV3IERhdGUoMCk7aWYobi5zZXRVVENTZWNvbmRzKHQuY2xhaW1zLmV4cCtpKSxvPm4pdGhyb3cgbmV3IEVycm9yKGBFeHBpcmF0aW9uIFRpbWUgKGV4cCkgY2xhaW0gZXJyb3IgaW4gdGhlIElEIHRva2VuOyBjdXJyZW50IHRpbWUgKCR7b30pIGlzIGFmdGVyIGV4cGlyYXRpb24gdGltZSAoJHtufSlgKTtpZihudWxsIT10LmNsYWltcy5uYmYmJksodC5jbGFpbXMubmJmKSl7Y29uc3QgZT1uZXcgRGF0ZSgwKTtpZihlLnNldFVUQ1NlY29uZHModC5jbGFpbXMubmJmLWkpLG88ZSl0aHJvdyBuZXcgRXJyb3IoYE5vdCBCZWZvcmUgdGltZSAobmJmKSBjbGFpbSBpbiB0aGUgSUQgdG9rZW4gaW5kaWNhdGVzIHRoYXQgdGhpcyB0b2tlbiBjYW4ndCBiZSB1c2VkIGp1c3QgeWV0LiBDdXJyZW50IHRpbWUgKCR7b30pIGlzIGJlZm9yZSAke2V9YCl9aWYobnVsbCE9dC5jbGFpbXMuYXV0aF90aW1lJiZLKHQuY2xhaW1zLmF1dGhfdGltZSkpe2NvbnN0IG49bmV3IERhdGUoMCk7aWYobi5zZXRVVENTZWNvbmRzKHBhcnNlSW50KHQuY2xhaW1zLmF1dGhfdGltZSkrZS5tYXhfYWdlK2kpLG8+bil0aHJvdyBuZXcgRXJyb3IoYEF1dGhlbnRpY2F0aW9uIFRpbWUgKGF1dGhfdGltZSkgY2xhaW0gaW4gdGhlIElEIHRva2VuIGluZGljYXRlcyB0aGF0IHRvbyBtdWNoIHRpbWUgaGFzIHBhc3NlZCBzaW5jZSB0aGUgbGFzdCBlbmQtdXNlciBhdXRoZW50aWNhdGlvbi4gQ3VycmVudCB0aW1lICgke299KSBpcyBhZnRlciBsYXN0IGF1dGggYXQgJHtufWApfWlmKGUub3JnYW5pemF0aW9uKXtjb25zdCBpPWUub3JnYW5pemF0aW9uLnRyaW0oKTtpZihpLnN0YXJ0c1dpdGgoXCJvcmdfXCIpKXtjb25zdCBlPWk7aWYoIXQuY2xhaW1zLm9yZ19pZCl0aHJvdyBuZXcgRXJyb3IoXCJPcmdhbml6YXRpb24gSUQgKG9yZ19pZCkgY2xhaW0gbXVzdCBiZSBhIHN0cmluZyBwcmVzZW50IGluIHRoZSBJRCB0b2tlblwiKTtpZihlIT09dC5jbGFpbXMub3JnX2lkKXRocm93IG5ldyBFcnJvcihgT3JnYW5pemF0aW9uIElEIChvcmdfaWQpIGNsYWltIG1pc21hdGNoIGluIHRoZSBJRCB0b2tlbjsgZXhwZWN0ZWQgXCIke2V9XCIsIGZvdW5kIFwiJHt0LmNsYWltcy5vcmdfaWR9XCJgKX1lbHNlIHtjb25zdCBlPWkudG9Mb3dlckNhc2UoKTtpZighdC5jbGFpbXMub3JnX25hbWUpdGhyb3cgbmV3IEVycm9yKFwiT3JnYW5pemF0aW9uIE5hbWUgKG9yZ19uYW1lKSBjbGFpbSBtdXN0IGJlIGEgc3RyaW5nIHByZXNlbnQgaW4gdGhlIElEIHRva2VuXCIpO2lmKGUhPT10LmNsYWltcy5vcmdfbmFtZSl0aHJvdyBuZXcgRXJyb3IoYE9yZ2FuaXphdGlvbiBOYW1lIChvcmdfbmFtZSkgY2xhaW0gbWlzbWF0Y2ggaW4gdGhlIElEIHRva2VuOyBleHBlY3RlZCBcIiR7ZX1cIiwgZm91bmQgXCIke3QuY2xhaW1zLm9yZ19uYW1lfVwiYCl9fXJldHVybiB0fTt2YXIgUj1vKChmdW5jdGlvbihlLGkpe3ZhciBvPXQmJnQuX19hc3NpZ258fGZ1bmN0aW9uKCl7cmV0dXJuIG89T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LGk9MSxvPWFyZ3VtZW50cy5sZW5ndGg7aTxvO2krKylmb3IodmFyIG4gaW4gdD1hcmd1bWVudHNbaV0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbikmJihlW25dPXRbbl0pO3JldHVybiBlfSxvLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07ZnVuY3Rpb24gbihlLHQpe2lmKCF0KXJldHVybiBcIlwiO3ZhciBpPVwiOyBcIitlO3JldHVybiAhMD09PXQ/aTppK1wiPVwiK3R9ZnVuY3Rpb24gYShlLHQsaSl7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChlKS5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDVFfDYwfDdDKS9nLGRlY29kZVVSSUNvbXBvbmVudCkucmVwbGFjZSgvXFwoL2csXCIlMjhcIikucmVwbGFjZSgvXFwpL2csXCIlMjlcIikrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KHQpLnJlcGxhY2UoLyUoMjN8MjR8MjZ8MkJ8M0F8M0N8M0V8M0R8MkZ8M0Z8NDB8NUJ8NUR8NUV8NjB8N0J8N0R8N0MpL2csZGVjb2RlVVJJQ29tcG9uZW50KStmdW5jdGlvbihlKXtpZihcIm51bWJlclwiPT10eXBlb2YgZS5leHBpcmVzKXt2YXIgdD1uZXcgRGF0ZTt0LnNldE1pbGxpc2Vjb25kcyh0LmdldE1pbGxpc2Vjb25kcygpKzg2NGU1KmUuZXhwaXJlcyksZS5leHBpcmVzPXQ7fXJldHVybiBuKFwiRXhwaXJlc1wiLGUuZXhwaXJlcz9lLmV4cGlyZXMudG9VVENTdHJpbmcoKTpcIlwiKStuKFwiRG9tYWluXCIsZS5kb21haW4pK24oXCJQYXRoXCIsZS5wYXRoKStuKFwiU2VjdXJlXCIsZS5zZWN1cmUpK24oXCJTYW1lU2l0ZVwiLGUuc2FtZVNpdGUpfShpKX1mdW5jdGlvbiByKGUpe2Zvcih2YXIgdD17fSxpPWU/ZS5zcGxpdChcIjsgXCIpOltdLG89LyglW1xcZEEtRl17Mn0pKy9naSxuPTA7bjxpLmxlbmd0aDtuKyspe3ZhciBhPWlbbl0uc3BsaXQoXCI9XCIpLHI9YS5zbGljZSgxKS5qb2luKFwiPVwiKTsnXCInPT09ci5jaGFyQXQoMCkmJihyPXIuc2xpY2UoMSwtMSkpO3RyeXt0W2FbMF0ucmVwbGFjZShvLGRlY29kZVVSSUNvbXBvbmVudCldPXIucmVwbGFjZShvLGRlY29kZVVSSUNvbXBvbmVudCk7fWNhdGNoKGUpe319cmV0dXJuIHR9ZnVuY3Rpb24gcygpe3JldHVybiByKGRvY3VtZW50LmNvb2tpZSl9ZnVuY3Rpb24gYyhlLHQsaSl7ZG9jdW1lbnQuY29va2llPWEoZSx0LG8oe3BhdGg6XCIvXCJ9LGkpKTt9aS5fX2VzTW9kdWxlPSEwLGkuZW5jb2RlPWEsaS5wYXJzZT1yLGkuZ2V0QWxsPXMsaS5nZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHMoKVtlXX0saS5zZXQ9YyxpLnJlbW92ZT1mdW5jdGlvbihlLHQpe2MoZSxcIlwiLG8obyh7fSx0KSx7ZXhwaXJlczotMX0pKTt9O30pKTtpKFIpLFIuZW5jb2RlLFIucGFyc2UsUi5nZXRBbGw7dmFyIFU9Ui5nZXQsTD1SLnNldCxEPVIucmVtb3ZlO2NvbnN0IFg9e2dldChlKXtjb25zdCB0PVUoZSk7aWYodm9pZCAwIT09dClyZXR1cm4gSlNPTi5wYXJzZSh0KX0sc2F2ZShlLHQsaSl7bGV0IG89e307XCJodHRwczpcIj09PXdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCYmKG89e3NlY3VyZTohMCxzYW1lU2l0ZTpcIm5vbmVcIn0pLChudWxsPT1pP3ZvaWQgMDppLmRheXNVbnRpbEV4cGlyZSkmJihvLmV4cGlyZXM9aS5kYXlzVW50aWxFeHBpcmUpLChudWxsPT1pP3ZvaWQgMDppLmNvb2tpZURvbWFpbikmJihvLmRvbWFpbj1pLmNvb2tpZURvbWFpbiksTChlLEpTT04uc3RyaW5naWZ5KHQpLG8pO30scmVtb3ZlKGUsdCl7bGV0IGk9e307KG51bGw9PXQ/dm9pZCAwOnQuY29va2llRG9tYWluKSYmKGkuZG9tYWluPXQuY29va2llRG9tYWluKSxEKGUsaSk7fX0sTj17Z2V0KGUpe2NvbnN0IHQ9WC5nZXQoZSk7cmV0dXJuIHR8fFguZ2V0KGBfbGVnYWN5XyR7ZX1gKX0sc2F2ZShlLHQsaSl7bGV0IG89e307XCJodHRwczpcIj09PXdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCYmKG89e3NlY3VyZTohMH0pLChudWxsPT1pP3ZvaWQgMDppLmRheXNVbnRpbEV4cGlyZSkmJihvLmV4cGlyZXM9aS5kYXlzVW50aWxFeHBpcmUpLChudWxsPT1pP3ZvaWQgMDppLmNvb2tpZURvbWFpbikmJihvLmRvbWFpbj1pLmNvb2tpZURvbWFpbiksTChgX2xlZ2FjeV8ke2V9YCxKU09OLnN0cmluZ2lmeSh0KSxvKSxYLnNhdmUoZSx0LGkpO30scmVtb3ZlKGUsdCl7bGV0IGk9e307KG51bGw9PXQ/dm9pZCAwOnQuY29va2llRG9tYWluKSYmKGkuZG9tYWluPXQuY29va2llRG9tYWluKSxEKGUsaSksWC5yZW1vdmUoZSx0KSxYLnJlbW92ZShgX2xlZ2FjeV8ke2V9YCx0KTt9fSxKPXtnZXQoZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHNlc3Npb25TdG9yYWdlKXJldHVybjtjb25zdCB0PXNlc3Npb25TdG9yYWdlLmdldEl0ZW0oZSk7cmV0dXJuIG51bGwhPXQ/SlNPTi5wYXJzZSh0KTp2b2lkIDB9LHNhdmUoZSx0KXtzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGUsSlNPTi5zdHJpbmdpZnkodCkpO30scmVtb3ZlKGUpe3Nlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oZSk7fX07ZnVuY3Rpb24gRihlLHQsaSl7dmFyIG89dm9pZCAwPT09dD9udWxsOnQsbj1mdW5jdGlvbihlLHQpe3ZhciBpPWF0b2IoZSk7aWYodCl7Zm9yKHZhciBvPW5ldyBVaW50OEFycmF5KGkubGVuZ3RoKSxuPTAsYT1pLmxlbmd0aDtuPGE7KytuKW9bbl09aS5jaGFyQ29kZUF0KG4pO3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsbmV3IFVpbnQxNkFycmF5KG8uYnVmZmVyKSl9cmV0dXJuIGl9KGUsdm9pZCAwIT09aSYmaSksYT1uLmluZGV4T2YoXCJcXG5cIiwxMCkrMSxyPW4uc3Vic3RyaW5nKGEpKyhvP1wiLy8jIHNvdXJjZU1hcHBpbmdVUkw9XCIrbzpcIlwiKSxzPW5ldyBCbG9iKFtyXSx7dHlwZTpcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIn0pO3JldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKHMpfXZhciBILFksRyxWLE09KEg9XCJMeW9nY205c2JIVndMWEJzZFdkcGJpMTNaV0l0ZDI5eWEyVnlMV3h2WVdSbGNpQXFMd29oWm5WdVkzUnBiMjRvS1hzaWRYTmxJSE4wY21samRDSTdZMnhoYzNNZ1pTQmxlSFJsYm1SeklFVnljbTl5ZTJOdmJuTjBjblZqZEc5eUtIUXNjaWw3YzNWd1pYSW9jaWtzZEdocGN5NWxjbkp2Y2oxMExIUm9hWE11WlhKeWIzSmZaR1Z6WTNKcGNIUnBiMjQ5Y2l4UFltcGxZM1F1YzJWMFVISnZkRzkwZVhCbFQyWW9kR2hwY3l4bExuQnliM1J2ZEhsd1pTbDljM1JoZEdsaklHWnliMjFRWVhsc2IyRmtLSHRsY25KdmNqcDBMR1Z5Y205eVgyUmxjMk55YVhCMGFXOXVPbko5S1h0eVpYUjFjbTRnYm1WM0lHVW9kQ3h5S1gxOVkyeGhjM01nZENCbGVIUmxibVJ6SUdWN1kyOXVjM1J5ZFdOMGIzSW9aU3h6S1h0emRYQmxjaWdpYldsemMybHVaMTl5WldaeVpYTm9YM1J2YTJWdUlpeGdUV2x6YzJsdVp5QlNaV1p5WlhOb0lGUnZhMlZ1SUNoaGRXUnBaVzVqWlRvZ0p5UjdjaWhsTEZzaVpHVm1ZWFZzZENKZEtYMG5MQ0J6WTI5d1pUb2dKeVI3Y2loektYMG5LV0FwTEhSb2FYTXVZWFZrYVdWdVkyVTlaU3gwYUdsekxuTmpiM0JsUFhNc1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1LSFJvYVhNc2RDNXdjbTkwYjNSNWNHVXBmWDFtZFc1amRHbHZiaUJ5S0dVc2REMWJYU2w3Y21WMGRYSnVJR1VtSmlGMExtbHVZMngxWkdWektHVXBQMlU2SWlKOUltWjFibU4wYVc5dUlqMDlkSGx3Wlc5bUlGTjFjSEJ5WlhOelpXUkZjbkp2Y2lZbVUzVndjSEpsYzNObFpFVnljbTl5TzJOdmJuTjBJSE05WlQwK2UzWmhjbnRqYkdsbGJuUkpaRHAwZlQxbExISTlablZ1WTNScGIyNG9aU3gwS1h0MllYSWdjajE3ZlR0bWIzSW9kbUZ5SUhNZ2FXNGdaU2xQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvWlN4ektTWW1kQzVwYm1SbGVFOW1LSE1wUERBbUppaHlXM05kUFdWYmMxMHBPMmxtS0c1MWJHd2hQV1VtSmlKbWRXNWpkR2x2YmlJOVBYUjVjR1Z2WmlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4ektYdDJZWElnYnowd08yWnZjaWh6UFU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVWTjViV0p2YkhNb1pTazdienh6TG14bGJtZDBhRHR2S3lzcGRDNXBibVJsZUU5bUtITmJiMTBwUERBbUprOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVXVZMkZzYkNobExITmJiMTBwSmlZb2NsdHpXMjlkWFQxbFczTmJiMTFkS1gxeVpYUjFjbTRnY24wb1pTeGJJbU5zYVdWdWRFbGtJbDBwTzNKbGRIVnliaUJ1WlhjZ1ZWSk1VMlZoY21Ob1VHRnlZVzF6S0NobFBUNVBZbXBsWTNRdWEyVjVjeWhsS1M1bWFXeDBaWElvS0hROVBuWnZhV1FnTUNFOVBXVmJkRjBwS1M1eVpXUjFZMlVvS0NoMExISXBQVDVQWW1wbFkzUXVZWE56YVdkdUtFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc2RDa3NlMXR5WFRwbFczSmRmU2twTEh0OUtTa29UMkpxWldOMExtRnpjMmxuYmloN1kyeHBaVzUwWDJsa09uUjlMSElwS1NrdWRHOVRkSEpwYm1jb0tYMDdiR1YwSUc4OWUzMDdZMjl1YzNRZ2JqMG9aU3gwS1QwK1lDUjdaWDE4Skh0MGZXQTdZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2liV1Z6YzJGblpTSXNLR0Z6ZVc1aktIdGtZWFJoT250MGFXMWxiM1YwT21Vc1lYVjBhRHB5TEdabGRHTm9WWEpzT21rc1ptVjBZMmhQY0hScGIyNXpPbU1zZFhObFJtOXliVVJoZEdFNllYMHNjRzl5ZEhNNlczQmRmU2s5UG50c1pYUWdaanRqYjI1emRIdGhkV1JwWlc1alpUcDFMSE5qYjNCbE9teDlQWEo4Zkh0OU8zUnllWHRqYjI1emRDQnlQV0UvS0dVOVBudGpiMjV6ZENCMFBXNWxkeUJWVWt4VFpXRnlZMmhRWVhKaGJYTW9aU2tzY2oxN2ZUdHlaWFIxY200Z2RDNW1iM0pGWVdOb0tDZ29aU3gwS1QwK2UzSmJkRjA5WlgwcEtTeHlmU2tvWXk1aWIyUjVLVHBLVTA5T0xuQmhjbk5sS0dNdVltOWtlU2s3YVdZb0lYSXVjbVZtY21WemFGOTBiMnRsYmlZbUluSmxabkpsYzJoZmRHOXJaVzRpUFQwOWNpNW5jbUZ1ZEY5MGVYQmxLWHRqYjI1emRDQmxQU2dvWlN4MEtUMCtiMXR1S0dVc2RDbGRLU2gxTEd3cE8ybG1LQ0ZsS1hSb2NtOTNJRzVsZHlCMEtIVXNiQ2s3WXk1aWIyUjVQV0UvY3loUFltcGxZM1F1WVhOemFXZHVLRTlpYW1WamRDNWhjM05wWjI0b2UzMHNjaWtzZTNKbFpuSmxjMmhmZEc5clpXNDZaWDBwS1RwS1UwOU9Mbk4wY21sdVoybG1lU2hQWW1wbFkzUXVZWE56YVdkdUtFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc2Npa3NlM0psWm5KbGMyaGZkRzlyWlc0NlpYMHBLWDFzWlhRZ2FDeG5PeUptZFc1amRHbHZiaUk5UFhSNWNHVnZaaUJCWW05eWRFTnZiblJ5YjJ4c1pYSW1KaWhvUFc1bGR5QkJZbTl5ZEVOdmJuUnliMnhzWlhJc1l5NXphV2R1WVd3OWFDNXphV2R1WVd3cE8zUnllWHRuUFdGM1lXbDBJRkJ5YjIxcGMyVXVjbUZqWlNoYktHUTlaU3h1WlhjZ1VISnZiV2x6WlNnb1pUMCtjMlYwVkdsdFpXOTFkQ2hsTEdRcEtTa3BMR1psZEdOb0tHa3NUMkpxWldOMExtRnpjMmxuYmloN2ZTeGpLU2xkS1gxallYUmphQ2hsS1h0eVpYUjFjbTRnZG05cFpDQndMbkJ2YzNSTlpYTnpZV2RsS0h0bGNuSnZjanBsTG0xbGMzTmhaMlY5S1gxcFppZ2haeWx5WlhSMWNtNGdhQ1ltYUM1aFltOXlkQ2dwTEhadmFXUWdjQzV3YjNOMFRXVnpjMkZuWlNoN1pYSnliM0k2SWxScGJXVnZkWFFnZDJobGJpQmxlR1ZqZFhScGJtY2dKMlpsZEdOb0p5SjlLVHRtUFdGM1lXbDBJR2N1YW5OdmJpZ3BMR1l1Y21WbWNtVnphRjkwYjJ0bGJqOG9LQ2hsTEhRc2NpazlQbnR2VzI0b2RDeHlLVjA5WlgwcEtHWXVjbVZtY21WemFGOTBiMnRsYml4MUxHd3BMR1JsYkdWMFpTQm1MbkpsWm5KbGMyaGZkRzlyWlc0cE9pZ29aU3gwS1QwK2UyUmxiR1YwWlNCdlcyNG9aU3gwS1YxOUtTaDFMR3dwTEhBdWNHOXpkRTFsYzNOaFoyVW9lMjlyT21jdWIyc3Nhbk52YmpwbWZTbDlZMkYwWTJnb1pTbDdjQzV3YjNOMFRXVnpjMkZuWlNoN2IyczZJVEVzYW5OdmJqcDdaWEp5YjNJNlpTNWxjbkp2Y2l4bGNuSnZjbDlrWlhOamNtbHdkR2x2YmpwbExtMWxjM05oWjJWOWZTbDlkbUZ5SUdSOUtTbDlLQ2s3Q2dvPVwiLFk9bnVsbCxHPSExLGZ1bmN0aW9uKGUpe3JldHVybiBWPVZ8fEYoSCxZLEcpLG5ldyBXb3JrZXIoVixlKX0pO2NvbnN0IEE9e307Y2xhc3MgQntjb25zdHJ1Y3RvcihlLHQpe3RoaXMuY2FjaGU9ZSx0aGlzLmNsaWVudElkPXQsdGhpcy5tYW5pZmVzdEtleT10aGlzLmNyZWF0ZU1hbmlmZXN0S2V5RnJvbSh0aGlzLmNsaWVudElkKTt9YXN5bmMgYWRkKGUpe3ZhciB0O2NvbnN0IGk9bmV3IFNldCgobnVsbD09PSh0PWF3YWl0IHRoaXMuY2FjaGUuZ2V0KHRoaXMubWFuaWZlc3RLZXkpKXx8dm9pZCAwPT09dD92b2lkIDA6dC5rZXlzKXx8W10pO2kuYWRkKGUpLGF3YWl0IHRoaXMuY2FjaGUuc2V0KHRoaXMubWFuaWZlc3RLZXkse2tleXM6Wy4uLmldfSk7fWFzeW5jIHJlbW92ZShlKXtjb25zdCB0PWF3YWl0IHRoaXMuY2FjaGUuZ2V0KHRoaXMubWFuaWZlc3RLZXkpO2lmKHQpe2NvbnN0IGk9bmV3IFNldCh0LmtleXMpO3JldHVybiBpLmRlbGV0ZShlKSxpLnNpemU+MD9hd2FpdCB0aGlzLmNhY2hlLnNldCh0aGlzLm1hbmlmZXN0S2V5LHtrZXlzOlsuLi5pXX0pOmF3YWl0IHRoaXMuY2FjaGUucmVtb3ZlKHRoaXMubWFuaWZlc3RLZXkpfX1nZXQoKXtyZXR1cm4gdGhpcy5jYWNoZS5nZXQodGhpcy5tYW5pZmVzdEtleSl9Y2xlYXIoKXtyZXR1cm4gdGhpcy5jYWNoZS5yZW1vdmUodGhpcy5tYW5pZmVzdEtleSl9Y3JlYXRlTWFuaWZlc3RLZXlGcm9tKGUpe3JldHVybiBgQEBhdXRoMHNwYWpzQEA6OiR7ZX1gfX1jb25zdCAkPXttZW1vcnk6KCk9PihuZXcgUCkuZW5jbG9zZWRDYWNoZSxsb2NhbHN0b3JhZ2U6KCk9Pm5ldyB6fSxxPWU9PiRbZV0sUT10PT57Y29uc3R7b3BlblVybDppLG9uUmVkaXJlY3Q6b309dCxuPWUodCxbXCJvcGVuVXJsXCIsXCJvblJlZGlyZWN0XCJdKTtyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LG4pLHtvcGVuVXJsOiExPT09aXx8aT9pOm99KX0sZWU9bmV3IGE7Y2xhc3MgdGV7Y29uc3RydWN0b3IoZSl7bGV0IHQsaTtpZih0aGlzLnVzZXJDYWNoZT0obmV3IFApLmVuY2xvc2VkQ2FjaGUsdGhpcy5kZWZhdWx0T3B0aW9ucz17YXV0aG9yaXphdGlvblBhcmFtczp7c2NvcGU6XCJvcGVuaWQgcHJvZmlsZSBlbWFpbFwifSx1c2VSZWZyZXNoVG9rZW5zRmFsbGJhY2s6ITEsdXNlRm9ybURhdGE6ITB9LHRoaXMuX3JlbGVhc2VMb2NrT25QYWdlSGlkZT1hc3luYygpPT57YXdhaXQgZWUucmVsZWFzZUxvY2soXCJhdXRoMC5sb2NrLmdldFRva2VuU2lsZW50bHlcIiksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLHRoaXMuX3JlbGVhc2VMb2NrT25QYWdlSGlkZSk7fSx0aGlzLm9wdGlvbnM9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdGhpcy5kZWZhdWx0T3B0aW9ucyksZSkse2F1dGhvcml6YXRpb25QYXJhbXM6T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LHRoaXMuZGVmYXVsdE9wdGlvbnMuYXV0aG9yaXphdGlvblBhcmFtcyksZS5hdXRob3JpemF0aW9uUGFyYW1zKX0pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJigoKT0+e2lmKCF3KCkpdGhyb3cgbmV3IEVycm9yKFwiRm9yIHNlY3VyaXR5IHJlYXNvbnMsIGB3aW5kb3cuY3J5cHRvYCBpcyByZXF1aXJlZCB0byBydW4gYGF1dGgwLXNwYS1qc2AuXCIpO2lmKHZvaWQgMD09PXcoKS5zdWJ0bGUpdGhyb3cgbmV3IEVycm9yKFwiXFxuICAgICAgYXV0aDAtc3BhLWpzIG11c3QgcnVuIG9uIGEgc2VjdXJlIG9yaWdpbi4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hdXRoMC9hdXRoMC1zcGEtanMvYmxvYi9tYWluL0ZBUS5tZCN3aHktZG8taS1nZXQtYXV0aDAtc3BhLWpzLW11c3QtcnVuLW9uLWEtc2VjdXJlLW9yaWdpbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cXG4gICAgXCIpfSkoKSxlLmNhY2hlJiZlLmNhY2hlTG9jYXRpb24mJmNvbnNvbGUud2FybihcIkJvdGggYGNhY2hlYCBhbmQgYGNhY2hlTG9jYXRpb25gIG9wdGlvbnMgaGF2ZSBiZWVuIHNwZWNpZmllZCBpbiB0aGUgQXV0aDBDbGllbnQgY29uZmlndXJhdGlvbjsgaWdub3JpbmcgYGNhY2hlTG9jYXRpb25gIGFuZCB1c2luZyBgY2FjaGVgLlwiKSxlLmNhY2hlKWk9ZS5jYWNoZTtlbHNlIHtpZih0PWUuY2FjaGVMb2NhdGlvbnx8XCJtZW1vcnlcIiwhcSh0KSl0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY2FjaGUgbG9jYXRpb24gXCIke3R9XCJgKTtpPXEodCkoKTt9dGhpcy5odHRwVGltZW91dE1zPWUuaHR0cFRpbWVvdXRJblNlY29uZHM/MWUzKmUuaHR0cFRpbWVvdXRJblNlY29uZHM6MWU0LHRoaXMuY29va2llU3RvcmFnZT0hMT09PWUubGVnYWN5U2FtZVNpdGVDb29raWU/WDpOLHRoaXMub3JnSGludENvb2tpZU5hbWU9YGF1dGgwLiR7dGhpcy5vcHRpb25zLmNsaWVudElkfS5vcmdhbml6YXRpb25faGludGAsdGhpcy5pc0F1dGhlbnRpY2F0ZWRDb29raWVOYW1lPShlPT5gYXV0aDAuJHtlfS5pcy5hdXRoZW50aWNhdGVkYCkodGhpcy5vcHRpb25zLmNsaWVudElkKSx0aGlzLnNlc3Npb25DaGVja0V4cGlyeURheXM9ZS5zZXNzaW9uQ2hlY2tFeHBpcnlEYXlzfHwxO2NvbnN0IG89ZS51c2VDb29raWVzRm9yVHJhbnNhY3Rpb25zP3RoaXMuY29va2llU3RvcmFnZTpKO3ZhciBuO3RoaXMuc2NvcGU9aihcIm9wZW5pZFwiLHRoaXMub3B0aW9ucy5hdXRob3JpemF0aW9uUGFyYW1zLnNjb3BlLHRoaXMub3B0aW9ucy51c2VSZWZyZXNoVG9rZW5zP1wib2ZmbGluZV9hY2Nlc3NcIjpcIlwiKSx0aGlzLnRyYW5zYWN0aW9uTWFuYWdlcj1uZXcgWihvLHRoaXMub3B0aW9ucy5jbGllbnRJZCx0aGlzLm9wdGlvbnMuY29va2llRG9tYWluKSx0aGlzLm5vd1Byb3ZpZGVyPXRoaXMub3B0aW9ucy5ub3dQcm92aWRlcnx8Yyx0aGlzLmNhY2hlTWFuYWdlcj1uZXcgeChpLGkuYWxsS2V5cz92b2lkIDA6bmV3IEIoaSx0aGlzLm9wdGlvbnMuY2xpZW50SWQpLHRoaXMubm93UHJvdmlkZXIpLHRoaXMuZG9tYWluVXJsPShuPXRoaXMub3B0aW9ucy5kb21haW4sL15odHRwcz86XFwvXFwvLy50ZXN0KG4pP246YGh0dHBzOi8vJHtufWApLHRoaXMudG9rZW5Jc3N1ZXI9KChlLHQpPT5lP2Uuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpP2U6YGh0dHBzOi8vJHtlfS9gOmAke3R9L2ApKHRoaXMub3B0aW9ucy5pc3N1ZXIsdGhpcy5kb21haW5VcmwpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5Xb3JrZXImJnRoaXMub3B0aW9ucy51c2VSZWZyZXNoVG9rZW5zJiZcIm1lbW9yeVwiPT09dCYmKHRoaXMub3B0aW9ucy53b3JrZXJVcmw/dGhpcy53b3JrZXI9bmV3IFdvcmtlcih0aGlzLm9wdGlvbnMud29ya2VyVXJsKTp0aGlzLndvcmtlcj1uZXcgTSk7fV91cmwoZSl7Y29uc3QgdD1lbmNvZGVVUklDb21wb25lbnQoYnRvYShKU09OLnN0cmluZ2lmeSh0aGlzLm9wdGlvbnMuYXV0aDBDbGllbnR8fHMpKSk7cmV0dXJuIGAke3RoaXMuZG9tYWluVXJsfSR7ZX0mYXV0aDBDbGllbnQ9JHt0fWB9X2F1dGhvcml6ZVVybChlKXtyZXR1cm4gdGhpcy5fdXJsKGAvYXV0aG9yaXplPyR7dihlKX1gKX1hc3luYyBfdmVyaWZ5SWRUb2tlbihlLHQsaSl7Y29uc3Qgbz1hd2FpdCB0aGlzLm5vd1Byb3ZpZGVyKCk7cmV0dXJuIEUoe2lzczp0aGlzLnRva2VuSXNzdWVyLGF1ZDp0aGlzLm9wdGlvbnMuY2xpZW50SWQsaWRfdG9rZW46ZSxub25jZTp0LG9yZ2FuaXphdGlvbjppLGxlZXdheTp0aGlzLm9wdGlvbnMubGVld2F5LG1heF9hZ2U6KG49dGhpcy5vcHRpb25zLmF1dGhvcml6YXRpb25QYXJhbXMubWF4X2FnZSxcInN0cmluZ1wiIT10eXBlb2Ygbj9uOnBhcnNlSW50KG4sMTApfHx2b2lkIDApLG5vdzpvfSk7dmFyIG47fV9wcm9jZXNzT3JnSGludChlKXtlP3RoaXMuY29va2llU3RvcmFnZS5zYXZlKHRoaXMub3JnSGludENvb2tpZU5hbWUsZSx7ZGF5c1VudGlsRXhwaXJlOnRoaXMuc2Vzc2lvbkNoZWNrRXhwaXJ5RGF5cyxjb29raWVEb21haW46dGhpcy5vcHRpb25zLmNvb2tpZURvbWFpbn0pOnRoaXMuY29va2llU3RvcmFnZS5yZW1vdmUodGhpcy5vcmdIaW50Q29va2llTmFtZSx7Y29va2llRG9tYWluOnRoaXMub3B0aW9ucy5jb29raWVEb21haW59KTt9YXN5bmMgX3ByZXBhcmVBdXRob3JpemVVcmwoZSx0LGkpe2NvbnN0IG89ayh5KCkpLG49ayh5KCkpLGE9eSgpLHI9KGU9Pntjb25zdCB0PW5ldyBVaW50OEFycmF5KGUpO3JldHVybiAoZT0+e2NvbnN0IHQ9e1wiK1wiOlwiLVwiLFwiL1wiOlwiX1wiLFwiPVwiOlwiXCJ9O3JldHVybiBlLnJlcGxhY2UoL1srLz1dL2csKGU9PnRbZV0pKX0pKHdpbmRvdy5idG9hKFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uQXJyYXkuZnJvbSh0KSkpKX0pKGF3YWl0KGFzeW5jIGU9Pntjb25zdCB0PXcoKS5zdWJ0bGUuZGlnZXN0KHtuYW1lOlwiU0hBLTI1NlwifSwobmV3IFRleHRFbmNvZGVyKS5lbmNvZGUoZSkpO3JldHVybiBhd2FpdCB0fSkoYSkpLHM9KChlLHQsaSxvLG4sYSxyLHMpPT5PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7Y2xpZW50X2lkOmUuY2xpZW50SWR9LGUuYXV0aG9yaXphdGlvblBhcmFtcyksaSkse3Njb3BlOmoodCxpLnNjb3BlKSxyZXNwb25zZV90eXBlOlwiY29kZVwiLHJlc3BvbnNlX21vZGU6c3x8XCJxdWVyeVwiLHN0YXRlOm8sbm9uY2U6bixyZWRpcmVjdF91cmk6cnx8ZS5hdXRob3JpemF0aW9uUGFyYW1zLnJlZGlyZWN0X3VyaSxjb2RlX2NoYWxsZW5nZTphLGNvZGVfY2hhbGxlbmdlX21ldGhvZDpcIlMyNTZcIn0pKSh0aGlzLm9wdGlvbnMsdGhpcy5zY29wZSxlLG8sbixyLGUucmVkaXJlY3RfdXJpfHx0aGlzLm9wdGlvbnMuYXV0aG9yaXphdGlvblBhcmFtcy5yZWRpcmVjdF91cml8fGksbnVsbD09dD92b2lkIDA6dC5yZXNwb25zZV9tb2RlKSxjPXRoaXMuX2F1dGhvcml6ZVVybChzKTtyZXR1cm4ge25vbmNlOm4sY29kZV92ZXJpZmllcjphLHNjb3BlOnMuc2NvcGUsYXVkaWVuY2U6cy5hdWRpZW5jZXx8XCJkZWZhdWx0XCIscmVkaXJlY3RfdXJpOnMucmVkaXJlY3RfdXJpLHN0YXRlOm8sdXJsOmN9fWFzeW5jIGxvZ2luV2l0aFBvcHVwKGUsdCl7dmFyIGk7aWYoZT1lfHx7fSwhKHQ9dHx8e30pLnBvcHVwJiYodC5wb3B1cD0oZT0+e2NvbnN0IHQ9d2luZG93LnNjcmVlblgrKHdpbmRvdy5pbm5lcldpZHRoLTQwMCkvMixpPXdpbmRvdy5zY3JlZW5ZKyh3aW5kb3cuaW5uZXJIZWlnaHQtNjAwKS8yO3JldHVybiB3aW5kb3cub3BlbihlLFwiYXV0aDA6YXV0aG9yaXplOnBvcHVwXCIsYGxlZnQ9JHt0fSx0b3A9JHtpfSx3aWR0aD00MDAsaGVpZ2h0PTYwMCxyZXNpemFibGUsc2Nyb2xsYmFycz15ZXMsc3RhdHVzPTFgKX0pKFwiXCIpLCF0LnBvcHVwKSl0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gb3BlbiBhIHBvcHVwIGZvciBsb2dpbldpdGhQb3B1cCAtIHdpbmRvdy5vcGVuIHJldHVybmVkIGBudWxsYFwiKTtjb25zdCBvPWF3YWl0IHRoaXMuX3ByZXBhcmVBdXRob3JpemVVcmwoZS5hdXRob3JpemF0aW9uUGFyYW1zfHx7fSx7cmVzcG9uc2VfbW9kZTpcIndlYl9tZXNzYWdlXCJ9LHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pO3QucG9wdXAubG9jYXRpb24uaHJlZj1vLnVybDtjb25zdCBuPWF3YWl0KGU9Pm5ldyBQcm9taXNlKCgodCxpKT0+e2xldCBvO2NvbnN0IG49c2V0SW50ZXJ2YWwoKCgpPT57ZS5wb3B1cCYmZS5wb3B1cC5jbG9zZWQmJihjbGVhckludGVydmFsKG4pLGNsZWFyVGltZW91dChhKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixvLCExKSxpKG5ldyBwKGUucG9wdXApKSk7fSksMWUzKSxhPXNldFRpbWVvdXQoKCgpPT57Y2xlYXJJbnRlcnZhbChuKSxpKG5ldyBoKGUucG9wdXApKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixvLCExKTt9KSwxZTMqKGUudGltZW91dEluU2Vjb25kc3x8NjApKTtvPWZ1bmN0aW9uKHIpe2lmKHIuZGF0YSYmXCJhdXRob3JpemF0aW9uX3Jlc3BvbnNlXCI9PT1yLmRhdGEudHlwZSl7aWYoY2xlYXJUaW1lb3V0KGEpLGNsZWFySW50ZXJ2YWwobiksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsbywhMSksZS5wb3B1cC5jbG9zZSgpLHIuZGF0YS5yZXNwb25zZS5lcnJvcilyZXR1cm4gaShkLmZyb21QYXlsb2FkKHIuZGF0YS5yZXNwb25zZSkpO3Qoci5kYXRhLnJlc3BvbnNlKTt9fSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixvKTt9KSkpKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSx0KSx7dGltZW91dEluU2Vjb25kczp0LnRpbWVvdXRJblNlY29uZHN8fHRoaXMub3B0aW9ucy5hdXRob3JpemVUaW1lb3V0SW5TZWNvbmRzfHw2MH0pKTtpZihvLnN0YXRlIT09bi5zdGF0ZSl0aHJvdyBuZXcgZChcInN0YXRlX21pc21hdGNoXCIsXCJJbnZhbGlkIHN0YXRlXCIpO2NvbnN0IGE9KG51bGw9PT0oaT1lLmF1dGhvcml6YXRpb25QYXJhbXMpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLm9yZ2FuaXphdGlvbil8fHRoaXMub3B0aW9ucy5hdXRob3JpemF0aW9uUGFyYW1zLm9yZ2FuaXphdGlvbjthd2FpdCB0aGlzLl9yZXF1ZXN0VG9rZW4oe2F1ZGllbmNlOm8uYXVkaWVuY2Usc2NvcGU6by5zY29wZSxjb2RlX3ZlcmlmaWVyOm8uY29kZV92ZXJpZmllcixncmFudF90eXBlOlwiYXV0aG9yaXphdGlvbl9jb2RlXCIsY29kZTpuLmNvZGUscmVkaXJlY3RfdXJpOm8ucmVkaXJlY3RfdXJpfSx7bm9uY2VJbjpvLm5vbmNlLG9yZ2FuaXphdGlvbjphfSk7fWFzeW5jIGdldFVzZXIoKXt2YXIgZTtjb25zdCB0PWF3YWl0IHRoaXMuX2dldElkVG9rZW5Gcm9tQ2FjaGUoKTtyZXR1cm4gbnVsbD09PShlPW51bGw9PXQ/dm9pZCAwOnQuZGVjb2RlZFRva2VuKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS51c2VyfWFzeW5jIGdldElkVG9rZW5DbGFpbXMoKXt2YXIgZTtjb25zdCB0PWF3YWl0IHRoaXMuX2dldElkVG9rZW5Gcm9tQ2FjaGUoKTtyZXR1cm4gbnVsbD09PShlPW51bGw9PXQ/dm9pZCAwOnQuZGVjb2RlZFRva2VuKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5jbGFpbXN9YXN5bmMgbG9naW5XaXRoUmVkaXJlY3QodD17fSl7dmFyIGk7Y29uc3Qgbz1RKHQpLHtvcGVuVXJsOm4sZnJhZ21lbnQ6YSxhcHBTdGF0ZTpyfT1vLHM9ZShvLFtcIm9wZW5VcmxcIixcImZyYWdtZW50XCIsXCJhcHBTdGF0ZVwiXSksYz0obnVsbD09PShpPXMuYXV0aG9yaXphdGlvblBhcmFtcyl8fHZvaWQgMD09PWk/dm9pZCAwOmkub3JnYW5pemF0aW9uKXx8dGhpcy5vcHRpb25zLmF1dGhvcml6YXRpb25QYXJhbXMub3JnYW5pemF0aW9uLGQ9YXdhaXQgdGhpcy5fcHJlcGFyZUF1dGhvcml6ZVVybChzLmF1dGhvcml6YXRpb25QYXJhbXN8fHt9KSx7dXJsOnV9PWQsbD1lKGQsW1widXJsXCJdKTt0aGlzLnRyYW5zYWN0aW9uTWFuYWdlci5jcmVhdGUoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sbCkse2FwcFN0YXRlOnJ9KSxjJiZ7b3JnYW5pemF0aW9uOmN9KSk7Y29uc3QgaD1hP2Ake3V9IyR7YX1gOnU7bj9hd2FpdCBuKGgpOndpbmRvdy5sb2NhdGlvbi5hc3NpZ24oaCk7fWFzeW5jIGhhbmRsZVJlZGlyZWN0Q2FsbGJhY2soZT13aW5kb3cubG9jYXRpb24uaHJlZil7Y29uc3QgdD1lLnNwbGl0KFwiP1wiKS5zbGljZSgxKTtpZigwPT09dC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiVGhlcmUgYXJlIG5vIHF1ZXJ5IHBhcmFtcyBhdmFpbGFibGUgZm9yIHBhcnNpbmcuXCIpO2NvbnN0e3N0YXRlOmksY29kZTpvLGVycm9yOm4sZXJyb3JfZGVzY3JpcHRpb246YX09KGU9PntlLmluZGV4T2YoXCIjXCIpPi0xJiYoZT1lLnN1YnN0cmluZygwLGUuaW5kZXhPZihcIiNcIikpKTtjb25zdCB0PW5ldyBVUkxTZWFyY2hQYXJhbXMoZSk7cmV0dXJuIHtzdGF0ZTp0LmdldChcInN0YXRlXCIpLGNvZGU6dC5nZXQoXCJjb2RlXCIpfHx2b2lkIDAsZXJyb3I6dC5nZXQoXCJlcnJvclwiKXx8dm9pZCAwLGVycm9yX2Rlc2NyaXB0aW9uOnQuZ2V0KFwiZXJyb3JfZGVzY3JpcHRpb25cIil8fHZvaWQgMH19KSh0LmpvaW4oXCJcIikpLHI9dGhpcy50cmFuc2FjdGlvbk1hbmFnZXIuZ2V0KCk7aWYoIXIpdGhyb3cgbmV3IGQoXCJtaXNzaW5nX3RyYW5zYWN0aW9uXCIsXCJJbnZhbGlkIHN0YXRlXCIpO2lmKHRoaXMudHJhbnNhY3Rpb25NYW5hZ2VyLnJlbW92ZSgpLG4pdGhyb3cgbmV3IHUobixhfHxuLGksci5hcHBTdGF0ZSk7aWYoIXIuY29kZV92ZXJpZmllcnx8ci5zdGF0ZSYmci5zdGF0ZSE9PWkpdGhyb3cgbmV3IGQoXCJzdGF0ZV9taXNtYXRjaFwiLFwiSW52YWxpZCBzdGF0ZVwiKTtjb25zdCBzPXIub3JnYW5pemF0aW9uLGM9ci5ub25jZSxsPXIucmVkaXJlY3RfdXJpO3JldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0VG9rZW4oT2JqZWN0LmFzc2lnbih7YXVkaWVuY2U6ci5hdWRpZW5jZSxzY29wZTpyLnNjb3BlLGNvZGVfdmVyaWZpZXI6ci5jb2RlX3ZlcmlmaWVyLGdyYW50X3R5cGU6XCJhdXRob3JpemF0aW9uX2NvZGVcIixjb2RlOm99LGw/e3JlZGlyZWN0X3VyaTpsfTp7fSkse25vbmNlSW46Yyxvcmdhbml6YXRpb246c30pLHthcHBTdGF0ZTpyLmFwcFN0YXRlfX1hc3luYyBjaGVja1Nlc3Npb24oZSl7aWYoIXRoaXMuY29va2llU3RvcmFnZS5nZXQodGhpcy5pc0F1dGhlbnRpY2F0ZWRDb29raWVOYW1lKSl7aWYoIXRoaXMuY29va2llU3RvcmFnZS5nZXQoXCJhdXRoMC5pcy5hdXRoZW50aWNhdGVkXCIpKXJldHVybjt0aGlzLmNvb2tpZVN0b3JhZ2Uuc2F2ZSh0aGlzLmlzQXV0aGVudGljYXRlZENvb2tpZU5hbWUsITAse2RheXNVbnRpbEV4cGlyZTp0aGlzLnNlc3Npb25DaGVja0V4cGlyeURheXMsY29va2llRG9tYWluOnRoaXMub3B0aW9ucy5jb29raWVEb21haW59KSx0aGlzLmNvb2tpZVN0b3JhZ2UucmVtb3ZlKFwiYXV0aDAuaXMuYXV0aGVudGljYXRlZFwiKTt9dHJ5e2F3YWl0IHRoaXMuZ2V0VG9rZW5TaWxlbnRseShlKTt9Y2F0Y2goZSl7fX1hc3luYyBnZXRUb2tlblNpbGVudGx5KGU9e30pe3ZhciB0O2NvbnN0IGk9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHtjYWNoZU1vZGU6XCJvblwifSxlKSx7YXV0aG9yaXphdGlvblBhcmFtczpPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSx0aGlzLm9wdGlvbnMuYXV0aG9yaXphdGlvblBhcmFtcyksZS5hdXRob3JpemF0aW9uUGFyYW1zKSx7c2NvcGU6aih0aGlzLnNjb3BlLG51bGw9PT0odD1lLmF1dGhvcml6YXRpb25QYXJhbXMpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LnNjb3BlKX0pfSksbz1hd2FpdCgoZSx0KT0+e2xldCBpPUFbdF07cmV0dXJuIGl8fChpPWUoKS5maW5hbGx5KCgoKT0+e2RlbGV0ZSBBW3RdLGk9bnVsbDt9KSksQVt0XT1pKSxpfSkoKCgpPT50aGlzLl9nZXRUb2tlblNpbGVudGx5KGkpKSxgJHt0aGlzLm9wdGlvbnMuY2xpZW50SWR9Ojoke2kuYXV0aG9yaXphdGlvblBhcmFtcy5hdWRpZW5jZX06OiR7aS5hdXRob3JpemF0aW9uUGFyYW1zLnNjb3BlfWApO3JldHVybiBlLmRldGFpbGVkUmVzcG9uc2U/bzpudWxsPT1vP3ZvaWQgMDpvLmFjY2Vzc190b2tlbn1hc3luYyBfZ2V0VG9rZW5TaWxlbnRseSh0KXtjb25zdHtjYWNoZU1vZGU6aX09dCxvPWUodCxbXCJjYWNoZU1vZGVcIl0pO2lmKFwib2ZmXCIhPT1pKXtjb25zdCBlPWF3YWl0IHRoaXMuX2dldEVudHJ5RnJvbUNhY2hlKHtzY29wZTpvLmF1dGhvcml6YXRpb25QYXJhbXMuc2NvcGUsYXVkaWVuY2U6by5hdXRob3JpemF0aW9uUGFyYW1zLmF1ZGllbmNlfHxcImRlZmF1bHRcIixjbGllbnRJZDp0aGlzLm9wdGlvbnMuY2xpZW50SWR9KTtpZihlKXJldHVybiBlfWlmKFwiY2FjaGUtb25seVwiIT09aSl7aWYoIWF3YWl0KGFzeW5jKGUsdD0zKT0+e2ZvcihsZXQgaT0wO2k8dDtpKyspaWYoYXdhaXQgZSgpKXJldHVybiAhMDtyZXR1cm4gITF9KSgoKCk9PmVlLmFjcXVpcmVMb2NrKFwiYXV0aDAubG9jay5nZXRUb2tlblNpbGVudGx5XCIsNWUzKSksMTApKXRocm93IG5ldyBsO3RyeXtpZih3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsdGhpcy5fcmVsZWFzZUxvY2tPblBhZ2VIaWRlKSxcIm9mZlwiIT09aSl7Y29uc3QgZT1hd2FpdCB0aGlzLl9nZXRFbnRyeUZyb21DYWNoZSh7c2NvcGU6by5hdXRob3JpemF0aW9uUGFyYW1zLnNjb3BlLGF1ZGllbmNlOm8uYXV0aG9yaXphdGlvblBhcmFtcy5hdWRpZW5jZXx8XCJkZWZhdWx0XCIsY2xpZW50SWQ6dGhpcy5vcHRpb25zLmNsaWVudElkfSk7aWYoZSlyZXR1cm4gZX1jb25zdCBlPXRoaXMub3B0aW9ucy51c2VSZWZyZXNoVG9rZW5zP2F3YWl0IHRoaXMuX2dldFRva2VuVXNpbmdSZWZyZXNoVG9rZW4obyk6YXdhaXQgdGhpcy5fZ2V0VG9rZW5Gcm9tSUZyYW1lKG8pLHtpZF90b2tlbjp0LGFjY2Vzc190b2tlbjpuLG9hdXRoVG9rZW5TY29wZTphLGV4cGlyZXNfaW46cn09ZTtyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHtpZF90b2tlbjp0LGFjY2Vzc190b2tlbjpufSxhP3tzY29wZTphfTpudWxsKSx7ZXhwaXJlc19pbjpyfSl9ZmluYWxseXthd2FpdCBlZS5yZWxlYXNlTG9jayhcImF1dGgwLmxvY2suZ2V0VG9rZW5TaWxlbnRseVwiKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsdGhpcy5fcmVsZWFzZUxvY2tPblBhZ2VIaWRlKTt9fX1hc3luYyBnZXRUb2tlbldpdGhQb3B1cChlPXt9LHQ9e30pe3ZhciBpO2NvbnN0IG89T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGUpLHthdXRob3JpemF0aW9uUGFyYW1zOk9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LHRoaXMub3B0aW9ucy5hdXRob3JpemF0aW9uUGFyYW1zKSxlLmF1dGhvcml6YXRpb25QYXJhbXMpLHtzY29wZTpqKHRoaXMuc2NvcGUsbnVsbD09PShpPWUuYXV0aG9yaXphdGlvblBhcmFtcyl8fHZvaWQgMD09PWk/dm9pZCAwOmkuc2NvcGUpfSl9KTt0PU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxyKSx0KSxhd2FpdCB0aGlzLmxvZ2luV2l0aFBvcHVwKG8sdCk7cmV0dXJuIChhd2FpdCB0aGlzLmNhY2hlTWFuYWdlci5nZXQobmV3IEMoe3Njb3BlOm8uYXV0aG9yaXphdGlvblBhcmFtcy5zY29wZSxhdWRpZW5jZTpvLmF1dGhvcml6YXRpb25QYXJhbXMuYXVkaWVuY2V8fFwiZGVmYXVsdFwiLGNsaWVudElkOnRoaXMub3B0aW9ucy5jbGllbnRJZH0pKSkuYWNjZXNzX3Rva2VufWFzeW5jIGlzQXV0aGVudGljYXRlZCgpe3JldHVybiAhIWF3YWl0IHRoaXMuZ2V0VXNlcigpfV9idWlsZExvZ291dFVybCh0KXtudWxsIT09dC5jbGllbnRJZD90LmNsaWVudElkPXQuY2xpZW50SWR8fHRoaXMub3B0aW9ucy5jbGllbnRJZDpkZWxldGUgdC5jbGllbnRJZDtjb25zdCBpPXQubG9nb3V0UGFyYW1zfHx7fSx7ZmVkZXJhdGVkOm99PWksbj1lKGksW1wiZmVkZXJhdGVkXCJdKSxhPW8/XCImZmVkZXJhdGVkXCI6XCJcIjtyZXR1cm4gdGhpcy5fdXJsKGAvdjIvbG9nb3V0PyR7dihPYmplY3QuYXNzaWduKHtjbGllbnRJZDp0LmNsaWVudElkfSxuKSl9YCkrYX1hc3luYyBsb2dvdXQodD17fSl7Y29uc3QgaT1RKHQpLHtvcGVuVXJsOm99PWksbj1lKGksW1wib3BlblVybFwiXSk7bnVsbD09PXQuY2xpZW50SWQ/YXdhaXQgdGhpcy5jYWNoZU1hbmFnZXIuY2xlYXIoKTphd2FpdCB0aGlzLmNhY2hlTWFuYWdlci5jbGVhcih0LmNsaWVudElkfHx0aGlzLm9wdGlvbnMuY2xpZW50SWQpLHRoaXMuY29va2llU3RvcmFnZS5yZW1vdmUodGhpcy5vcmdIaW50Q29va2llTmFtZSx7Y29va2llRG9tYWluOnRoaXMub3B0aW9ucy5jb29raWVEb21haW59KSx0aGlzLmNvb2tpZVN0b3JhZ2UucmVtb3ZlKHRoaXMuaXNBdXRoZW50aWNhdGVkQ29va2llTmFtZSx7Y29va2llRG9tYWluOnRoaXMub3B0aW9ucy5jb29raWVEb21haW59KSx0aGlzLnVzZXJDYWNoZS5yZW1vdmUoXCJAQHVzZXJAQFwiKTtjb25zdCBhPXRoaXMuX2J1aWxkTG9nb3V0VXJsKG4pO28/YXdhaXQgbyhhKTohMSE9PW8mJndpbmRvdy5sb2NhdGlvbi5hc3NpZ24oYSk7fWFzeW5jIF9nZXRUb2tlbkZyb21JRnJhbWUoZSl7Y29uc3QgdD1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sZS5hdXRob3JpemF0aW9uUGFyYW1zKSx7cHJvbXB0Olwibm9uZVwifSksaT10aGlzLmNvb2tpZVN0b3JhZ2UuZ2V0KHRoaXMub3JnSGludENvb2tpZU5hbWUpO2kmJiF0Lm9yZ2FuaXphdGlvbiYmKHQub3JnYW5pemF0aW9uPWkpO2NvbnN0e3VybDpvLHN0YXRlOm4sbm9uY2U6YSxjb2RlX3ZlcmlmaWVyOnIscmVkaXJlY3RfdXJpOnMsc2NvcGU6YyxhdWRpZW5jZTp1fT1hd2FpdCB0aGlzLl9wcmVwYXJlQXV0aG9yaXplVXJsKHQse3Jlc3BvbnNlX21vZGU6XCJ3ZWJfbWVzc2FnZVwifSx3aW5kb3cubG9jYXRpb24ub3JpZ2luKTt0cnl7aWYod2luZG93LmNyb3NzT3JpZ2luSXNvbGF0ZWQpdGhyb3cgbmV3IGQoXCJsb2dpbl9yZXF1aXJlZFwiLFwiVGhlIGFwcGxpY2F0aW9uIGlzIHJ1bm5pbmcgaW4gYSBDcm9zcy1PcmlnaW4gSXNvbGF0ZWQgY29udGV4dCwgc2lsZW50bHkgcmV0cmlldmluZyBhIHRva2VuIHdpdGhvdXQgcmVmcmVzaCB0b2tlbiBpcyBub3QgcG9zc2libGUuXCIpO2NvbnN0IGk9ZS50aW1lb3V0SW5TZWNvbmRzfHx0aGlzLm9wdGlvbnMuYXV0aG9yaXplVGltZW91dEluU2Vjb25kcyxoPWF3YWl0KChlLHQsaT02MCk9Pm5ldyBQcm9taXNlKCgobyxuKT0+e2NvbnN0IGE9d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7YS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLFwiMFwiKSxhLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLFwiMFwiKSxhLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7Y29uc3Qgcj0oKT0+e3dpbmRvdy5kb2N1bWVudC5ib2R5LmNvbnRhaW5zKGEpJiYod2luZG93LmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIscywhMSkpO307bGV0IHM7Y29uc3QgYz1zZXRUaW1lb3V0KCgoKT0+e24obmV3IGwpLHIoKTt9KSwxZTMqaSk7cz1mdW5jdGlvbihlKXtpZihlLm9yaWdpbiE9dClyZXR1cm47aWYoIWUuZGF0YXx8XCJhdXRob3JpemF0aW9uX3Jlc3BvbnNlXCIhPT1lLmRhdGEudHlwZSlyZXR1cm47Y29uc3QgaT1lLnNvdXJjZTtpJiZpLmNsb3NlKCksZS5kYXRhLnJlc3BvbnNlLmVycm9yP24oZC5mcm9tUGF5bG9hZChlLmRhdGEucmVzcG9uc2UpKTpvKGUuZGF0YS5yZXNwb25zZSksY2xlYXJUaW1lb3V0KGMpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLHMsITEpLHNldFRpbWVvdXQociwyZTMpO30sd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIscywhMSksd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSksYS5zZXRBdHRyaWJ1dGUoXCJzcmNcIixlKTt9KSkpKG8sdGhpcy5kb21haW5VcmwsaSk7aWYobiE9PWguc3RhdGUpdGhyb3cgbmV3IGQoXCJzdGF0ZV9taXNtYXRjaFwiLFwiSW52YWxpZCBzdGF0ZVwiKTtjb25zdCBwPWF3YWl0IHRoaXMuX3JlcXVlc3RUb2tlbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sZS5hdXRob3JpemF0aW9uUGFyYW1zKSx7Y29kZV92ZXJpZmllcjpyLGNvZGU6aC5jb2RlLGdyYW50X3R5cGU6XCJhdXRob3JpemF0aW9uX2NvZGVcIixyZWRpcmVjdF91cmk6cyx0aW1lb3V0OmUuYXV0aG9yaXphdGlvblBhcmFtcy50aW1lb3V0fHx0aGlzLmh0dHBUaW1lb3V0TXN9KSx7bm9uY2VJbjphLG9yZ2FuaXphdGlvbjp0Lm9yZ2FuaXphdGlvbn0pO3JldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30scCkse3Njb3BlOmMsb2F1dGhUb2tlblNjb3BlOnAuc2NvcGUsYXVkaWVuY2U6dX0pfWNhdGNoKGUpe3Rocm93IFwibG9naW5fcmVxdWlyZWRcIj09PWUuZXJyb3ImJnRoaXMubG9nb3V0KHtvcGVuVXJsOiExfSksZX19YXN5bmMgX2dldFRva2VuVXNpbmdSZWZyZXNoVG9rZW4oZSl7Y29uc3QgdD1hd2FpdCB0aGlzLmNhY2hlTWFuYWdlci5nZXQobmV3IEMoe3Njb3BlOmUuYXV0aG9yaXphdGlvblBhcmFtcy5zY29wZSxhdWRpZW5jZTplLmF1dGhvcml6YXRpb25QYXJhbXMuYXVkaWVuY2V8fFwiZGVmYXVsdFwiLGNsaWVudElkOnRoaXMub3B0aW9ucy5jbGllbnRJZH0pKTtpZighKHQmJnQucmVmcmVzaF90b2tlbnx8dGhpcy53b3JrZXIpKXtpZih0aGlzLm9wdGlvbnMudXNlUmVmcmVzaFRva2Vuc0ZhbGxiYWNrKXJldHVybiBhd2FpdCB0aGlzLl9nZXRUb2tlbkZyb21JRnJhbWUoZSk7dGhyb3cgbmV3IGYoZS5hdXRob3JpemF0aW9uUGFyYW1zLmF1ZGllbmNlfHxcImRlZmF1bHRcIixlLmF1dGhvcml6YXRpb25QYXJhbXMuc2NvcGUpfWNvbnN0IGk9ZS5hdXRob3JpemF0aW9uUGFyYW1zLnJlZGlyZWN0X3VyaXx8dGhpcy5vcHRpb25zLmF1dGhvcml6YXRpb25QYXJhbXMucmVkaXJlY3RfdXJpfHx3aW5kb3cubG9jYXRpb24ub3JpZ2luLG89XCJudW1iZXJcIj09dHlwZW9mIGUudGltZW91dEluU2Vjb25kcz8xZTMqZS50aW1lb3V0SW5TZWNvbmRzOm51bGw7dHJ5e2NvbnN0IG49YXdhaXQgdGhpcy5fcmVxdWVzdFRva2VuKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGUuYXV0aG9yaXphdGlvblBhcmFtcykse2dyYW50X3R5cGU6XCJyZWZyZXNoX3Rva2VuXCIscmVmcmVzaF90b2tlbjp0JiZ0LnJlZnJlc2hfdG9rZW4scmVkaXJlY3RfdXJpOml9KSxvJiZ7dGltZW91dDpvfSkpO3JldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sbikse3Njb3BlOmUuYXV0aG9yaXphdGlvblBhcmFtcy5zY29wZSxvYXV0aFRva2VuU2NvcGU6bi5zY29wZSxhdWRpZW5jZTplLmF1dGhvcml6YXRpb25QYXJhbXMuYXVkaWVuY2V8fFwiZGVmYXVsdFwifSl9Y2F0Y2godCl7aWYoKHQubWVzc2FnZS5pbmRleE9mKFwiTWlzc2luZyBSZWZyZXNoIFRva2VuXCIpPi0xfHx0Lm1lc3NhZ2UmJnQubWVzc2FnZS5pbmRleE9mKFwiaW52YWxpZCByZWZyZXNoIHRva2VuXCIpPi0xKSYmdGhpcy5vcHRpb25zLnVzZVJlZnJlc2hUb2tlbnNGYWxsYmFjaylyZXR1cm4gYXdhaXQgdGhpcy5fZ2V0VG9rZW5Gcm9tSUZyYW1lKGUpO3Rocm93IHR9fWFzeW5jIF9zYXZlRW50cnlJbkNhY2hlKHQpe2NvbnN0e2lkX3Rva2VuOmksZGVjb2RlZFRva2VuOm99PXQsbj1lKHQsW1wiaWRfdG9rZW5cIixcImRlY29kZWRUb2tlblwiXSk7dGhpcy51c2VyQ2FjaGUuc2V0KFwiQEB1c2VyQEBcIix7aWRfdG9rZW46aSxkZWNvZGVkVG9rZW46b30pLGF3YWl0IHRoaXMuY2FjaGVNYW5hZ2VyLnNldElkVG9rZW4odGhpcy5vcHRpb25zLmNsaWVudElkLHQuaWRfdG9rZW4sdC5kZWNvZGVkVG9rZW4pLGF3YWl0IHRoaXMuY2FjaGVNYW5hZ2VyLnNldChuKTt9YXN5bmMgX2dldElkVG9rZW5Gcm9tQ2FjaGUoKXtjb25zdCBlPXRoaXMub3B0aW9ucy5hdXRob3JpemF0aW9uUGFyYW1zLmF1ZGllbmNlfHxcImRlZmF1bHRcIix0PWF3YWl0IHRoaXMuY2FjaGVNYW5hZ2VyLmdldElkVG9rZW4obmV3IEMoe2NsaWVudElkOnRoaXMub3B0aW9ucy5jbGllbnRJZCxhdWRpZW5jZTplLHNjb3BlOnRoaXMuc2NvcGV9KSksaT10aGlzLnVzZXJDYWNoZS5nZXQoXCJAQHVzZXJAQFwiKTtyZXR1cm4gdCYmdC5pZF90b2tlbj09PShudWxsPT1pP3ZvaWQgMDppLmlkX3Rva2VuKT9pOih0aGlzLnVzZXJDYWNoZS5zZXQoXCJAQHVzZXJAQFwiLHQpLHQpfWFzeW5jIF9nZXRFbnRyeUZyb21DYWNoZSh7c2NvcGU6ZSxhdWRpZW5jZTp0LGNsaWVudElkOml9KXtjb25zdCBvPWF3YWl0IHRoaXMuY2FjaGVNYW5hZ2VyLmdldChuZXcgQyh7c2NvcGU6ZSxhdWRpZW5jZTp0LGNsaWVudElkOml9KSw2MCk7aWYobyYmby5hY2Nlc3NfdG9rZW4pe2NvbnN0e2FjY2Vzc190b2tlbjplLG9hdXRoVG9rZW5TY29wZTp0LGV4cGlyZXNfaW46aX09byxuPWF3YWl0IHRoaXMuX2dldElkVG9rZW5Gcm9tQ2FjaGUoKTtyZXR1cm4gbiYmT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHtpZF90b2tlbjpuLmlkX3Rva2VuLGFjY2Vzc190b2tlbjplfSx0P3tzY29wZTp0fTpudWxsKSx7ZXhwaXJlc19pbjppfSl9fWFzeW5jIF9yZXF1ZXN0VG9rZW4oZSx0KXtjb25zdHtub25jZUluOmksb3JnYW5pemF0aW9uOm99PXR8fHt9LG49YXdhaXQgVChPYmplY3QuYXNzaWduKHtiYXNlVXJsOnRoaXMuZG9tYWluVXJsLGNsaWVudF9pZDp0aGlzLm9wdGlvbnMuY2xpZW50SWQsYXV0aDBDbGllbnQ6dGhpcy5vcHRpb25zLmF1dGgwQ2xpZW50LHVzZUZvcm1EYXRhOnRoaXMub3B0aW9ucy51c2VGb3JtRGF0YSx0aW1lb3V0OnRoaXMuaHR0cFRpbWVvdXRNc30sZSksdGhpcy53b3JrZXIpLGE9YXdhaXQgdGhpcy5fdmVyaWZ5SWRUb2tlbihuLmlkX3Rva2VuLGksbyk7cmV0dXJuIGF3YWl0IHRoaXMuX3NhdmVFbnRyeUluQ2FjaGUoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxuKSx7ZGVjb2RlZFRva2VuOmEsc2NvcGU6ZS5zY29wZSxhdWRpZW5jZTplLmF1ZGllbmNlfHxcImRlZmF1bHRcIn0pLG4uc2NvcGU/e29hdXRoVG9rZW5TY29wZTpuLnNjb3BlfTpudWxsKSx7Y2xpZW50X2lkOnRoaXMub3B0aW9ucy5jbGllbnRJZH0pKSx0aGlzLmNvb2tpZVN0b3JhZ2Uuc2F2ZSh0aGlzLmlzQXV0aGVudGljYXRlZENvb2tpZU5hbWUsITAse2RheXNVbnRpbEV4cGlyZTp0aGlzLnNlc3Npb25DaGVja0V4cGlyeURheXMsY29va2llRG9tYWluOnRoaXMub3B0aW9ucy5jb29raWVEb21haW59KSx0aGlzLl9wcm9jZXNzT3JnSGludChvfHxhLmNsYWltcy5vcmdfaWQpLE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxuKSx7ZGVjb2RlZFRva2VuOmF9KX19Y2xhc3MgaWV7fVxuXG4vKipcclxuICogVGhlIGluaXRpYWwgYXV0aCBzdGF0ZS5cclxuICovXHJcbnZhciBpbml0aWFsQXV0aFN0YXRlID0ge1xyXG4gICAgaXNBdXRoZW50aWNhdGVkOiBmYWxzZSxcclxuICAgIGlzTG9hZGluZzogdHJ1ZSxcclxufTtcblxuLyoqXHJcbiAqIEBpZ25vcmVcclxuICovXHJcbnZhciBzdHViID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgZm9yZ290IHRvIHdyYXAgeW91ciBjb21wb25lbnQgaW4gPEF1dGgwUHJvdmlkZXI+LicpO1xyXG59O1xyXG4vKipcclxuICogQGlnbm9yZVxyXG4gKi9cclxudmFyIGluaXRpYWxDb250ZXh0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGluaXRpYWxBdXRoU3RhdGUpLCB7IGJ1aWxkQXV0aG9yaXplVXJsOiBzdHViLCBidWlsZExvZ291dFVybDogc3R1YiwgZ2V0QWNjZXNzVG9rZW5TaWxlbnRseTogc3R1YiwgZ2V0QWNjZXNzVG9rZW5XaXRoUG9wdXA6IHN0dWIsIGdldElkVG9rZW5DbGFpbXM6IHN0dWIsIGxvZ2luV2l0aFJlZGlyZWN0OiBzdHViLCBsb2dpbldpdGhQb3B1cDogc3R1YiwgbG9nb3V0OiBzdHViLCBoYW5kbGVSZWRpcmVjdENhbGxiYWNrOiBzdHViIH0pO1xyXG4vKipcclxuICogVGhlIEF1dGgwIENvbnRleHRcclxuICovXHJcbnZhciBBdXRoMENvbnRleHQgPSBjcmVhdGVDb250ZXh0KGluaXRpYWxDb250ZXh0KTtcblxuLyoqXHJcbiAqIEFuIE9BdXRoMiBlcnJvciB3aWxsIGNvbWUgZnJvbSB0aGUgYXV0aG9yaXphdGlvbiBzZXJ2ZXIgYW5kIHdpbGwgaGF2ZSBhdCBsZWFzdCBhbiBgZXJyb3JgIHByb3BlcnR5IHdoaWNoIHdpbGxcclxuICogYmUgdGhlIGVycm9yIGNvZGUuIEFuZCBwb3NzaWJseSBhbiBgZXJyb3JfZGVzY3JpcHRpb25gIHByb3BlcnR5XHJcbiAqXHJcbiAqIFNlZTogaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjcmZjLnNlY3Rpb24uMy4xLjIuNlxyXG4gKi9cclxudmFyIE9BdXRoRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoT0F1dGhFcnJvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE9BdXRoRXJyb3IoZXJyb3IsIGVycm9yX2Rlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3JfZGVzY3JpcHRpb24gfHwgZXJyb3IpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICBfdGhpcy5lcnJvcl9kZXNjcmlwdGlvbiA9IGVycm9yX2Rlc2NyaXB0aW9uO1xyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC13aWtpL2Jsb2IvbWFzdGVyL0JyZWFraW5nLUNoYW5nZXMubWQjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKF90aGlzLCBPQXV0aEVycm9yLnByb3RvdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9BdXRoRXJyb3I7XHJcbn0oRXJyb3IpKTtcblxudmFyIENPREVfUkUgPSAvWz8mXWNvZGU9W14mXSsvO1xyXG52YXIgU1RBVEVfUkUgPSAvWz8mXXN0YXRlPVteJl0rLztcclxudmFyIEVSUk9SX1JFID0gL1s/Jl1lcnJvcj1bXiZdKy87XHJcbnZhciBoYXNBdXRoUGFyYW1zID0gZnVuY3Rpb24gKHNlYXJjaFBhcmFtcykge1xyXG4gICAgaWYgKHNlYXJjaFBhcmFtcyA9PT0gdm9pZCAwKSB7IHNlYXJjaFBhcmFtcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7IH1cclxuICAgIHJldHVybiAoQ09ERV9SRS50ZXN0KHNlYXJjaFBhcmFtcykgfHwgRVJST1JfUkUudGVzdChzZWFyY2hQYXJhbXMpKSAmJlxyXG4gICAgICAgIFNUQVRFX1JFLnRlc3Qoc2VhcmNoUGFyYW1zKTtcclxufTtcclxudmFyIG5vcm1hbGl6ZUVycm9yRm4gPSBmdW5jdGlvbiAoZmFsbGJhY2tNZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0cnkgdG8gY2hlY2sgZXJyb3JzIG9mIHRoZSBmb2xsb3dpbmcgZm9ybToge2Vycm9yOiBzdHJpbmc7IGVycm9yX2Rlc2NyaXB0aW9uPzogc3RyaW5nfVxyXG4gICAgICAgIGlmIChlcnJvciAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgICdlcnJvcicgaW4gZXJyb3IgJiZcclxuICAgICAgICAgICAgdHlwZW9mIGVycm9yLmVycm9yID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAoJ2Vycm9yX2Rlc2NyaXB0aW9uJyBpbiBlcnJvciAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIGVycm9yLmVycm9yX2Rlc2NyaXB0aW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPQXV0aEVycm9yKGVycm9yLmVycm9yLCBlcnJvci5lcnJvcl9kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBPQXV0aEVycm9yKGVycm9yLmVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihmYWxsYmFja01lc3NhZ2UpO1xyXG4gICAgfTtcclxufTtcclxudmFyIGxvZ2luRXJyb3IgPSBub3JtYWxpemVFcnJvckZuKCdMb2dpbiBmYWlsZWQnKTtcclxudmFyIHRva2VuRXJyb3IgPSBub3JtYWxpemVFcnJvckZuKCdHZXQgYWNjZXNzIHRva2VuIGZhaWxlZCcpO1xyXG4vKipcclxuICogQGlnbm9yZVxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gbWFwIHRoZSB2MSBgcmVkaXJlY3RVcmlgIG9wdGlvbiB0byB0aGUgdjIgYGF1dGhvcml6YXRpb25QYXJhbXMucmVkaXJlY3RfdXJpYFxyXG4gKiBhbmQgbG9nIGEgd2FybmluZy5cclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbnZhciBkZXByZWNhdGVSZWRpcmVjdFVyaSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlZGlyZWN0VXJpKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdVc2luZyBgcmVkaXJlY3RVcmlgIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgYGF1dGhvcml6YXRpb25QYXJhbXMucmVkaXJlY3RfdXJpYCBpbnN0ZWFkIGFzIGByZWRpcmVjdFVyaWAgd2lsbCBiZSBubyBsb25nZXIgc3VwcG9ydGVkIGluIGEgZnV0dXJlIHZlcnNpb24nKTtcclxuICAgICAgICBvcHRpb25zLmF1dGhvcml6YXRpb25QYXJhbXMgPSBvcHRpb25zLmF1dGhvcml6YXRpb25QYXJhbXMgfHwge307XHJcbiAgICAgICAgb3B0aW9ucy5hdXRob3JpemF0aW9uUGFyYW1zLnJlZGlyZWN0X3VyaSA9IG9wdGlvbnMucmVkaXJlY3RVcmk7XHJcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMucmVkaXJlY3RVcmk7XHJcbiAgICB9XHJcbiAgICBpZiAoKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmF1dGhvcml6YXRpb25QYXJhbXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZWRpcmVjdFVyaSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignVXNpbmcgYGF1dGhvcml6YXRpb25QYXJhbXMucmVkaXJlY3RVcmlgIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgYGF1dGhvcml6YXRpb25QYXJhbXMucmVkaXJlY3RfdXJpYCBpbnN0ZWFkIGFzIGBhdXRob3JpemF0aW9uUGFyYW1zLnJlZGlyZWN0VXJpYCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbicpO1xyXG4gICAgICAgIG9wdGlvbnMuYXV0aG9yaXphdGlvblBhcmFtcy5yZWRpcmVjdF91cmkgPVxyXG4gICAgICAgICAgICBvcHRpb25zLmF1dGhvcml6YXRpb25QYXJhbXMucmVkaXJlY3RVcmk7XHJcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXV0aG9yaXphdGlvblBhcmFtcy5yZWRpcmVjdFVyaTtcclxuICAgIH1cclxufTtcblxuLyoqXHJcbiAqIEhhbmRsZXMgaG93IHRoYXQgc3RhdGUgY2hhbmdlcyBpbiB0aGUgYHVzZUF1dGgwYCBob29rLlxyXG4gKi9cclxudmFyIHJlZHVjZXIgPSBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ0xPR0lOX1BPUFVQX1NUQVJURUQnOlxyXG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBpc0xvYWRpbmc6IHRydWUgfSk7XHJcbiAgICAgICAgY2FzZSAnTE9HSU5fUE9QVVBfQ09NUExFVEUnOlxyXG4gICAgICAgIGNhc2UgJ0lOSVRJQUxJU0VEJzpcclxuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgaXNBdXRoZW50aWNhdGVkOiAhIWFjdGlvbi51c2VyLCB1c2VyOiBhY3Rpb24udXNlciwgaXNMb2FkaW5nOiBmYWxzZSwgZXJyb3I6IHVuZGVmaW5lZCB9KTtcclxuICAgICAgICBjYXNlICdIQU5ETEVfUkVESVJFQ1RfQ09NUExFVEUnOlxyXG4gICAgICAgIGNhc2UgJ0dFVF9BQ0NFU1NfVE9LRU5fQ09NUExFVEUnOlxyXG4gICAgICAgICAgICBpZiAoc3RhdGUudXNlciA9PT0gYWN0aW9uLnVzZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBpc0F1dGhlbnRpY2F0ZWQ6ICEhYWN0aW9uLnVzZXIsIHVzZXI6IGFjdGlvbi51c2VyIH0pO1xyXG4gICAgICAgIGNhc2UgJ0xPR09VVCc6XHJcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IGlzQXV0aGVudGljYXRlZDogZmFsc2UsIHVzZXI6IHVuZGVmaW5lZCB9KTtcclxuICAgICAgICBjYXNlICdFUlJPUic6XHJcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IGlzTG9hZGluZzogZmFsc2UsIGVycm9yOiBhY3Rpb24uZXJyb3IgfSk7XHJcbiAgICB9XHJcbn07XG5cbi8qKlxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG52YXIgdG9BdXRoMENsaWVudE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0cykge1xyXG4gICAgZGVwcmVjYXRlUmVkaXJlY3RVcmkob3B0cyk7XHJcbiAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdHMpLCB7IGF1dGgwQ2xpZW50OiB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdhdXRoMC1yZWFjdCcsXHJcbiAgICAgICAgICAgIHZlcnNpb246ICcyLjIuNCcsXHJcbiAgICAgICAgfSB9KTtcclxufTtcclxuLyoqXHJcbiAqIEBpZ25vcmVcclxuICovXHJcbnZhciBkZWZhdWx0T25SZWRpcmVjdENhbGxiYWNrID0gZnVuY3Rpb24gKGFwcFN0YXRlKSB7XHJcbiAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIGRvY3VtZW50LnRpdGxlLCAoYXBwU3RhdGUgPT09IG51bGwgfHwgYXBwU3RhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFwcFN0YXRlLnJldHVyblRvKSB8fCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xyXG59O1xyXG4vKipcclxuICogYGBganN4XHJcbiAqIDxBdXRoMFByb3ZpZGVyXHJcbiAqICAgZG9tYWluPXtkb21haW59XHJcbiAqICAgY2xpZW50SWQ9e2NsaWVudElkfVxyXG4gKiAgIGF1dGhvcml6YXRpb25QYXJhbXM9e3sgcmVkaXJlY3RfdXJpOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luIH19fT5cclxuICogICA8TXlBcHAgLz5cclxuICogPC9BdXRoMFByb3ZpZGVyPlxyXG4gKiBgYGBcclxuICpcclxuICogUHJvdmlkZXMgdGhlIEF1dGgwQ29udGV4dCB0byBpdHMgY2hpbGQgY29tcG9uZW50cy5cclxuICovXHJcbnZhciBBdXRoMFByb3ZpZGVyID0gZnVuY3Rpb24gKG9wdHMpIHtcclxuICAgIHZhciBjaGlsZHJlbiA9IG9wdHMuY2hpbGRyZW4sIHNraXBSZWRpcmVjdENhbGxiYWNrID0gb3B0cy5za2lwUmVkaXJlY3RDYWxsYmFjaywgX2EgPSBvcHRzLm9uUmVkaXJlY3RDYWxsYmFjaywgb25SZWRpcmVjdENhbGxiYWNrID0gX2EgPT09IHZvaWQgMCA/IGRlZmF1bHRPblJlZGlyZWN0Q2FsbGJhY2sgOiBfYSwgX2IgPSBvcHRzLmNvbnRleHQsIGNvbnRleHQgPSBfYiA9PT0gdm9pZCAwID8gQXV0aDBDb250ZXh0IDogX2IsIGNsaWVudE9wdHMgPSBfX3Jlc3Qob3B0cywgW1wiY2hpbGRyZW5cIiwgXCJza2lwUmVkaXJlY3RDYWxsYmFja1wiLCBcIm9uUmVkaXJlY3RDYWxsYmFja1wiLCBcImNvbnRleHRcIl0pO1xyXG4gICAgdmFyIGNsaWVudCA9IHVzZVN0YXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyB0ZSh0b0F1dGgwQ2xpZW50T3B0aW9ucyhjbGllbnRPcHRzKSk7IH0pWzBdO1xyXG4gICAgdmFyIF9jID0gdXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXV0aFN0YXRlKSwgc3RhdGUgPSBfY1swXSwgZGlzcGF0Y2ggPSBfY1sxXTtcclxuICAgIHZhciBkaWRJbml0aWFsaXNlID0gdXNlUmVmKGZhbHNlKTtcclxuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGRpZEluaXRpYWxpc2UuY3VycmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpZEluaXRpYWxpc2UuY3VycmVudCA9IHRydWU7XHJcbiAgICAgICAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VyLCBhcHBTdGF0ZSwgZXJyb3JfMTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFswLCA3LCAsIDhdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaGFzQXV0aFBhcmFtcygpICYmICFza2lwUmVkaXJlY3RDYWxsYmFjaykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjbGllbnQuaGFuZGxlUmVkaXJlY3RDYWxsYmFjaygpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcFN0YXRlID0gKF9hLnNlbnQoKSkuYXBwU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNsaWVudC5nZXRVc2VyKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25SZWRpcmVjdENhbGxiYWNrKGFwcFN0YXRlLCB1c2VyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCBjbGllbnQuY2hlY2tTZXNzaW9uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjbGllbnQuZ2V0VXNlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0lOSVRJQUxJU0VEJywgdXNlcjogdXNlciB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdFUlJPUicsIGVycm9yOiBsb2dpbkVycm9yKGVycm9yXzEpIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7IH0pKCk7XHJcbiAgICB9LCBbY2xpZW50LCBvblJlZGlyZWN0Q2FsbGJhY2ssIHNraXBSZWRpcmVjdENhbGxiYWNrXSk7XHJcbiAgICB2YXIgbG9naW5XaXRoUmVkaXJlY3QgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAob3B0cykge1xyXG4gICAgICAgIGRlcHJlY2F0ZVJlZGlyZWN0VXJpKG9wdHMpO1xyXG4gICAgICAgIHJldHVybiBjbGllbnQubG9naW5XaXRoUmVkaXJlY3Qob3B0cyk7XHJcbiAgICB9LCBbY2xpZW50XSk7XHJcbiAgICB2YXIgbG9naW5XaXRoUG9wdXAgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAob3B0aW9ucywgY29uZmlnKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlcnJvcl8yLCB1c2VyO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0xPR0lOX1BPUFVQX1NUQVJURUQnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNsaWVudC5sb2dpbldpdGhQb3B1cChvcHRpb25zLCBjb25maWcpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfMiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdFUlJPUicsIGVycm9yOiBsb2dpbkVycm9yKGVycm9yXzIpIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFs0IC8qeWllbGQqLywgY2xpZW50LmdldFVzZXIoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlciA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdMT0dJTl9QT1BVUF9DT01QTEVURScsIHVzZXI6IHVzZXIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTsgfSwgW2NsaWVudF0pO1xyXG4gICAgdmFyIGxvZ291dCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChvcHRzKSB7XHJcbiAgICAgICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0ge307IH1cclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgY2xpZW50LmxvZ291dChvcHRzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm9wZW5VcmwgfHwgb3B0cy5vcGVuVXJsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnTE9HT1VUJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgW2NsaWVudF0pO1xyXG4gICAgdmFyIGdldEFjY2Vzc1Rva2VuU2lsZW50bHkgPSB1c2VDYWxsYmFjayhcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICBmdW5jdGlvbiAob3B0cykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdG9rZW4sIGVycm9yXzMsIF9hO1xyXG4gICAgICAgIHZhciBfYjtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzAsIDIsIDMsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjbGllbnQuZ2V0VG9rZW5TaWxlbnRseShvcHRzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfMyA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyB0b2tlbkVycm9yKGVycm9yXzMpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gZGlzcGF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgX2IgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdHRVRfQUNDRVNTX1RPS0VOX0NPTVBMRVRFJ1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY2xpZW50LmdldFVzZXIoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EuYXBwbHkodm9pZCAwLCBbKF9iLnVzZXIgPSBfYy5zZW50KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYildKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qLywgdG9rZW5dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTsgfSwgW2NsaWVudF0pO1xyXG4gICAgdmFyIGdldEFjY2Vzc1Rva2VuV2l0aFBvcHVwID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKG9wdHMsIGNvbmZpZykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdG9rZW4sIGVycm9yXzQsIF9hO1xyXG4gICAgICAgIHZhciBfYjtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzAsIDIsIDMsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjbGllbnQuZ2V0VG9rZW5XaXRoUG9wdXAob3B0cywgY29uZmlnKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfNCA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyB0b2tlbkVycm9yKGVycm9yXzQpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gZGlzcGF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgX2IgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdHRVRfQUNDRVNTX1RPS0VOX0NPTVBMRVRFJ1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY2xpZW50LmdldFVzZXIoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EuYXBwbHkodm9pZCAwLCBbKF9iLnVzZXIgPSBfYy5zZW50KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYildKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qLywgdG9rZW5dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTsgfSwgW2NsaWVudF0pO1xyXG4gICAgdmFyIGdldElkVG9rZW5DbGFpbXMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7IHJldHVybiBjbGllbnQuZ2V0SWRUb2tlbkNsYWltcygpOyB9LCBbY2xpZW50XSk7XHJcbiAgICB2YXIgaGFuZGxlUmVkaXJlY3RDYWxsYmFjayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh1cmwpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVycm9yXzUsIF9hO1xyXG4gICAgICAgIHZhciBfYjtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzAsIDIsIDMsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjbGllbnQuaGFuZGxlUmVkaXJlY3RDYWxsYmFjayh1cmwpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfNSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyB0b2tlbkVycm9yKGVycm9yXzUpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gZGlzcGF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgX2IgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdIQU5ETEVfUkVESVJFQ1RfQ09NUExFVEUnXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjbGllbnQuZ2V0VXNlcigpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBfYS5hcHBseSh2b2lkIDAsIFsoX2IudXNlciA9IF9jLnNlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iKV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7IH0sIFtjbGllbnRdKTtcclxuICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBnZXRBY2Nlc3NUb2tlblNpbGVudGx5OiBnZXRBY2Nlc3NUb2tlblNpbGVudGx5LCBnZXRBY2Nlc3NUb2tlbldpdGhQb3B1cDogZ2V0QWNjZXNzVG9rZW5XaXRoUG9wdXAsIGdldElkVG9rZW5DbGFpbXM6IGdldElkVG9rZW5DbGFpbXMsIGxvZ2luV2l0aFJlZGlyZWN0OiBsb2dpbldpdGhSZWRpcmVjdCwgbG9naW5XaXRoUG9wdXA6IGxvZ2luV2l0aFBvcHVwLCBsb2dvdXQ6IGxvZ291dCwgaGFuZGxlUmVkaXJlY3RDYWxsYmFjazogaGFuZGxlUmVkaXJlY3RDYWxsYmFjayB9KTtcclxuICAgIH0sIFtcclxuICAgICAgICBzdGF0ZSxcclxuICAgICAgICBnZXRBY2Nlc3NUb2tlblNpbGVudGx5LFxyXG4gICAgICAgIGdldEFjY2Vzc1Rva2VuV2l0aFBvcHVwLFxyXG4gICAgICAgIGdldElkVG9rZW5DbGFpbXMsXHJcbiAgICAgICAgbG9naW5XaXRoUmVkaXJlY3QsXHJcbiAgICAgICAgbG9naW5XaXRoUG9wdXAsXHJcbiAgICAgICAgbG9nb3V0LFxyXG4gICAgICAgIGhhbmRsZVJlZGlyZWN0Q2FsbGJhY2ssXHJcbiAgICBdKTtcclxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IGNvbnRleHRWYWx1ZSB9LCBjaGlsZHJlbik7XHJcbn07XG5cbi8qKlxyXG4gKiBgYGBqc1xyXG4gKiBjb25zdCB7XHJcbiAqICAgLy8gQXV0aCBzdGF0ZTpcclxuICogICBlcnJvcixcclxuICogICBpc0F1dGhlbnRpY2F0ZWQsXHJcbiAqICAgaXNMb2FkaW5nLFxyXG4gKiAgIHVzZXIsXHJcbiAqICAgLy8gQXV0aCBtZXRob2RzOlxyXG4gKiAgIGdldEFjY2Vzc1Rva2VuU2lsZW50bHksXHJcbiAqICAgZ2V0QWNjZXNzVG9rZW5XaXRoUG9wdXAsXHJcbiAqICAgZ2V0SWRUb2tlbkNsYWltcyxcclxuICogICBsb2dpbldpdGhSZWRpcmVjdCxcclxuICogICBsb2dpbldpdGhQb3B1cCxcclxuICogICBsb2dvdXQsXHJcbiAqIH0gPSB1c2VBdXRoMDxUVXNlcj4oKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIFVzZSB0aGUgYHVzZUF1dGgwYCBob29rIGluIHlvdXIgY29tcG9uZW50cyB0byBhY2Nlc3MgdGhlIGF1dGggc3RhdGUgYW5kIG1ldGhvZHMuXHJcbiAqXHJcbiAqIFRVc2VyIGlzIGFuIG9wdGlvbmFsIHR5cGUgcGFyYW0gdG8gcHJvdmlkZSBhIHR5cGUgdG8gdGhlIGB1c2VyYCBmaWVsZC5cclxuICovXHJcbnZhciB1c2VBdXRoMCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7IGNvbnRleHQgPSBBdXRoMENvbnRleHQ7IH1cclxuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xyXG59O1xuXG4vKipcclxuICogYGBganN4XHJcbiAqIGNsYXNzIE15Q29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICogICByZW5kZXIoKSB7XHJcbiAqICAgICAvLyBBY2Nlc3MgdGhlIGF1dGggY29udGV4dCBmcm9tIHRoZSBgYXV0aDBgIHByb3BcclxuICogICAgIGNvbnN0IHsgdXNlciB9ID0gdGhpcy5wcm9wcy5hdXRoMDtcclxuICogICAgIHJldHVybiA8ZGl2PkhlbGxvIHt1c2VyLm5hbWV9ITwvZGl2PlxyXG4gKiAgIH1cclxuICogfVxyXG4gKiAvLyBXcmFwIHlvdXIgY2xhc3MgY29tcG9uZW50IGluIHdpdGhBdXRoMFxyXG4gKiBleHBvcnQgZGVmYXVsdCB3aXRoQXV0aDAoTXlDb21wb25lbnQpO1xyXG4gKiBgYGBcclxuICpcclxuICogV3JhcCB5b3VyIGNsYXNzIGNvbXBvbmVudHMgaW4gdGhpcyBIaWdoZXIgT3JkZXIgQ29tcG9uZW50IHRvIGdpdmUgdGhlbSBhY2Nlc3MgdG8gdGhlIEF1dGgwQ29udGV4dC5cclxuICpcclxuICogUHJvdmlkaW5nIGEgY29udGV4dCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IGFsbG93cyB5b3UgdG8gY29uZmlndXJlIHRoZSBBdXRoMFByb3ZpZGVyIHRoZSBBdXRoMENvbnRleHRcclxuICogc2hvdWxkIGNvbWUgZnJvbSBmIHlvdSBoYXZlIG11bHRpcGxlIHdpdGhpbiB5b3VyIGFwcGxpY2F0aW9uLlxyXG4gKi9cclxudmFyIHdpdGhBdXRoMCA9IGZ1bmN0aW9uIChDb21wb25lbnQsIGNvbnRleHQpIHtcclxuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IEF1dGgwQ29udGV4dDsgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIFdpdGhBdXRoKHByb3BzKSB7XHJcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChhdXRoKSB7IHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9fYXNzaWduKHt9LCBwcm9wcywgeyBhdXRoMDogYXV0aCB9KSkpOyB9KSk7XHJcbiAgICB9O1xyXG59O1xuXG4vKipcclxuICogQGlnbm9yZVxyXG4gKi9cclxudmFyIGRlZmF1bHRPblJlZGlyZWN0aW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCk7IH07XHJcbi8qKlxyXG4qIEBpZ25vcmVcclxuKi9cclxudmFyIGRlZmF1bHRPbkJlZm9yZUF1dGhlbnRpY2F0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG59KTsgfSk7IH07XHJcbi8qKlxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG52YXIgZGVmYXVsdFJldHVyblRvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSkuY29uY2F0KHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG59O1xyXG4vKipcclxuICogYGBganNcclxuICogY29uc3QgTXlQcm90ZWN0ZWRDb21wb25lbnQgPSB3aXRoQXV0aGVudGljYXRpb25SZXF1aXJlZChNeUNvbXBvbmVudCk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBXaGVuIHlvdSB3cmFwIHlvdXIgY29tcG9uZW50cyBpbiB0aGlzIEhpZ2hlciBPcmRlciBDb21wb25lbnQgYW5kIGFuIGFub255bW91cyB1c2VyIHZpc2l0cyB5b3VyIGNvbXBvbmVudFxyXG4gKiB0aGV5IHdpbGwgYmUgcmVkaXJlY3RlZCB0byB0aGUgbG9naW4gcGFnZTsgYWZ0ZXIgbG9naW4gdGhleSB3aWxsIGJlIHJldHVybmVkIHRvIHRoZSBwYWdlIHRoZXkgd2VyZSByZWRpcmVjdGVkIGZyb20uXHJcbiAqL1xyXG52YXIgd2l0aEF1dGhlbnRpY2F0aW9uUmVxdWlyZWQgPSBmdW5jdGlvbiAoQ29tcG9uZW50LCBvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIFdpdGhBdXRoZW50aWNhdGlvblJlcXVpcmVkKHByb3BzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgX2EgPSBvcHRpb25zLnJldHVyblRvLCByZXR1cm5UbyA9IF9hID09PSB2b2lkIDAgPyBkZWZhdWx0UmV0dXJuVG8gOiBfYSwgX2IgPSBvcHRpb25zLm9uUmVkaXJlY3RpbmcsIG9uUmVkaXJlY3RpbmcgPSBfYiA9PT0gdm9pZCAwID8gZGVmYXVsdE9uUmVkaXJlY3RpbmcgOiBfYiwgX2MgPSBvcHRpb25zLm9uQmVmb3JlQXV0aGVudGljYXRpb24sIG9uQmVmb3JlQXV0aGVudGljYXRpb24gPSBfYyA9PT0gdm9pZCAwID8gZGVmYXVsdE9uQmVmb3JlQXV0aGVudGljYXRpb24gOiBfYywgbG9naW5PcHRpb25zID0gb3B0aW9ucy5sb2dpbk9wdGlvbnMsIF9kID0gb3B0aW9ucy5jb250ZXh0LCBjb250ZXh0ID0gX2QgPT09IHZvaWQgMCA/IEF1dGgwQ29udGV4dCA6IF9kO1xyXG4gICAgICAgIHZhciBfZSA9IHVzZUF1dGgwKGNvbnRleHQpLCBpc0F1dGhlbnRpY2F0ZWQgPSBfZS5pc0F1dGhlbnRpY2F0ZWQsIGlzTG9hZGluZyA9IF9lLmlzTG9hZGluZywgbG9naW5XaXRoUmVkaXJlY3QgPSBfZS5sb2dpbldpdGhSZWRpcmVjdDtcclxuICAgICAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoaXNMb2FkaW5nIHx8IGlzQXV0aGVudGljYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBvcHRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGxvZ2luT3B0aW9ucyksIHsgYXBwU3RhdGU6IF9fYXNzaWduKF9fYXNzaWduKHt9LCAobG9naW5PcHRpb25zICYmIGxvZ2luT3B0aW9ucy5hcHBTdGF0ZSkpLCB7IHJldHVyblRvOiB0eXBlb2YgcmV0dXJuVG8gPT09ICdmdW5jdGlvbicgPyByZXR1cm5UbygpIDogcmV0dXJuVG8gfSkgfSk7XHJcbiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIG9uQmVmb3JlQXV0aGVudGljYXRpb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGxvZ2luV2l0aFJlZGlyZWN0KG9wdHMpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTsgfSkoKTtcclxuICAgICAgICB9LCBbXHJcbiAgICAgICAgICAgIGlzTG9hZGluZyxcclxuICAgICAgICAgICAgaXNBdXRoZW50aWNhdGVkLFxyXG4gICAgICAgICAgICBsb2dpbldpdGhSZWRpcmVjdCxcclxuICAgICAgICAgICAgb25CZWZvcmVBdXRoZW50aWNhdGlvbixcclxuICAgICAgICAgICAgbG9naW5PcHRpb25zLFxyXG4gICAgICAgICAgICByZXR1cm5UbyxcclxuICAgICAgICBdKTtcclxuICAgICAgICByZXR1cm4gaXNBdXRoZW50aWNhdGVkID8gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9fYXNzaWduKHt9LCBwcm9wcykpIDogb25SZWRpcmVjdGluZygpO1xyXG4gICAgfTtcclxufTtcblxuZXhwb3J0IHsgQXV0aDBDb250ZXh0LCBBdXRoMFByb3ZpZGVyLCB1IGFzIEF1dGhlbnRpY2F0aW9uRXJyb3IsIGQgYXMgR2VuZXJpY0Vycm9yLCBQIGFzIEluTWVtb3J5Q2FjaGUsIHogYXMgTG9jYWxTdG9yYWdlQ2FjaGUsIG0gYXMgTWZhUmVxdWlyZWRFcnJvciwgZiBhcyBNaXNzaW5nUmVmcmVzaFRva2VuRXJyb3IsIE9BdXRoRXJyb3IsIHAgYXMgUG9wdXBDYW5jZWxsZWRFcnJvciwgaCBhcyBQb3B1cFRpbWVvdXRFcnJvciwgbCBhcyBUaW1lb3V0RXJyb3IsIGllIGFzIFVzZXIsIGluaXRpYWxDb250ZXh0LCB1c2VBdXRoMCwgd2l0aEF1dGgwLCB3aXRoQXV0aGVudGljYXRpb25SZXF1aXJlZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aDAtcmVhY3QuZXNtLmpzLm1hcFxuIiwiLy8gVGVzdCB0byBnZXQgdGhlIHdlYXRoZXIgZm9yZWNhc3QgdG8gbWFrZSBzdXJlIGZyb250IGFuZCBiYWNrZW5kIGNhbiB0YWxrIGFuZCBnZXQgZGF0YSBiZXR3ZWVuIHRoZSB0d28uXHJcbmV4cG9ydCBjb25zdCBHZXRXZWF0aGVyRm9yZWNhc3RBc3luYyA9IGFzeW5jICgpID0+XHJcbntcclxuICAgIGNvbnNvbGUubG9nKFwiSW4gR2V0V2VhdGhlckZvcmVjYXN0QXN5bmNcIik7XHJcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2goYC9hcGkvV2VhdGhlckZvcmVjYXN0YCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICBoZWFkZXJzIDoge1xyXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXHJcbiAgICAgICAgfVxyXG4gICAgfSkgXHJcbiAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IEdldFdlYXRoZXJGb3JlY2FzdEFzeW5jIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL1dlYXRoZXJGb3JlY2FzdFwiO1xyXG5pbXBvcnQgV2VhdGhlckZvcmVjYXN0IGZyb20gXCIuLi8uLi9tb2RlbHMvV2VhdGhlckZvcmVjYXN0XCI7XHJcblxyXG5cclxuY29uc3QgSW52ZW50b3J5TGlzdCA9ICgpID0+ICB7XHJcbiAgICBjb25zdFt3ZWF0aGVyRm9yZWNhc3QsIHNldFdlYXRoZXJGb3JlY2FzdF0gPSB1c2VTdGF0ZTxXZWF0aGVyRm9yZWNhc3RbXT4oKTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IEdldFdlYXRoZXJGb3JlY2FzdEFzeW5jKCkudGhlbihhc3luYyAocmVzcG9uc2U6V2VhdGhlckZvcmVjYXN0W10pID0+IHtcclxuICAgICAgICAgICAgc2V0V2VhdGhlckZvcmVjYXN0KHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgICB9KTtcclxuICAgICAgfSkoKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICByZXR1cm4oXHJcbiAgICA8PlxyXG4gICAgPHA+IFdlYXRoZXIgRm9yZWNhc3QgQ29tcG9uZW50IEZpcmVkITwvcD5cclxuICAgIHt3ZWF0aGVyRm9yZWNhc3Q/Lm1hcCgoeCxpKSA9PiB7IFxyXG4gICAgcmV0dXJuKCBcclxuICAgICAgICA8ZGl2IGtleT17aX0+XHJcbiAgICAgICAgICAgIDxwPlRlbXBDOiB7eD8udGVtcGVyYXR1cmVDfTwvcD5cclxuICAgICAgICAgICAgPHA+VGVtcEY6IHt4Py50ZW1wZXJhdHVyZUZ9PC9wPlxyXG4gICAgICAgICAgICA8cD5TdW1tYXJ5OiB7eD8uc3VtbWFyeX08L3A+XHJcbiAgICA8L2Rpdj5cclxuICAgICl9KX1cclxuICAgIDwvPlxyXG4gICAgKVxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBJbnZlbnRvcnlMaXN0OyIsImltcG9ydCB7IEF1dGgwQ29udGV4dEludGVyZmFjZSwgVXNlciwgdXNlQXV0aDAsIHdpdGhBdXRoMCB9IGZyb20gXCJAYXV0aDAvYXV0aDAtcmVhY3RcIjtcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgV2VhdGhlckZvcmVjYXN0IGZyb20gXCIuLi9XZWF0aGVyRm9yZWNhc3QvV2VhdGhlckZvcmVjYXN0XCI7XHJcblxyXG50eXBlIEF1dGhQcm9wcyA9IHtcclxuICBhdXRoMDogQXV0aDBDb250ZXh0SW50ZXJmYWNlPFVzZXI+O1xyXG59O1xyXG5cclxuY2xhc3MgSG9tZSBleHRlbmRzIENvbXBvbmVudDxBdXRoUHJvcHM+IHtcclxuICBzdGF0aWMgZGlzcGxheU5hbWUgPSBIb21lLm5hbWU7XHJcbiAgdXNlcj86VXNlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IEF1dGhQcm9wcyB8IFJlYWRvbmx5PEF1dGhQcm9wcz4pIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICB0aGlzLnVzZXIgPSB0aGlzLnByb3BzLmF1dGgwLnVzZXI7XHJcbiAgICBcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDw+XHJcbiAgICAgIDxXZWF0aGVyRm9yZWNhc3QvPlxyXG4gICAgICA8Lz5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCAgd2l0aEF1dGgwKEhvbWUpOyIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL3Y0LjAuMC1hbHBoYS40L2pzL3NyYy9tb2RhbC5qcyNMNDM2LUw0NDNcbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxiYXJXaWR0aCgpIHtcbiAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAvLyAubW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUgc3R5bGVzIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL3Y0LjAuMC1hbHBoYS40L3Njc3MvX21vZGFsLnNjc3MjTDEwNi1MMTEzXG4gIHNjcm9sbERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLmhlaWdodCA9ICc1MHB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gIHJldHVybiBzY3JvbGxiYXJXaWR0aDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRTY3JvbGxiYXJXaWR0aChwYWRkaW5nKSB7XG4gIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZyA+IDAgPyBcIlwiLmNvbmNhdChwYWRkaW5nLCBcInB4XCIpIDogbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0JvZHlPdmVyZmxvd2luZygpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPCB3aW5kb3cuaW5uZXJXaWR0aDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcmlnaW5hbEJvZHlQYWRkaW5nKCkge1xuICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5LCBudWxsKTtcbiAgcmV0dXJuIHBhcnNlSW50KHN0eWxlICYmIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29uZGl0aW9uYWxseVVwZGF0ZVNjcm9sbGJhcigpIHtcbiAgdmFyIHNjcm9sbGJhcldpZHRoID0gZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvdjQuMC4wLWFscGhhLjYvanMvc3JjL21vZGFsLmpzI0w0MzNcbiAgdmFyIGZpeGVkQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnKVswXTtcbiAgdmFyIGJvZHlQYWRkaW5nID0gZml4ZWRDb250ZW50ID8gcGFyc2VJbnQoZml4ZWRDb250ZW50LnN0eWxlLnBhZGRpbmdSaWdodCB8fCAwLCAxMCkgOiAwO1xuICBpZiAoaXNCb2R5T3ZlcmZsb3dpbmcoKSkge1xuICAgIHNldFNjcm9sbGJhcldpZHRoKGJvZHlQYWRkaW5nICsgc2Nyb2xsYmFyV2lkdGgpO1xuICB9XG59XG52YXIgZ2xvYmFsQ3NzTW9kdWxlO1xuZXhwb3J0IGZ1bmN0aW9uIHNldEdsb2JhbENzc01vZHVsZShjc3NNb2R1bGUpIHtcbiAgZ2xvYmFsQ3NzTW9kdWxlID0gY3NzTW9kdWxlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvQ3NzTW9kdWxlcygpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG4gIHZhciBjc3NNb2R1bGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGdsb2JhbENzc01vZHVsZTtcbiAgaWYgKCFjc3NNb2R1bGUpIHJldHVybiBjbGFzc05hbWU7XG4gIHJldHVybiBjbGFzc05hbWUuc3BsaXQoJyAnKS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gY3NzTW9kdWxlW2NdIHx8IGM7XG4gIH0pLmpvaW4oJyAnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBrZXkvdmFsdWUgcGFpcnMgZnJvbSBgb2JqYCB0aGF0IGFyZSBub3QgaW4gdGhlIGFycmF5IGBvbWl0S2V5c2AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbWl0KG9iaiwgb21pdEtleXMpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChvbWl0S2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG9ialtrZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZpbHRlcmVkIGNvcHkgb2YgYW4gb2JqZWN0IHdpdGggb25seSB0aGUgc3BlY2lmaWVkIGtleXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwaWNrKG9iaiwga2V5cykge1xuICB2YXIgcGlja0tleXMgPSBBcnJheS5pc0FycmF5KGtleXMpID8ga2V5cyA6IFtrZXlzXTtcbiAgdmFyIGxlbmd0aCA9IHBpY2tLZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB3aGlsZSAobGVuZ3RoID4gMCkge1xuICAgIGxlbmd0aCAtPSAxO1xuICAgIGtleSA9IHBpY2tLZXlzW2xlbmd0aF07XG4gICAgcmVzdWx0W2tleV0gPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxudmFyIHdhcm5lZCA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm5PbmNlKG1lc3NhZ2UpIHtcbiAgaWYgKCF3YXJuZWRbbWVzc2FnZV0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cblxuICAgIHdhcm5lZFttZXNzYWdlXSA9IHRydWU7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGVkKHByb3BUeXBlLCBleHBsYW5hdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSAhPT0gbnVsbCAmJiB0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgd2Fybk9uY2UoXCJcXFwiXCIuY29uY2F0KHByb3BOYW1lLCBcIlxcXCIgcHJvcGVydHkgb2YgXFxcIlwiKS5jb25jYXQoY29tcG9uZW50TmFtZSwgXCJcXFwiIGhhcyBiZWVuIGRlcHJlY2F0ZWQuXFxuXCIpLmNvbmNhdChleHBsYW5hdGlvbikpO1xuICAgIH1cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMyA/IF9sZW4gLSAzIDogMCksIF9rZXkgPSAzOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICByZXN0W19rZXkgLSAzXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BUeXBlLmFwcGx5KHZvaWQgMCwgW3Byb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZV0uY29uY2F0KHJlc3QpKTtcbiAgfTtcbn1cblxuLy8gU2hpbSBFbGVtZW50IGlmIG5lZWRlZCAoZS5nLiBpbiBOb2RlIGVudmlyb25tZW50KVxudmFyIEVsZW1lbnQgPSAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuRWxlbWVudCB8fCBmdW5jdGlvbiAoKSB7fTtcbmV4cG9ydCBmdW5jdGlvbiBET01FbGVtZW50KHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBFbGVtZW50KSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvcCBgJyArIHByb3BOYW1lICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AuIEV4cGVjdGVkIHByb3AgdG8gYmUgYW4gaW5zdGFuY2Ugb2YgRWxlbWVudC4gVmFsaWRhdGlvbiBmYWlsZWQuJyk7XG4gIH1cbn1cbmV4cG9ydCB2YXIgdGFyZ2V0UHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgRE9NRWxlbWVudCwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgY3VycmVudDogUHJvcFR5cGVzLmFueVxufSldKTtcbmV4cG9ydCB2YXIgdGFnUHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgJCR0eXBlb2Y6IFByb3BUeXBlcy5zeW1ib2wsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmNcbn0pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgJCR0eXBlb2Y6IFByb3BUeXBlcy5zeW1ib2wsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmNcbn0pXSkpXSk7XG5cbi8vIFRoZXNlIGFyZSBhbGwgc2V0dXAgdG8gbWF0Y2ggd2hhdCBpcyBpbiB0aGUgYm9vdHN0cmFwIF92YXJpYWJsZXMuc2Nzc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvdjQtZGV2L3Njc3MvX3ZhcmlhYmxlcy5zY3NzXG5leHBvcnQgdmFyIFRyYW5zaXRpb25UaW1lb3V0cyA9IHtcbiAgRmFkZTogMTUwLFxuICAvLyAkdHJhbnNpdGlvbi1mYWRlXG4gIENvbGxhcHNlOiAzNTAsXG4gIC8vICR0cmFuc2l0aW9uLWNvbGxhcHNlXG4gIE1vZGFsOiAzMDAsXG4gIC8vICRtb2RhbC10cmFuc2l0aW9uXG4gIENhcm91c2VsOiA2MDAsXG4gIC8vICRjYXJvdXNlbC10cmFuc2l0aW9uXG4gIE9mZmNhbnZhczogMzAwIC8vICRvZmZjYW52YXMtdHJhbnNpdGlvblxufTtcblxuLy8gRHVwbGljYXRlZCBUcmFuc2l0aW9uLnByb3BUeXBlIGtleXMgdG8gZW5zdXJlIHRoYXQgUmVhY3RzdHJhcCBidWlsZHNcbi8vIGZvciBkaXN0cmlidXRpb24gcHJvcGVybHkgZXhjbHVkZSB0aGVzZSBrZXlzIGZvciBuZXN0ZWQgY2hpbGQgSFRNTCBhdHRyaWJ1dGVzXG4vLyBzaW5jZSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cGAgcmVtb3ZlcyBwcm9wVHlwZXMgaW4gcHJvZHVjdGlvbiBidWlsZHMuXG5leHBvcnQgdmFyIFRyYW5zaXRpb25Qcm9wVHlwZUtleXMgPSBbJ2luJywgJ21vdW50T25FbnRlcicsICd1bm1vdW50T25FeGl0JywgJ2FwcGVhcicsICdlbnRlcicsICdleGl0JywgJ3RpbWVvdXQnLCAnb25FbnRlcicsICdvbkVudGVyaW5nJywgJ29uRW50ZXJlZCcsICdvbkV4aXQnLCAnb25FeGl0aW5nJywgJ29uRXhpdGVkJ107XG5leHBvcnQgdmFyIFRyYW5zaXRpb25TdGF0dXNlcyA9IHtcbiAgRU5URVJJTkc6ICdlbnRlcmluZycsXG4gIEVOVEVSRUQ6ICdlbnRlcmVkJyxcbiAgRVhJVElORzogJ2V4aXRpbmcnLFxuICBFWElURUQ6ICdleGl0ZWQnXG59O1xuZXhwb3J0IHZhciBrZXlDb2RlcyA9IHtcbiAgZXNjOiAyNyxcbiAgc3BhY2U6IDMyLFxuICBlbnRlcjogMTMsXG4gIHRhYjogOSxcbiAgdXA6IDM4LFxuICBkb3duOiA0MCxcbiAgaG9tZTogMzYsXG4gIGVuZDogMzUsXG4gIG46IDc4LFxuICBwOiA4MFxufTtcbmV4cG9ydCB2YXIgUG9wcGVyUGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhY3RSZWZPYmoodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQgJiYgX3R5cGVvZih0YXJnZXQpID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiAnY3VycmVudCcgaW4gdGFyZ2V0O1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gJ1tvYmplY3QgVW5kZWZpbmVkXScgOiAnW29iamVjdCBOdWxsXSc7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSBfdHlwZW9mKHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gX3R5cGVvZih2YWx1ZSk7XG4gIHZhciBOQU4gPSAwIC8gMDtcbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh0eXBlID09PSAnc3ltYm9sJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiBnZXRUYWcodmFsdWUpID09PSAnW29iamVjdCBTeW1ib2xdJykge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyBcIlwiLmNvbmNhdChvdGhlcikgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gL14wYlswMV0rJC9pLnRlc3QodmFsdWUpO1xuICByZXR1cm4gaXNCaW5hcnkgfHwgL14wb1swLTddKyQvaS50ZXN0KHZhbHVlKSA/IHBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KSA6IC9eWy0rXTB4WzAtOWEtZl0rJC9pLnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScgfHwgdGFnID09PSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScgfHwgdGFnID09PSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nIHx8IHRhZyA9PT0gJ1tvYmplY3QgUHJveHldJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRE9NRWxlbWVudHModGFyZ2V0KSB7XG4gIGlmIChpc1JlYWN0UmVmT2JqKHRhcmdldCkpIHtcbiAgICByZXR1cm4gdGFyZ2V0LmN1cnJlbnQ7XG4gIH1cbiAgaWYgKGlzRnVuY3Rpb24odGFyZ2V0KSkge1xuICAgIHJldHVybiB0YXJnZXQoKTtcbiAgfVxuICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgJiYgY2FuVXNlRE9NKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0KTtcbiAgICBpZiAoIXNlbGVjdGlvbi5sZW5ndGgpIHtcbiAgICAgIHNlbGVjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjXCIuY29uY2F0KHRhcmdldCkpO1xuICAgIH1cbiAgICBpZiAoIXNlbGVjdGlvbi5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSB0YXJnZXQgJ1wiLmNvbmNhdCh0YXJnZXQsIFwiJyBjb3VsZCBub3QgYmUgaWRlbnRpZmllZCBpbiB0aGUgZG9tLCB0aXA6IGNoZWNrIHNwZWxsaW5nXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlPck5vZGVMaXN0KGVscykge1xuICBpZiAoZWxzID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGVscykgfHwgY2FuVXNlRE9NICYmIHR5cGVvZiBlbHMubGVuZ3RoID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0LCBhbGxFbGVtZW50cykge1xuICB2YXIgZWxzID0gZmluZERPTUVsZW1lbnRzKHRhcmdldCk7XG4gIGlmIChhbGxFbGVtZW50cykge1xuICAgIGlmIChpc0FycmF5T3JOb2RlTGlzdChlbHMpKSB7XG4gICAgICByZXR1cm4gZWxzO1xuICAgIH1cbiAgICBpZiAoZWxzID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBbZWxzXTtcbiAgfVxuICBpZiAoaXNBcnJheU9yTm9kZUxpc3QoZWxzKSkge1xuICAgIHJldHVybiBlbHNbMF07XG4gIH1cbiAgcmV0dXJuIGVscztcbn1cbmV4cG9ydCB2YXIgZGVmYXVsdFRvZ2dsZUV2ZW50cyA9IFsndG91Y2hzdGFydCcsICdjbGljayddO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZE11bHRpcGxlRXZlbnRMaXN0ZW5lcnMoX2VscywgaGFuZGxlciwgX2V2ZW50cywgdXNlQ2FwdHVyZSkge1xuICB2YXIgZWxzID0gX2VscztcbiAgaWYgKCFpc0FycmF5T3JOb2RlTGlzdChlbHMpKSB7XG4gICAgZWxzID0gW2Vsc107XG4gIH1cbiAgdmFyIGV2ZW50cyA9IF9ldmVudHM7XG4gIGlmICh0eXBlb2YgZXZlbnRzID09PSAnc3RyaW5nJykge1xuICAgIGV2ZW50cyA9IGV2ZW50cy5zcGxpdCgvXFxzKy8pO1xuICB9XG4gIGlmICghaXNBcnJheU9yTm9kZUxpc3QoZWxzKSB8fCB0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJyB8fCAhQXJyYXkuaXNBcnJheShldmVudHMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiXFxuICAgICAgVGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBET00gbm9kZSBvciBhbiBhcnJheSBvbiBET00gbm9kZXMgb3IgTm9kZUxpc3QuXFxuICAgICAgVGhlIHNlY29uZCBtdXN0IGJlIGEgZnVuY3Rpb24uXFxuICAgICAgVGhlIHRoaXJkIGlzIGEgc3RyaW5nIG9yIGFuIGFycmF5IG9mIHN0cmluZ3MgdGhhdCByZXByZXNlbnRzIERPTSBldmVudHNcXG4gICAgXCIpO1xuICB9XG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZXZlbnRzLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVscywgZnVuY3Rpb24gKGVsKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCB1c2VDYXB0dXJlKTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiByZW1vdmVFdmVudHMoKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChldmVudHMsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbHMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCB1c2VDYXB0dXJlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufVxuZXhwb3J0IHZhciBmb2N1c2FibGVFbGVtZW50cyA9IFsnYVtocmVmXScsICdhcmVhW2hyZWZdJywgJ2lucHV0Om5vdChbZGlzYWJsZWRdKTpub3QoW3R5cGU9aGlkZGVuXSknLCAnc2VsZWN0Om5vdChbZGlzYWJsZWRdKScsICd0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSknLCAnYnV0dG9uOm5vdChbZGlzYWJsZWRdKScsICdvYmplY3QnLCAnZW1iZWQnLCAnW3RhYmluZGV4XTpub3QoLm1vZGFsKTpub3QoLm9mZmNhbnZhcyknLCAnYXVkaW9bY29udHJvbHNdJywgJ3ZpZGVvW2NvbnRyb2xzXScsICdbY29udGVudGVkaXRhYmxlXTpub3QoW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdKSddO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZERlZmF1bHRQcm9wcyhkZWZhdWx0UHJvcHMsIHByb3BzKSB7XG4gIGlmICghZGVmYXVsdFByb3BzIHx8ICFwcm9wcykgcmV0dXJuIHByb3BzO1xuICB2YXIgcmVzdWx0ID0gX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpO1xuICBPYmplY3Qua2V5cyhkZWZhdWx0UHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChyZXN1bHRba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZmF1bHRQcm9wc1trZXldO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXMoZGVmYXVsdFByb3BzW2tleV0gfHwge30pLmxlbmd0aCA+IDAgJiYgX3R5cGVvZihkZWZhdWx0UHJvcHNba2V5XSkgPT09ICdvYmplY3QnKSB7XG4gICAgICBhZGREZWZhdWx0UHJvcHMoZGVmYXVsdFByb3BzW2tleV0sIHJlc3VsdCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJ2YXIgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY3NzTW9kdWxlXCIsIFwiZmx1aWRcIiwgXCJ0YWdcIl07XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IG1hcFRvQ3NzTW9kdWxlcywgdGFnUHJvcFR5cGUgfSBmcm9tICcuL3V0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIHRhZzogdGFnUHJvcFR5cGUsXG4gIGZsdWlkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNzc01vZHVsZTogUHJvcFR5cGVzLm9iamVjdFxufTtcbmZ1bmN0aW9uIENvbnRhaW5lcihwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIGNzc01vZHVsZSA9IHByb3BzLmNzc01vZHVsZSxcbiAgICBmbHVpZCA9IHByb3BzLmZsdWlkLFxuICAgIF9wcm9wcyR0YWcgPSBwcm9wcy50YWcsXG4gICAgVGFnID0gX3Byb3BzJHRhZyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkdGFnLFxuICAgIGF0dHJpYnV0ZXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIF9leGNsdWRlZCk7XG4gIHZhciBjb250YWluZXJDbGFzcyA9ICdjb250YWluZXInO1xuICBpZiAoZmx1aWQgPT09IHRydWUpIHtcbiAgICBjb250YWluZXJDbGFzcyA9ICdjb250YWluZXItZmx1aWQnO1xuICB9IGVsc2UgaWYgKGZsdWlkKSB7XG4gICAgY29udGFpbmVyQ2xhc3MgPSBcImNvbnRhaW5lci1cIi5jb25jYXQoZmx1aWQpO1xuICB9XG4gIHZhciBjbGFzc2VzID0gbWFwVG9Dc3NNb2R1bGVzKGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjb250YWluZXJDbGFzcyksIGNzc01vZHVsZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWcsIF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pKTtcbn1cbkNvbnRhaW5lci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnQgZGVmYXVsdCBDb250YWluZXI7IiwidmFyIF9leGNsdWRlZCA9IFtcImV4cGFuZFwiLCBcImNsYXNzTmFtZVwiLCBcImNzc01vZHVsZVwiLCBcImxpZ2h0XCIsIFwiZGFya1wiLCBcImZpeGVkXCIsIFwic3RpY2t5XCIsIFwiY29sb3JcIiwgXCJjb250YWluZXJcIiwgXCJ0YWdcIiwgXCJjaGlsZHJlblwiXTtcbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IG1hcFRvQ3NzTW9kdWxlcywgdGFnUHJvcFR5cGUgfSBmcm9tICcuL3V0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqIEFkZCBjdXN0b20gY2xhc3MgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogVGhlbWUgdGhlIG5hdmJhciBieSBhZGRpbmcgYSBiYWNrZ3JvdW5kIGNvbG9yICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIFVzZSBhbnkgb2YgdGhlIHJlc3BvbnNpdmUgY29udGFpbmVycyB0byBjaGFuZ2UgaG93IHdpZGUgdGhlIGNvbnRlbnQgaW4geW91ciBuYXZiYXIgaXMgcHJlc2VudGVkLiAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKiBDaGFuZ2UgdW5kZXJseWluZyBjb21wb25lbnQncyBDU1MgYmFzZSBjbGFzcyBuYW1lICovXG4gIGNzc01vZHVsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqIFRoaXMgcHJvcCBpcyBwYXNzZWQgaWYgdGhlIGJhY2tncm91bmQgaXMgZGFyaywgdG8gbWFrZSB0aGUgdGV4dCBsaWdodGVyICovXG4gIGRhcms6IFByb3BUeXBlcy5ib29sLFxuICAvKiogRGV0ZXJtaW5lIGlmIHRvIHNob3cgdG9nZ2xlciBidXR0b24gKi9cbiAgZXhwYW5kOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKiogTWFrZSB0aGUgbmF2YmFyIGZpeGVkIGF0IHRoZSB0b3AgKi9cbiAgZml4ZWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBBZGQgYC5uYXZiYXItbGlnaHRgIGNsYXNzICovXG4gIGxpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIFVzZSBgcG9zaXRpb246IHN0aWNreWAgd2hpY2ggaXNuJ3QgZnVsbHkgc3VwcG9ydGVkIGluIGV2ZXJ5IGJyb3dzZXIgKi9cbiAgc3RpY2t5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogU2V0IGEgY3VzdG9tIGVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50ICovXG4gIHRhZzogdGFnUHJvcFR5cGVcbn07XG52YXIgZ2V0RXhwYW5kQ2xhc3MgPSBmdW5jdGlvbiBnZXRFeHBhbmRDbGFzcyhleHBhbmQpIHtcbiAgaWYgKGV4cGFuZCA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGV4cGFuZCA9PT0gdHJ1ZSB8fCBleHBhbmQgPT09ICd4cycpIHtcbiAgICByZXR1cm4gJ25hdmJhci1leHBhbmQnO1xuICB9XG4gIHJldHVybiBcIm5hdmJhci1leHBhbmQtXCIuY29uY2F0KGV4cGFuZCk7XG59O1xuZnVuY3Rpb24gTmF2YmFyKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcbiAgdmFyIF9wcm9wcyRleHBhbmQgPSBwcm9wcy5leHBhbmQsXG4gICAgZXhwYW5kID0gX3Byb3BzJGV4cGFuZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZXhwYW5kLFxuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICBjc3NNb2R1bGUgPSBwcm9wcy5jc3NNb2R1bGUsXG4gICAgbGlnaHQgPSBwcm9wcy5saWdodCxcbiAgICBkYXJrID0gcHJvcHMuZGFyayxcbiAgICBmaXhlZCA9IHByb3BzLmZpeGVkLFxuICAgIHN0aWNreSA9IHByb3BzLnN0aWNreSxcbiAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgIF9wcm9wcyRjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgY29udGFpbmVyID0gX3Byb3BzJGNvbnRhaW5lciA9PT0gdm9pZCAwID8gJ2ZsdWlkJyA6IF9wcm9wcyRjb250YWluZXIsXG4gICAgX3Byb3BzJHRhZyA9IHByb3BzLnRhZyxcbiAgICBUYWcgPSBfcHJvcHMkdGFnID09PSB2b2lkIDAgPyAnbmF2JyA6IF9wcm9wcyR0YWcsXG4gICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICBhdHRyaWJ1dGVzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQpO1xuICB2YXIgY2xhc3NlcyA9IG1hcFRvQ3NzTW9kdWxlcyhjbGFzc05hbWVzKGNsYXNzTmFtZSwgJ25hdmJhcicsIGdldEV4cGFuZENsYXNzKGV4cGFuZCksIChfY2xhc3NOYW1lcyA9IHtcbiAgICAnbmF2YmFyLWxpZ2h0JzogbGlnaHQsXG4gICAgJ25hdmJhci1kYXJrJzogZGFya1xuICB9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiYmctXCIuY29uY2F0KGNvbG9yKSwgY29sb3IpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiZml4ZWQtXCIuY29uY2F0KGZpeGVkKSwgZml4ZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwic3RpY2t5LVwiLmNvbmNhdChzdGlja3kpLCBzdGlja3kpLCBfY2xhc3NOYW1lcykpLCBjc3NNb2R1bGUpO1xuICB2YXIgY29udGFpbmVyQ2xhc3MgPSBjb250YWluZXIgJiYgY29udGFpbmVyID09PSB0cnVlID8gJ2NvbnRhaW5lcicgOiBcImNvbnRhaW5lci1cIi5jb25jYXQoY29udGFpbmVyKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRhZywgX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNvbnRhaW5lciA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNvbnRhaW5lckNsYXNzXG4gIH0sIGNoaWxkcmVuKSA6IGNoaWxkcmVuKTtcbn1cbk5hdmJhci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnQgZGVmYXVsdCBOYXZiYXI7IiwidmFyIF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNzc01vZHVsZVwiLCBcInRhZ1wiXTtcbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgbWFwVG9Dc3NNb2R1bGVzLCB0YWdQcm9wVHlwZSB9IGZyb20gJy4vdXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqIEFkZCBjdXN0b20gY2xhc3MgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogQ2hhbmdlIHVuZGVybHlpbmcgY29tcG9uZW50J3MgQ1NTIGJhc2UgY2xhc3MgbmFtZSAqL1xuICBjc3NNb2R1bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKiBTZXQgYSBjdXN0b20gZWxlbWVudCBmb3IgdGhpcyBjb21wb25lbnQgKi9cbiAgdGFnOiB0YWdQcm9wVHlwZVxufTtcbmZ1bmN0aW9uIE5hdmJhckJyYW5kKHByb3BzKSB7XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgY3NzTW9kdWxlID0gcHJvcHMuY3NzTW9kdWxlLFxuICAgIF9wcm9wcyR0YWcgPSBwcm9wcy50YWcsXG4gICAgVGFnID0gX3Byb3BzJHRhZyA9PT0gdm9pZCAwID8gJ2EnIDogX3Byb3BzJHRhZyxcbiAgICBhdHRyaWJ1dGVzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQpO1xuICB2YXIgY2xhc3NlcyA9IG1hcFRvQ3NzTW9kdWxlcyhjbGFzc05hbWVzKGNsYXNzTmFtZSwgJ25hdmJhci1icmFuZCcpLCBjc3NNb2R1bGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSk7XG59XG5OYXZiYXJCcmFuZC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnQgZGVmYXVsdCBOYXZiYXJCcmFuZDsiLCJ2YXIgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY3NzTW9kdWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJ0YWdcIl07XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IG1hcFRvQ3NzTW9kdWxlcywgdGFnUHJvcFR5cGUgfSBmcm9tICcuL3V0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKiBBZGQgY3VzdG9tIGNsYXNzICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIENoYW5nZSB1bmRlcmx5aW5nIGNvbXBvbmVudCdzIENTUyBiYXNlIGNsYXNzIG5hbWUgKi9cbiAgY3NzTW9kdWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKiogU2V0IGEgY3VzdG9tIGVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50ICovXG4gIHRhZzogdGFnUHJvcFR5cGUsXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBQYXNzIGNoaWxkcmVuIHNvIHRoaXMgY29tcG9uZW50IGNhbiB3cmFwIHRoZSBjaGlsZCBlbGVtZW50cyAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5mdW5jdGlvbiBOYXZiYXJUb2dnbGVyKHByb3BzKSB7XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgY3NzTW9kdWxlID0gcHJvcHMuY3NzTW9kdWxlLFxuICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgX3Byb3BzJHRhZyA9IHByb3BzLnRhZyxcbiAgICBUYWcgPSBfcHJvcHMkdGFnID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyR0YWcsXG4gICAgYXR0cmlidXRlcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgdmFyIGNsYXNzZXMgPSBtYXBUb0Nzc01vZHVsZXMoY2xhc3NOYW1lcyhjbGFzc05hbWUsICduYXZiYXItdG9nZ2xlcicpLCBjc3NNb2R1bGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWxhYmVsXCI6IFwiVG9nZ2xlIG5hdmlnYXRpb25cIlxuICB9LCBfb2JqZWN0U3ByZWFkKHtcbiAgICB0eXBlOiAnYnV0dG9uJ1xuICB9LCBhdHRyaWJ1dGVzKSwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW4gfHwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IG1hcFRvQ3NzTW9kdWxlcygnbmF2YmFyLXRvZ2dsZXItaWNvbicsIGNzc01vZHVsZSlcbiAgfSkpO1xufVxuTmF2YmFyVG9nZ2xlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnQgZGVmYXVsdCBOYXZiYXJUb2dnbGVyOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0O1xuICB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7XG59XG5leHBvcnQgeyBfc2V0UHJvdG90eXBlT2YgYXMgZGVmYXVsdCB9OyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImV4cG9ydCB2YXIgZm9yY2VSZWZsb3cgPSBmdW5jdGlvbiBmb3JjZVJlZmxvdyhub2RlKSB7XG4gIHJldHVybiBub2RlLnNjcm9sbFRvcDtcbn07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuaW1wb3J0IHsgZm9yY2VSZWZsb3cgfSBmcm9tICcuL3V0aWxzL3JlZmxvdyc7XG5leHBvcnQgdmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0IHZhciBFWElURUQgPSAnZXhpdGVkJztcbmV4cG9ydCB2YXIgRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xuZXhwb3J0IHZhciBFTlRFUkVEID0gJ2VudGVyZWQnO1xuZXhwb3J0IHZhciBFWElUSU5HID0gJ2V4aXRpbmcnO1xuLyoqXG4gKiBUaGUgVHJhbnNpdGlvbiBjb21wb25lbnQgbGV0cyB5b3UgZGVzY3JpYmUgYSB0cmFuc2l0aW9uIGZyb20gb25lIGNvbXBvbmVudFxuICogc3RhdGUgdG8gYW5vdGhlciBfb3ZlciB0aW1lXyB3aXRoIGEgc2ltcGxlIGRlY2xhcmF0aXZlIEFQSS4gTW9zdCBjb21tb25seVxuICogaXQncyB1c2VkIHRvIGFuaW1hdGUgdGhlIG1vdW50aW5nIGFuZCB1bm1vdW50aW5nIG9mIGEgY29tcG9uZW50LCBidXQgY2FuIGFsc29cbiAqIGJlIHVzZWQgdG8gZGVzY3JpYmUgaW4tcGxhY2UgdHJhbnNpdGlvbiBzdGF0ZXMgYXMgd2VsbC5cbiAqXG4gKiAtLS1cbiAqXG4gKiAqKk5vdGUqKjogYFRyYW5zaXRpb25gIGlzIGEgcGxhdGZvcm0tYWdub3N0aWMgYmFzZSBjb21wb25lbnQuIElmIHlvdSdyZSB1c2luZ1xuICogdHJhbnNpdGlvbnMgaW4gQ1NTLCB5b3UnbGwgcHJvYmFibHkgd2FudCB0byB1c2VcbiAqIFtgQ1NTVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvY3NzLXRyYW5zaXRpb24pXG4gKiBpbnN0ZWFkLiBJdCBpbmhlcml0cyBhbGwgdGhlIGZlYXR1cmVzIG9mIGBUcmFuc2l0aW9uYCwgYnV0IGNvbnRhaW5zXG4gKiBhZGRpdGlvbmFsIGZlYXR1cmVzIG5lY2Vzc2FyeSB0byBwbGF5IG5pY2Ugd2l0aCBDU1MgdHJhbnNpdGlvbnMgKGhlbmNlIHRoZVxuICogbmFtZSBvZiB0aGUgY29tcG9uZW50KS5cbiAqXG4gKiAtLS1cbiAqXG4gKiBCeSBkZWZhdWx0IHRoZSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IGRvZXMgbm90IGFsdGVyIHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIGNvbXBvbmVudCBpdCByZW5kZXJzLCBpdCBvbmx5IHRyYWNrcyBcImVudGVyXCIgYW5kIFwiZXhpdFwiIHN0YXRlcyBmb3IgdGhlXG4gKiBjb21wb25lbnRzLiBJdCdzIHVwIHRvIHlvdSB0byBnaXZlIG1lYW5pbmcgYW5kIGVmZmVjdCB0byB0aG9zZSBzdGF0ZXMuIEZvclxuICogZXhhbXBsZSB3ZSBjYW4gYWRkIHN0eWxlcyB0byBhIGNvbXBvbmVudCB3aGVuIGl0IGVudGVycyBvciBleGl0czpcbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbiAqXG4gKiBjb25zdCBkdXJhdGlvbiA9IDMwMDtcbiAqXG4gKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7XG4gKiAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7ZHVyYXRpb259bXMgZWFzZS1pbi1vdXRgLFxuICogICBvcGFjaXR5OiAwLFxuICogfVxuICpcbiAqIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7XG4gKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZW50ZXJlZDogIHsgb3BhY2l0eTogMSB9LFxuICogICBleGl0aW5nOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGV4aXRlZDogIHsgb3BhY2l0eTogMCB9LFxuICogfTtcbiAqXG4gKiBjb25zdCBGYWRlID0gKHsgaW46IGluUHJvcCB9KSA9PiAoXG4gKiAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9e2R1cmF0aW9ufT5cbiAqICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgPGRpdiBzdHlsZT17e1xuICogICAgICAgICAuLi5kZWZhdWx0U3R5bGUsXG4gKiAgICAgICAgIC4uLnRyYW5zaXRpb25TdHlsZXNbc3RhdGVdXG4gKiAgICAgICB9fT5cbiAqICAgICAgICAgSSdtIGEgZmFkZSBUcmFuc2l0aW9uIVxuICogICAgICAgPC9kaXY+XG4gKiAgICAgKX1cbiAqICAgPC9UcmFuc2l0aW9uPlxuICogKTtcbiAqIGBgYFxuICpcbiAqIFRoZXJlIGFyZSA0IG1haW4gc3RhdGVzIGEgVHJhbnNpdGlvbiBjYW4gYmUgaW46XG4gKiAgLSBgJ2VudGVyaW5nJ2BcbiAqICAtIGAnZW50ZXJlZCdgXG4gKiAgLSBgJ2V4aXRpbmcnYFxuICogIC0gYCdleGl0ZWQnYFxuICpcbiAqIFRyYW5zaXRpb24gc3RhdGUgaXMgdG9nZ2xlZCB2aWEgdGhlIGBpbmAgcHJvcC4gV2hlbiBgdHJ1ZWAgdGhlIGNvbXBvbmVudFxuICogYmVnaW5zIHRoZSBcIkVudGVyXCIgc3RhZ2UuIER1cmluZyB0aGlzIHN0YWdlLCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgZnJvbVxuICogaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSwgdG8gYCdlbnRlcmluZydgIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlXG4gKiB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlIGl0J3MgY29tcGxldGUuIExldCdzIHRha2VcbiAqIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSAod2UnbGwgdXNlIHRoZVxuICogW3VzZVN0YXRlXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlc3RhdGUpIGhvb2spOlxuICpcbiAqIGBgYGpzeFxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBbaW5Qcm9wLCBzZXRJblByb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXs1MDB9PlxuICogICAgICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgICAgIC8vIC4uLlxuICogICAgICAgICApfVxuICogICAgICAgPC9UcmFuc2l0aW9uPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRJblByb3AodHJ1ZSl9PlxuICogICAgICAgICBDbGljayB0byBFbnRlclxuICogICAgICAgPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZVxuICogYW5kIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlc1xuICogdG8gYCdlbnRlcmVkJ2AuXG4gKlxuICogV2hlbiBgaW5gIGlzIGBmYWxzZWAgdGhlIHNhbWUgdGhpbmcgaGFwcGVucyBleGNlcHQgdGhlIHN0YXRlIG1vdmVzIGZyb21cbiAqIGAnZXhpdGluZydgIHRvIGAnZXhpdGVkJ2AuXG4gKi9cblxudmFyIFRyYW5zaXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQ7IC8vIEluIHRoZSBjb250ZXh0IG9mIGEgVHJhbnNpdGlvbkdyb3VwIGFsbCBlbnRlcnMgYXJlIHJlYWxseSBhcHBlYXJzXG5cbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcbiAgICB2YXIgaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgbmV4dEluID0gX3JlZi5pbjtcblxuICAgIGlmIChuZXh0SW4gJiYgcHJldlN0YXRlLnN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgLy8gICBsZXQgbmV4dFN0YXR1cyA9IG51bGxcbiAgLy8gICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gIC8vICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5zdGF0ZVxuICAvLyAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHsgbmV4dFN0YXR1cyB9XG4gIC8vIH1cbiAgO1xuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyh0cnVlLCB0aGlzLmFwcGVhclN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgbmV4dFN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gICAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyhmYWxzZSwgbmV4dFN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VGltZW91dHMgPSBmdW5jdGlvbiBnZXRUaW1lb3V0cygpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMucHJvcHMudGltZW91dDtcbiAgICB2YXIgZXhpdCwgZW50ZXIsIGFwcGVhcjtcbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7IC8vIFRPRE86IHJlbW92ZSBmYWxsYmFjayBmb3IgbmV4dCBtYWpvclxuXG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhciAhPT0gdW5kZWZpbmVkID8gdGltZW91dC5hcHBlYXIgOiBlbnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIGVudGVyOiBlbnRlcixcbiAgICAgIGFwcGVhcjogYXBwZWFyXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gdXBkYXRlU3RhdHVzKG1vdW50aW5nLCBuZXh0U3RhdHVzKSB7XG4gICAgaWYgKG1vdW50aW5nID09PSB2b2lkIDApIHtcbiAgICAgIG1vdW50aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0IHx8IHRoaXMucHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3B1bGwvNzQ5XG4gICAgICAgICAgLy8gV2l0aCB1bm1vdW50T25FeGl0IG9yIG1vdW50T25FbnRlciwgdGhlIGVudGVyIGFuaW1hdGlvbiBzaG91bGQgaGFwcGVuIGF0IHRoZSB0cmFuc2l0aW9uIGJldHdlZW4gYGV4aXRlZGAgYW5kIGBlbnRlcmluZ2AuXG4gICAgICAgICAgLy8gVG8gbWFrZSB0aGUgYW5pbWF0aW9uIGhhcHBlbiwgIHdlIGhhdmUgdG8gc2VwYXJhdGUgZWFjaCByZW5kZXJpbmcgYW5kIGF2b2lkIGJlaW5nIHByb2Nlc3NlZCBhcyBiYXRjaGVkLlxuXG4gICAgICAgICAgaWYgKG5vZGUpIGZvcmNlUmVmbG93KG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IGZ1bmN0aW9uIChwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwcm9wVmFsdWVba2V5XTtcbiAgICAgIHJldHVybiBQcm9wVHlwZXMuaW5zdGFuY2VPZih2YWx1ZSAmJiAnb3duZXJEb2N1bWVudCcgaW4gdmFsdWUgPyB2YWx1ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LkVsZW1lbnQgOiBFbGVtZW50KShwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KTtcbiAgICB9XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2UodCwgbykge1xuICB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLCB0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHQsIHNldFByb3RvdHlwZU9mKHQsIG8pO1xufVxuZXhwb3J0IHsgX2luaGVyaXRzTG9vc2UgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHIsIGUpIHtcbiAgaWYgKG51bGwgPT0gcikgcmV0dXJuIHt9O1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBuIGluIHIpIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsIG4pKSB7XG4gICAgaWYgKGUuaW5jbHVkZXMobikpIGNvbnRpbnVlO1xuICAgIHRbbl0gPSByW25dO1xuICB9XG4gIHJldHVybiB0O1xufVxuZXhwb3J0IHsgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbnZhciBfZXhjbHVkZWQgPSBbXCJ0YWdcIiwgXCJob3Jpem9udGFsXCIsIFwiaXNPcGVuXCIsIFwiY2xhc3NOYW1lXCIsIFwibmF2YmFyXCIsIFwiY3NzTW9kdWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJpbm5lclJlZlwiXTtcbnZhciBfdHJhbnNpdGlvblN0YXR1c1RvQ2w7XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB7IG1hcFRvQ3NzTW9kdWxlcywgb21pdCwgcGljaywgVHJhbnNpdGlvblRpbWVvdXRzLCBUcmFuc2l0aW9uUHJvcFR5cGVLZXlzLCBUcmFuc2l0aW9uU3RhdHVzZXMsIHRhZ1Byb3BUeXBlIH0gZnJvbSAnLi91dGlscyc7XG52YXIgcHJvcFR5cGVzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBUcmFuc2l0aW9uLnByb3BUeXBlcyksIHt9LCB7XG4gIC8qKiBNYWtlIGNvbnRlbnQgYW5pbWF0aW9uIGFwcGVhciBob3Jpem9udGFsbHkgKi9cbiAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKiBTZXQgaWYgQ29sbGFwc2UgaXMgb3BlbiBvciBjbG9zZWQgKi9cbiAgaXNPcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKSwgUHJvcFR5cGVzLm5vZGVdKSxcbiAgLyoqIFNldCBhIGN1c3RvbSBlbGVtZW50IGZvciB0aGlzIGNvbXBvbmVudCAqL1xuICB0YWc6IHRhZ1Byb3BUeXBlLFxuICAvKiogQWRkIGN1c3RvbSBjbGFzcyAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5ub2RlLFxuICBuYXZiYXI6IFByb3BUeXBlcy5ib29sLFxuICAvKiogQ2hhbmdlIHVuZGVybHlpbmcgY29tcG9uZW50J3MgQ1NTIGJhc2UgY2xhc3MgbmFtZSAqL1xuICBjc3NNb2R1bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGlubmVyUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn0pO1xudmFyIGRlZmF1bHRQcm9wcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMpLCB7fSwge1xuICBob3Jpem9udGFsOiBmYWxzZSxcbiAgaXNPcGVuOiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIHRhZzogJ2RpdicsXG4gIHRpbWVvdXQ6IFRyYW5zaXRpb25UaW1lb3V0cy5Db2xsYXBzZVxufSk7XG52YXIgdHJhbnNpdGlvblN0YXR1c1RvQ2xhc3NIYXNoID0gKF90cmFuc2l0aW9uU3RhdHVzVG9DbCA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3RyYW5zaXRpb25TdGF0dXNUb0NsLCBUcmFuc2l0aW9uU3RhdHVzZXMuRU5URVJJTkcsICdjb2xsYXBzaW5nJyksIF9kZWZpbmVQcm9wZXJ0eShfdHJhbnNpdGlvblN0YXR1c1RvQ2wsIFRyYW5zaXRpb25TdGF0dXNlcy5FTlRFUkVELCAnY29sbGFwc2Ugc2hvdycpLCBfZGVmaW5lUHJvcGVydHkoX3RyYW5zaXRpb25TdGF0dXNUb0NsLCBUcmFuc2l0aW9uU3RhdHVzZXMuRVhJVElORywgJ2NvbGxhcHNpbmcnKSwgX2RlZmluZVByb3BlcnR5KF90cmFuc2l0aW9uU3RhdHVzVG9DbCwgVHJhbnNpdGlvblN0YXR1c2VzLkVYSVRFRCwgJ2NvbGxhcHNlJyksIF90cmFuc2l0aW9uU3RhdHVzVG9DbCk7XG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uQ2xhc3Moc3RhdHVzKSB7XG4gIHJldHVybiB0cmFuc2l0aW9uU3RhdHVzVG9DbGFzc0hhc2hbc3RhdHVzXSB8fCAnY29sbGFwc2UnO1xufVxudmFyIENvbGxhcHNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDb2xsYXBzZSwgX0NvbXBvbmVudCk7XG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ29sbGFwc2UpO1xuICBmdW5jdGlvbiBDb2xsYXBzZShwcm9wcykge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sbGFwc2UpO1xuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZGltZW5zaW9uOiBudWxsXG4gICAgfTtcbiAgICBfdGhpcy5ub2RlUmVmID0gcHJvcHMuaW5uZXJSZWYgfHwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpO1xuICAgIFsnb25FbnRlcmluZycsICdvbkVudGVyZWQnLCAnb25FeGl0JywgJ29uRXhpdGluZycsICdvbkV4aXRlZCddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzW25hbWVdID0gX3RoaXNbbmFtZV0uYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhDb2xsYXBzZSwgW3tcbiAgICBrZXk6IFwib25FbnRlcmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkVudGVyaW5nKF8sIGlzQXBwZWFyaW5nKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0Tm9kZSgpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRpbWVuc2lvbjogdGhpcy5nZXREaW1lbnNpb24obm9kZSlcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wcm9wcy5vbkVudGVyaW5nKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25FbnRlcmVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uRW50ZXJlZChfLCBpc0FwcGVhcmluZykge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLmdldE5vZGUoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkaW1lbnNpb246IG51bGxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wcm9wcy5vbkVudGVyZWQobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbkV4aXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25FeGl0KCkge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLmdldE5vZGUoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkaW1lbnNpb246IHRoaXMuZ2V0RGltZW5zaW9uKG5vZGUpXG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbkV4aXRpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25FeGl0aW5nKCkge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLmdldE5vZGUoKTtcbiAgICAgIC8vIGdldHRpbmcgdGhpcyB2YXJpYWJsZSB0cmlnZ2VycyBhIHJlZmxvd1xuICAgICAgdmFyIF91bnVzZWQgPSB0aGlzLmdldERpbWVuc2lvbihub2RlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRpbWVuc2lvbjogMFxuICAgICAgfSk7XG4gICAgICB0aGlzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25FeGl0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25FeGl0ZWQoKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0Tm9kZSgpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRpbWVuc2lvbjogbnVsbFxuICAgICAgfSk7XG4gICAgICB0aGlzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXROb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5vZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlUmVmLmN1cnJlbnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldERpbWVuc2lvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREaW1lbnNpb24obm9kZSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaG9yaXpvbnRhbCA/IG5vZGUuc2Nyb2xsV2lkdGggOiBub2RlLnNjcm9sbEhlaWdodDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgVGFnID0gX3RoaXMkcHJvcHMudGFnLFxuICAgICAgICBob3Jpem9udGFsID0gX3RoaXMkcHJvcHMuaG9yaXpvbnRhbCxcbiAgICAgICAgaXNPcGVuID0gX3RoaXMkcHJvcHMuaXNPcGVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIG5hdmJhciA9IF90aGlzJHByb3BzLm5hdmJhcixcbiAgICAgICAgY3NzTW9kdWxlID0gX3RoaXMkcHJvcHMuY3NzTW9kdWxlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmLFxuICAgICAgICBvdGhlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzLCBfZXhjbHVkZWQpO1xuICAgICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuc3RhdGUuZGltZW5zaW9uO1xuICAgICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9IHBpY2sob3RoZXJQcm9wcywgVHJhbnNpdGlvblByb3BUeXBlS2V5cyk7XG4gICAgICB2YXIgY2hpbGRQcm9wcyA9IG9taXQob3RoZXJQcm9wcywgVHJhbnNpdGlvblByb3BUeXBlS2V5cyk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe30sIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgICBcImluXCI6IGlzT3BlbixcbiAgICAgICAgbm9kZVJlZjogdGhpcy5ub2RlUmVmLFxuICAgICAgICBvbkVudGVyaW5nOiB0aGlzLm9uRW50ZXJpbmcsXG4gICAgICAgIG9uRW50ZXJlZDogdGhpcy5vbkVudGVyZWQsXG4gICAgICAgIG9uRXhpdDogdGhpcy5vbkV4aXQsXG4gICAgICAgIG9uRXhpdGluZzogdGhpcy5vbkV4aXRpbmcsXG4gICAgICAgIG9uRXhpdGVkOiB0aGlzLm9uRXhpdGVkXG4gICAgICB9KSwgZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICB2YXIgY29sbGFwc2VDbGFzcyA9IGdldFRyYW5zaXRpb25DbGFzcyhzdGF0dXMpO1xuICAgICAgICB2YXIgY2xhc3NlcyA9IG1hcFRvQ3NzTW9kdWxlcyhjbGFzc05hbWVzKGNsYXNzTmFtZSwgaG9yaXpvbnRhbCAmJiAnY29sbGFwc2UtaG9yaXpvbnRhbCcsIGNvbGxhcHNlQ2xhc3MsIG5hdmJhciAmJiAnbmF2YmFyLWNvbGxhcHNlJyksIGNzc01vZHVsZSk7XG4gICAgICAgIHZhciBzdHlsZSA9IGRpbWVuc2lvbiA9PT0gbnVsbCA/IG51bGwgOiBfZGVmaW5lUHJvcGVydHkoe30sIGhvcml6b250YWwgPyAnd2lkdGgnIDogJ2hlaWdodCcsIGRpbWVuc2lvbik7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWcsIF9leHRlbmRzKHt9LCBjaGlsZFByb3BzLCB7XG4gICAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY2hpbGRQcm9wcy5zdHlsZSksIHN0eWxlKSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgICAgcmVmOiBfdGhpczIubm9kZVJlZlxuICAgICAgICB9KSwgY2hpbGRyZW4pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBDb2xsYXBzZTtcbn0oQ29tcG9uZW50KTtcbkNvbGxhcHNlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNvbGxhcHNlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IENvbGxhcHNlOyIsInZhciBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjc3NNb2R1bGVcIiwgXCJhY3RpdmVcIiwgXCJ0YWdcIl07XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IG1hcFRvQ3NzTW9kdWxlcywgdGFnUHJvcFR5cGUgfSBmcm9tICcuL3V0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKiBBZGQgYWN0aXZlIGNsYXNzIHRvIGVsZW1lbnQgKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIEFkZCBjdXN0b20gY2xhc3MgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogQ2hhbmdlIHVuZGVybHlpbmcgY29tcG9uZW50J3MgQ1NTIGJhc2UgY2xhc3MgbmFtZSAqL1xuICBjc3NNb2R1bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKiBTZXQgYSBjdXN0b20gZWxlbWVudCBmb3IgdGhpcyBjb21wb25lbnQgKi9cbiAgdGFnOiB0YWdQcm9wVHlwZVxufTtcbmZ1bmN0aW9uIE5hdkl0ZW0ocHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICBjc3NNb2R1bGUgPSBwcm9wcy5jc3NNb2R1bGUsXG4gICAgYWN0aXZlID0gcHJvcHMuYWN0aXZlLFxuICAgIF9wcm9wcyR0YWcgPSBwcm9wcy50YWcsXG4gICAgVGFnID0gX3Byb3BzJHRhZyA9PT0gdm9pZCAwID8gJ2xpJyA6IF9wcm9wcyR0YWcsXG4gICAgYXR0cmlidXRlcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgdmFyIGNsYXNzZXMgPSBtYXBUb0Nzc01vZHVsZXMoY2xhc3NOYW1lcyhjbGFzc05hbWUsICduYXYtaXRlbScsIGFjdGl2ZSA/ICdhY3RpdmUnIDogZmFsc2UpLCBjc3NNb2R1bGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSk7XG59XG5OYXZJdGVtLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbmV4cG9ydCBkZWZhdWx0IE5hdkl0ZW07IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIF90eXBlb2Yob2JqKTsgfVxudmFyIF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNzc01vZHVsZVwiLCBcImFjdGl2ZVwiLCBcInRhZ1wiLCBcImlubmVyUmVmXCJdO1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBtYXBUb0Nzc01vZHVsZXMsIHRhZ1Byb3BUeXBlIH0gZnJvbSAnLi91dGlscyc7XG52YXIgcHJvcFR5cGVzID0ge1xuICAvKiogQWRkIGFjdGl2ZSBjbGFzcyB0byBOYXZMaW5rICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKiBBZGQgY3VzdG9tIGNsYXNzICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIENoYW5nZSB1bmRlcmx5aW5nIGNvbXBvbmVudCdzIENTUyBiYXNlIGNsYXNzIG5hbWUgKi9cbiAgY3NzTW9kdWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKiogRGlzYWJsZSB0aGUgbGluayAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGhyZWY6IFByb3BUeXBlcy5hbnksXG4gIGlubmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKiogRnVuY3Rpb24gdG8gYmUgdHJpZ2dlcmVkIG9uIGNsaWNrICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKiogU2V0IGEgY3VzdG9tIGVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50ICovXG4gIHRhZzogdGFnUHJvcFR5cGVcbn07XG52YXIgTmF2TGluayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTmF2TGluaywgX1JlYWN0JENvbXBvbmVudCk7XG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTmF2TGluayk7XG4gIGZ1bmN0aW9uIE5hdkxpbmsocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5hdkxpbmspO1xuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuICAgIF90aGlzLm9uQ2xpY2sgPSBfdGhpcy5vbkNsaWNrLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfY3JlYXRlQ2xhc3MoTmF2TGluaywgW3tcbiAgICBrZXk6IFwib25DbGlja1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHJvcHMuaHJlZiA9PT0gJyMnKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjc3NNb2R1bGUgPSBfdGhpcyRwcm9wcy5jc3NNb2R1bGUsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkdGFnID0gX3RoaXMkcHJvcHMudGFnLFxuICAgICAgICBUYWcgPSBfdGhpcyRwcm9wcyR0YWcgPT09IHZvaWQgMCA/ICdhJyA6IF90aGlzJHByb3BzJHRhZyxcbiAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wcy5pbm5lclJlZixcbiAgICAgICAgYXR0cmlidXRlcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgICAgIHZhciBjbGFzc2VzID0gbWFwVG9Dc3NNb2R1bGVzKGNsYXNzTmFtZXMoY2xhc3NOYW1lLCAnbmF2LWxpbmsnLCB7XG4gICAgICAgIGRpc2FibGVkOiBhdHRyaWJ1dGVzLmRpc2FibGVkLFxuICAgICAgICBhY3RpdmU6IGFjdGl2ZVxuICAgICAgfSksIGNzc01vZHVsZSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywge1xuICAgICAgICByZWY6IGlubmVyUmVmLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQ2xpY2ssXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTmF2TGluaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcbk5hdkxpbmsucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgTmF2TGluazsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7XHJcbiAgQ29sbGFwc2UsXHJcbiAgRHJvcGRvd25JdGVtLFxyXG4gIE5hdmJhcixcclxuICBOYXZiYXJCcmFuZCxcclxuICBOYXZiYXJUb2dnbGVyLFxyXG4gIE5hdkl0ZW0sXHJcbiAgTmF2TGluayxcclxufSBmcm9tIFwicmVhY3RzdHJhcFwiO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmNvbnN0IGVudiA9IHByb2Nlc3MuZW52LlJFQUNUX0FQUF9FTlZJUk9OTUVOVDtcclxuXHJcbmNsYXNzIE5hdk1lbnUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9IE5hdk1lbnUubmFtZTtcclxuXHJcbiAgc3RhdGUgPSB7XHJcbiAgICBjb2xsYXBzZWQ6IHRydWUsXHJcbiAgfTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IHt9IHwgUmVhZG9ubHk8e30+KSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgdGhpcy50b2dnbGVOYXZiYXIgPSB0aGlzLnRvZ2dsZU5hdmJhci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZU5hdmJhcigpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBjb2xsYXBzZWQ6ICF0aGlzLnN0YXRlLmNvbGxhcHNlZCxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc29sZS5sb2coXCJzaG93IG5hdlwiKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxoZWFkZXI+XHJcbiAgICAgICAgPE5hdmJhclxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwibmF2YmFyLWV4cGFuZC1zbSBuYXZiYXItdG9nZ2xlYWJsZS1zbSBib3JkZXItYm90dG9tIGJveC1zaGFkb3cgbWItM1wiXHJcbiAgICAgICAgICBjb2xvcj1cImJsYWNrXCJcclxuICAgICAgICAgIGNvbnRhaW5lclxyXG4gICAgICAgICAgZGFya1xyXG4gICAgICAgID5cclxuICAgICAgICAgIDxOYXZiYXJCcmFuZCB0YWc9e0xpbmt9IHRvPVwiL1wiPlxyXG4gICAgICAgICAgICBMaXN0TWF0ZVxyXG4gICAgICAgICAgPC9OYXZiYXJCcmFuZD5cclxuICAgICAgICAgIDxOYXZiYXJUb2dnbGVyIG9uQ2xpY2s9e3RoaXMudG9nZ2xlTmF2YmFyfSBjbGFzc05hbWU9XCJtci0yXCIgLz5cclxuICAgICAgICAgIDxDb2xsYXBzZVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJkLXNtLWlubGluZS1mbGV4IGZsZXgtc20tcm93LXJldmVyc2VcIlxyXG4gICAgICAgICAgICBpc09wZW49eyF0aGlzLnN0YXRlLmNvbGxhcHNlZH1cclxuICAgICAgICAgICAgbmF2YmFyXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJuYXZiYXItbmF2IGFsaWduLWl0ZW1zLWNlbnRlciBmbGV4LWdyb3dcIj5cclxuICAgICAgICAgICAgICA8TmF2SXRlbT5cclxuICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRhZz17TGlua30gY2xhc3NOYW1lPVwidGV4dC1saWdodFwiIHRvPVwiL1wiPlxyXG4gICAgICAgICAgICAgICAgICBIb21lXHJcbiAgICAgICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgPC9OYXZJdGVtPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPC9Db2xsYXBzZT5cclxuICAgICAgICA8L05hdmJhcj5cclxuICAgICAgPC9oZWFkZXI+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBOYXZNZW51OyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJ3JlYWN0c3RyYXAnO1xyXG5pbXBvcnQgTmF2TWVudSBmcm9tICcuL05hdk1lbnUnO1xyXG5cclxuY2xhc3MgTGF5b3V0IGV4dGVuZHMgQ29tcG9uZW50PExheW91dFByb3BzPiB7XHJcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gTGF5b3V0Lm5hbWU7XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDw+XHJcbiAgICAgICAgPE5hdk1lbnUgLz5cclxuICAgICAgICA8Q29udGFpbmVyPnt0aGlzLnByb3BzLmNoaWxkcmVufTwvQ29udGFpbmVyPlxyXG4gICAgICA8Lz5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMYXlvdXQ7XHJcblxyXG50eXBlIExheW91dFByb3BzID0gTGF5b3V0Q29udGFpbmVyUHJvcHM7XHJcblxyXG5pbnRlcmZhY2UgTGF5b3V0Q29udGFpbmVyUHJvcHMge1xyXG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBSb3V0ZXMsIFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCBIb21lIGZyb20gJy4uL2hvbWUvSG9tZSc7XHJcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi9MYXlvdXQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBzdGF0aWMgZGlzcGxheU5hbWUgPSBBcHAubmFtZTtcclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPExheW91dD5cclxuICAgICAgICA8Um91dGVzPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgZWxlbWVudD17PEhvbWUgLz59IC8+XHJcbiAgICAgICAgPC9Sb3V0ZXM+XHJcbiAgICAgIDwvTGF5b3V0PlxyXG4gICAgKTtcclxuICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgXCJib290c3RyYXAvZGlzdC9jc3MvYm9vdHN0cmFwLmNzc1wiO1xyXG5pbXBvcnQge2NyZWF0ZVJvb3R9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xyXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCAnLi9pbmRleC5jc3MnO1xyXG5pbXBvcnQgXCJib290c3RyYXAvZGlzdC9jc3MvYm9vdHN0cmFwLmNzc1wiO1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcclxuaW1wb3J0IHsgQXV0aDBQcm92aWRlciB9IGZyb20gJ0BhdXRoMC9hdXRoMC1yZWFjdCc7XHJcblxyXG5jb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcC1yb290XCIpITtcclxuY29uc3Qgcm9vdCA9IGNyZWF0ZVJvb3QoY29udGFpbmVyKTtcclxuY29uc3QgZG9tYWluID0gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0FVVEgwX0RPTUFJTiBhcyBzdHJpbmc7XHJcbmNvbnN0IGNsaWVudElkID0gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0FVVEgwX0NMSUVOVElEIGFzIHN0cmluZztcclxucm9vdC5yZW5kZXIoXHJcbiAgPEF1dGgwUHJvdmlkZXJcclxuICAgIGRvbWFpbiA9IHtkb21haW59XHJcbiAgICBjbGllbnRJZCA9IHtjbGllbnRJZH1cclxuICAgIGF1dGhvcml6YXRpb25QYXJhbXM9e3tyZWRpcmVjdF91cmk6IFwiaHR0cDovL2xvY2FsaG9zdDo2OTU1L1wifX0+XHJcbiAgPFJvdXRlcj5cclxuICAgIDxBcHAgLz5cclxuICA8L1JvdXRlcj5cclxuICA8L0F1dGgwUHJvdmlkZXI+XHJcbik7Il0sIm5hbWVzIjpbImxlYWZQcm90b3R5cGVzIiwiZ2V0UHJvdG8iLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2hpbSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJlcnIiLCJFcnJvciIsIm5hbWUiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJiaWdpbnQiLCJib29sIiwiZnVuYyIsIm51bWJlciIsIm9iamVjdCIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50IiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwibm9kZSIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhYSIsImNhIiwicCIsImEiLCJiIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsImRhIiwiU2V0IiwiZWEiLCJmYSIsImhhIiwiYWRkIiwiaWEiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJqYSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5Iiwia2EiLCJsYSIsIm1hIiwidiIsImQiLCJlIiwiZiIsImciLCJ0aGlzIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInR5cGUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwieiIsInNwbGl0IiwiZm9yRWFjaCIsInRvTG93ZXJDYXNlIiwicmEiLCJzYSIsInRvVXBwZXJDYXNlIiwidGEiLCJzbGljZSIsInBhIiwiaXNOYU4iLCJxYSIsImNhbGwiLCJ0ZXN0Iiwib2EiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInJlcGxhY2UiLCJ4bGlua0hyZWYiLCJ1YSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidmEiLCJTeW1ib2wiLCJmb3IiLCJ3YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIml0ZXJhdG9yIiwiS2EiLCJMYSIsIkEiLCJhc3NpZ24iLCJNYSIsInN0YWNrIiwidHJpbSIsIm1hdGNoIiwiTmEiLCJPYSIsInByZXBhcmVTdGFja1RyYWNlIiwiZGVmaW5lUHJvcGVydHkiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwibCIsImgiLCJrIiwiZGlzcGxheU5hbWUiLCJpbmNsdWRlcyIsIlBhIiwidGFnIiwicmVuZGVyIiwiUWEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwidmFsdWUiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsImFiIiwiYmIiLCJjYiIsImRiIiwib3duZXJEb2N1bWVudCIsImViIiwiQXJyYXkiLCJpc0FycmF5IiwiZmIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwidG9TdHJpbmciLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicGIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWIiLCJyYiIsInNiIiwic3R5bGUiLCJpbmRleE9mIiwic2V0UHJvcGVydHkiLCJrZXlzIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwic291cmNlIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwicHVzaCIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk5iIiwiYXBwbHkiLCJtIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiTWF0aCIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJDIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiTWFwIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsImRpc3BhdGNoRXZlbnQiLCJzaGlmdCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiaWQiLCJVYyIsInN0b3BQcm9wYWdhdGlvbiIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIkxkIiwiZGF0YSIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsImtleSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNvZGUiLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIllkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTmUiLCJjb250ZW50RWRpdGFibGUiLCJPZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJYZSIsIlllIiwiWmUiLCJhbmltYXRpb24iLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJsZiIsIm1mIiwiY29uY2F0IiwibmYiLCJVYiIsImluc3RhbmNlIiwibGlzdGVuZXIiLCJEIiwib2YiLCJoYXMiLCJwZiIsInFmIiwicmYiLCJyYW5kb20iLCJzZiIsImJpbmQiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIm4iLCJ0IiwiSiIsIngiLCJ1IiwidyIsIkYiLCJ0ZiIsInVmIiwicGFyZW50V2luZG93IiwidmYiLCJ3ZiIsIm5hIiwieGEiLCIkYSIsImJhIiwiamUiLCJjaGFyIiwia2UiLCJ1bnNoaWZ0IiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIl9faHRtbCIsIkZmIiwic2V0VGltZW91dCIsIkdmIiwiY2xlYXJUaW1lb3V0IiwiSGYiLCJQcm9taXNlIiwiSmYiLCJxdWV1ZU1pY3JvdGFzayIsInJlc29sdmUiLCJ0aGVuIiwiY2F0Y2giLCJJZiIsIktmIiwiTGYiLCJNZiIsInByZXZpb3VzU2libGluZyIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJFIiwiRyIsIlZmIiwiSCIsIldmIiwiWGYiLCJZZiIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlpmIiwiY2hpbGRDb250ZXh0VHlwZXMiLCIkZiIsImFnIiwiYmciLCJnZXRDaGlsZENvbnRleHQiLCJjZyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiSSIsInpnIiwiQWciLCJCZyIsImRlbGV0aW9ucyIsIkNnIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIkRnIiwibW9kZSIsIkVnIiwiRmciLCJHZyIsIm1lbW9pemVkUHJvcHMiLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInJlZnMiLCJNZyIsImpvaW4iLCJOZyIsIk9nIiwiaW5kZXgiLCJQZyIsIlFnIiwiUmciLCJpbXBsZW1lbnRhdGlvbiIsIlNnIiwiVGciLCJxIiwiciIsInkiLCJuZXh0IiwiZG9uZSIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJfY3VycmVudFZhbHVlIiwiYmgiLCJjaGlsZExhbmVzIiwiY2giLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsImRoIiwiZWgiLCJjb250ZXh0IiwibWVtb2l6ZWRWYWx1ZSIsImZoIiwiZ2giLCJoaCIsImludGVybGVhdmVkIiwiaWgiLCJqaCIsImtoIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwibGgiLCJtaCIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJuaCIsIksiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwidGFnTmFtZSIsInpoIiwiQWgiLCJCaCIsIkwiLCJDaCIsInJldmVhbE9yZGVyIiwiRGgiLCJFaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiRmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiR2giLCJIaCIsIk0iLCJOIiwiTyIsIkloIiwiSmgiLCJLaCIsIkxoIiwiUCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIlVoIiwiVmgiLCJXaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiZ2V0U25hcHNob3QiLCJiaSIsImNpIiwiUSIsImRpIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsImVpIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJjcmVhdGUiLCJkZXN0cm95IiwiZGVwcyIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIlIiLCJCaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJDaSIsImRlZmF1bHRQcm9wcyIsIkRpIiwiRWkiLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiRmkiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkdpIiwiY29udGV4dFR5cGUiLCJzdGF0ZSIsInVwZGF0ZXIiLCJIaSIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIklpIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJKaSIsIm1lc3NhZ2UiLCJkaWdlc3QiLCJLaSIsIkxpIiwiY29uc29sZSIsImVycm9yIiwiTWkiLCJXZWFrTWFwIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsIlJpIiwiY29tcG9uZW50U3RhY2siLCJTaSIsInBpbmdDYWNoZSIsIlRpIiwiVWkiLCJWaSIsIldpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJYaSIsIllpIiwiWmkiLCIkaSIsImFqIiwiY29tcGFyZSIsImJqIiwiY2oiLCJkaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJpaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImpqIiwia2oiLCJwZW5kaW5nQ29udGV4dCIsImxqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJtaiIsIm5qIiwib2oiLCJmYWxsYmFjayIsInBqIiwicWoiLCJzaiIsImRhdGFzZXQiLCJkZ3N0IiwidGoiLCJ1aiIsIl9yZWFjdFJldHJ5IiwicmoiLCJzdWJ0cmVlRmxhZ3MiLCJ2aiIsIndqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwieGoiLCJEaiIsIlMiLCJFaiIsIkZqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsImNyZWF0ZVRleHROb2RlIiwiVCIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiVSIsIktqIiwiV2Vha1NldCIsIlYiLCJMaiIsIlciLCJNaiIsIk5qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiV2oiLCJYIiwiWGoiLCJZaiIsIlpqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJpc0hpZGRlbiIsImZrIiwiZ2siLCJkaXNwbGF5IiwiaGsiLCJpayIsImprIiwia2siLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInNyYyIsIlZrIiwibGsiLCJjZWlsIiwibWsiLCJuayIsIm9rIiwiWSIsIloiLCJwayIsInFrIiwicmsiLCJzayIsInRrIiwiSW5maW5pdHkiLCJ1ayIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsIndjIiwiY2FsbGJhY2tQcmlvcml0eSIsImlnIiwiRWsiLCJGayIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJMayIsIk1rIiwiTmsiLCJPayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJQayIsInRpbWVvdXRIYW5kbGUiLCJRayIsIlJrIiwiU2siLCJUayIsIlVrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiT2oiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiV2siLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJYayIsIllrIiwiJGsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYWwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiYmwiLCJjYWNoZSIsInBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMiLCJkbCIsImVsIiwiZmwiLCJnbCIsImhsIiwiaWwiLCJ5aiIsIlprIiwia2wiLCJyZXBvcnRFcnJvciIsImxsIiwiX2ludGVybmFsUm9vdCIsIm1sIiwibmwiLCJvbCIsInBsIiwicmwiLCJxbCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsInNwbGljZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybSIsInNsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidGwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInVsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInZsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJjbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJtYXAiLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiQ29tcG9uZW50IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJhY3QiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwicG9wIiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJuYXZpZ2F0b3IiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImkiLCJhcmciLCJhcHBlbmRDbGFzcyIsInBhcnNlVmFsdWUiLCJuZXdDbGFzcyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmoiLCJucyIsImRlZiIsImdldE93blByb3BlcnR5TmFtZXMiLCJkZWZpbml0aW9uIiwibyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJ0b1N0cmluZ1RhZyIsIkFjdGlvbiIsIl9leHRlbmRzIiwiUG9wU3RhdGVFdmVudFR5cGUiLCJpbnZhcmlhbnQiLCJ3YXJuaW5nIiwiY29uZCIsIndhcm4iLCJnZXRIaXN0b3J5U3RhdGUiLCJ1c3IiLCJpZHgiLCJjcmVhdGVMb2NhdGlvbiIsInRvIiwicGF0aG5hbWUiLCJoYXNoIiwicGFyc2VQYXRoIiwic3Vic3RyIiwiX3JlZiIsInBhdGgiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJSZXN1bHRUeXBlIiwibWF0Y2hSb3V0ZXMiLCJyb3V0ZXMiLCJsb2NhdGlvbkFyZyIsImJhc2VuYW1lIiwiYWxsb3dQYXJ0aWFsIiwiYnJhbmNoZXMiLCJmbGF0dGVuUm91dGVzIiwic29ydCIsInNjb3JlIiwic2libGluZ3MiLCJldmVyeSIsImNvbXBhcmVJbmRleGVzIiwicm91dGVzTWV0YSIsImNoaWxkcmVuSW5kZXgiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoZXMiLCJkZWNvZGVkIiwiZGVjb2RlUGF0aCIsIm1hdGNoUm91dGVCcmFuY2giLCJtYXRjaFJvdXRlc0ltcGwiLCJwYXJlbnRzTWV0YSIsInBhcmVudFBhdGgiLCJmbGF0dGVuUm91dGUiLCJyb3V0ZSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJzdGFydHNXaXRoIiwiY29tcHV0ZVNjb3JlIiwiX3JvdXRlJHBhdGgiLCJleHBsb2RlZCIsImV4cGxvZGVPcHRpb25hbFNlZ21lbnRzIiwic2VnbWVudHMiLCJmaXJzdCIsInJlc3QiLCJpc09wdGlvbmFsIiwiZW5kc1dpdGgiLCJyZXF1aXJlZCIsInJlc3RFeHBsb2RlZCIsInJlc3VsdCIsInN1YnBhdGgiLCJwYXJhbVJlIiwiZHluYW1pY1NlZ21lbnRWYWx1ZSIsImluZGV4Um91dGVWYWx1ZSIsImVtcHR5U2VnbWVudFZhbHVlIiwic3RhdGljU2VnbWVudFZhbHVlIiwic3BsYXRQZW5hbHR5IiwiaXNTcGxhdCIsInMiLCJpbml0aWFsU2NvcmUiLCJzb21lIiwiZmlsdGVyIiwicmVkdWNlIiwic2VnbWVudCIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJyZW1haW5pbmdQYXRobmFtZSIsInBhcmFtcyIsInBhdGhuYW1lQmFzZSIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwicGF0dGVybiIsIm1hdGNoZXIiLCJjb21waWxlZFBhcmFtcyIsInJlZ2V4cFNvdXJjZSIsIl8iLCJwYXJhbU5hbWUiLCJSZWdFeHAiLCJjb21waWxlUGF0aCIsImNhcHR1cmVHcm91cHMiLCJzcGxhdFZhbHVlIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3RhcnRJbmRleCIsIm5leHRDaGFyIiwiZ2V0SW52YWxpZFBhdGhFcnJvciIsImZpZWxkIiwiZGVzdCIsImdldFJlc29sdmVUb01hdGNoZXMiLCJ2N19yZWxhdGl2ZVNwbGF0UGF0aCIsInBhdGhNYXRjaGVzIiwiZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMiLCJ0b0FyZyIsInJvdXRlUGF0aG5hbWVzIiwibG9jYXRpb25QYXRobmFtZSIsImlzUGF0aFJlbGF0aXZlIiwiZnJvbSIsImlzRW1wdHlQYXRoIiwidG9QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJmcm9tUGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwicmVzb2x2ZVBhdGgiLCJoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2giLCJoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCIsInBhdGhzIiwidmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIiLCJ2YWxpZFJlcXVlc3RNZXRob2RzQXJyIiwiRGF0YVJvdXRlckNvbnRleHQiLCJEYXRhUm91dGVyU3RhdGVDb250ZXh0IiwiTmF2aWdhdGlvbkNvbnRleHQiLCJMb2NhdGlvbkNvbnRleHQiLCJSb3V0ZUNvbnRleHQiLCJvdXRsZXQiLCJpc0RhdGFSb3V0ZSIsIlJvdXRlRXJyb3JDb250ZXh0IiwidXNlSW5Sb3V0ZXJDb250ZXh0IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInN0YXRpYyIsInJvdXRlciIsImN0eCIsInVzZURhdGFSb3V0ZXJDb250ZXh0IiwiRGF0YVJvdXRlckhvb2siLCJVc2VOYXZpZ2F0ZVN0YWJsZSIsInVzZUN1cnJlbnRSb3V0ZUlkIiwiRGF0YVJvdXRlclN0YXRlSG9vayIsImFjdGl2ZVJlZiIsIm5hdmlnYXRlIiwiZnJvbVJvdXRlSWQiLCJ1c2VOYXZpZ2F0ZVN0YWJsZSIsImRhdGFSb3V0ZXJDb250ZXh0IiwiZnV0dXJlIiwicm91dGVQYXRobmFtZXNKc29uIiwiZ28iLCJwYXJzZSIsInJlbGF0aXZlIiwidXNlTmF2aWdhdGVVbnN0YWJsZSIsIl90ZW1wMiIsInVzZVJvdXRlc0ltcGwiLCJkYXRhUm91dGVyU3RhdGUiLCJwYXJlbnRNYXRjaGVzIiwicm91dGVNYXRjaCIsInBhcmVudFBhcmFtcyIsInBhcmVudFBhdGhuYW1lQmFzZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInBhcmVudFNlZ21lbnRzIiwicmVuZGVyZWRNYXRjaGVzIiwiX2RhdGFSb3V0ZXJTdGF0ZSIsIl9mdXR1cmUiLCJlcnJvcnMiLCJ2N19wYXJ0aWFsSHlkcmF0aW9uIiwiaW5pdGlhbGl6ZWQiLCJlcnJvckluZGV4IiwiZmluZEluZGV4IiwicmVuZGVyRmFsbGJhY2siLCJmYWxsYmFja0luZGV4IiwiSHlkcmF0ZUZhbGxiYWNrIiwiaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCIsImxvYWRlckRhdGEiLCJuZWVkc1RvUnVuTG9hZGVyIiwibG9hZGVyIiwicmVkdWNlUmlnaHQiLCJzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2siLCJlcnJvckVsZW1lbnQiLCJkZWZhdWx0RXJyb3JFbGVtZW50IiwiYWxyZWFkeVdhcm5lZCIsImdldENoaWxkcmVuIiwiUmVuZGVyZWRSb3V0ZSIsInJvdXRlQ29udGV4dCIsIkVycm9yQm91bmRhcnkiLCJSZW5kZXJFcnJvckJvdW5kYXJ5IiwicmV2YWxpZGF0aW9uIiwiY29tcG9uZW50IiwiX3JlbmRlck1hdGNoZXMiLCJlbmNvZGVMb2NhdGlvbiIsIm5hdmlnYXRpb25UeXBlIiwiUG9wIiwiRGVmYXVsdEVycm9yQ29tcG9uZW50IiwiX3N0YXRlJGVycm9ycyIsInVzZURhdGFSb3V0ZXJTdGF0ZSIsIlVzZVJvdXRlRXJyb3IiLCJyb3V0ZUlkIiwidXNlUm91dGVFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJpbnRlcm5hbCIsImlzUm91dGVFcnJvclJlc3BvbnNlIiwicHJlU3R5bGVzIiwicGFkZGluZyIsImJhY2tncm91bmRDb2xvciIsImZvbnRTdHlsZSIsInN1cGVyIiwiZXJyb3JJbmZvIiwic3RhdGljQ29udGV4dCIsIl9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIiwiaG9va05hbWUiLCJ1c2VSb3V0ZUNvbnRleHQiLCJ0aGlzUm91dGUiLCJSb3V0ZSIsIl9wcm9wcyIsIl9yZWY1IiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3RhdGljUHJvcCIsIm5hdmlnYXRpb25Db250ZXh0IiwibG9jYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsIlJvdXRlcyIsIl9yZWY2IiwiY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIiwidHJlZVBhdGgiLCJoYXNFcnJvckJvdW5kYXJ5Iiwic2hvdWxkUmV2YWxpZGF0ZSIsImhhbmRsZSIsIl9leGNsdWRlZCIsIl9fcmVhY3RSb3V0ZXJWZXJzaW9uIiwiaXNCcm93c2VyIiwiTGluayIsIl9yZWY3IiwiYWJzb2x1dGVIcmVmIiwicmVsb2FkRG9jdW1lbnQiLCJwcmV2ZW50U2Nyb2xsUmVzZXQiLCJ2aWV3VHJhbnNpdGlvbiIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiaXNFeHRlcm5hbCIsImN1cnJlbnRVcmwiLCJVUkwiLCJ0YXJnZXRVcmwiLCJwcm90b2NvbCIsIm9yaWdpbiIsIl90ZW1wIiwiam9pbmVkUGF0aG5hbWUiLCJjcmVhdGVIcmVmIiwidXNlSHJlZiIsImludGVybmFsT25DbGljayIsInJlcGxhY2VQcm9wIiwiaXNNb2RpZmllZEV2ZW50Iiwic2hvdWxkUHJvY2Vzc0xpbmtDbGljayIsInVzZUxpbmtDbGlja0hhbmRsZXIiLCJleHRlbmRTdGF0aWNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfX2Fzc2lnbiIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsInJlamVjdGVkIiwiX19nZW5lcmF0b3IiLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIm9wIiwiVHlwZUVycm9yIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJTdXBwcmVzc2VkRXJyb3IiLCJzZWxmIiwibG9ja2VkIiwiYWRkVG9Mb2NrZWQiLCJpc0xvY2tlZCIsImxvY2siLCJ1bmxvY2siLCJnZXRJbnN0YW5jZSIsInRocm93IiwiZ2V0SXRlbSIsImNsZWFyIiwibG9jYWxTdG9yYWdlIiwicmVtb3ZlSXRlbSIsInNldEl0ZW0iLCJrZXlTeW5jIiwiZ2V0SXRlbVN5bmMiLCJjbGVhclN5bmMiLCJyZW1vdmVJdGVtU3luYyIsInNldEl0ZW1TeW5jIiwiYWNxdWlyZWRJYXRTZXQiLCJzdG9yYWdlSGFuZGxlciIsImFjcXVpcmVMb2NrIiwicmVsZWFzZUxvY2siLCJyZWxlYXNlTG9ja19fcHJpdmF0ZV9fIiwid2FpdEZvclNvbWV0aGluZ1RvQ2hhbmdlIiwicmVmcmVzaExvY2tXaGlsZUFjcXVpcmVkIiwid2FpdGVycyIsImlhdCIsInRpbWVvdXRLZXkiLCJ0aW1lQWNxdWlyZWQiLCJ0aW1lUmVmcmVzaGVkIiwibG9ja0NvcnJlY3RvciIsInJlbW92ZUZyb21XYWl0aW5nIiwiYWRkVG9XYWl0aW5nIiwibWF4Iiwibm90aWZ5V2FpdGVycyIsInRpbWVvdXRJblNlY29uZHMiLCJlcnJvcl9kZXNjcmlwdGlvbiIsImZyb21QYXlsb2FkIiwiYXBwU3RhdGUiLCJwb3B1cCIsIm1mYV90b2tlbiIsImF1ZGllbmNlIiwic2NvcGUiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJVaW50OEFycmF5IiwiYnRvYSIsImNsaWVudElkIiwiVVJMU2VhcmNoUGFyYW1zIiwiY2xpZW50X2lkIiwiYXRvYiIsImNoYXJDb2RlQXQiLCJhc3luYyIsImZldGNoIiwianNvbiIsImF1dGgiLCJ0aW1lb3V0IiwiZmV0Y2hVcmwiLCJmZXRjaE9wdGlvbnMiLCJ1c2VGb3JtRGF0YSIsImNsb3NlIiwiQWJvcnRDb250cm9sbGVyIiwic2lnbmFsIiwicmFjZSIsImFib3J0IiwiZmluYWxseSIsImJhc2VVcmwiLCJhdXRoMENsaWVudCIsIm1ldGhvZCIsImhlYWRlcnMiLCJqIiwiQm9vbGVhbiIsInByZWZpeCIsInN1ZmZpeCIsInRvS2V5IiwiZnJvbUtleSIsImZyb21DYWNoZUVudHJ5IiwicmVtb3ZlIiwiYWxsS2V5cyIsImVuY2xvc2VkQ2FjaGUiLCJrZXlNYW5pZmVzdCIsIm5vd1Byb3ZpZGVyIiwic2V0SWRUb2tlbiIsImdldElkVG9rZW5DYWNoZUtleSIsImlkX3Rva2VuIiwiZGVjb2RlZFRva2VuIiwiZ2V0SWRUb2tlbiIsImdldENhY2hlS2V5cyIsIm1hdGNoRXhpc3RpbmdDYWNoZUtleSIsImV4cGlyZXNBdCIsInJlZnJlc2hfdG9rZW4iLCJ3cmFwQ2FjaGVFbnRyeSIsImV4cGlyZXNfaW4iLCJzdG9yYWdlIiwiY29va2llRG9tYWluIiwic3RvcmFnZUtleSIsInNhdmUiLCJkYXlzVW50aWxFeHBpcmUiLCJleHBpcmVzIiwic2V0TWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwidG9VVENTdHJpbmciLCJkb21haW4iLCJzZWN1cmUiLCJzYW1lU2l0ZSIsImNvb2tpZSIsImVuY29kZSIsImdldEFsbCIsInNlc3Npb25TdG9yYWdlIiwiQmxvYiIsImNyZWF0ZU9iamVjdFVSTCIsIldvcmtlciIsIm1hbmlmZXN0S2V5IiwiY3JlYXRlTWFuaWZlc3RLZXlGcm9tIiwiJCIsIm1lbW9yeSIsImxvY2Fsc3RvcmFnZSIsIm9wZW5VcmwiLCJvblJlZGlyZWN0IiwidXNlckNhY2hlIiwiZGVmYXVsdE9wdGlvbnMiLCJhdXRob3JpemF0aW9uUGFyYW1zIiwidXNlUmVmcmVzaFRva2Vuc0ZhbGxiYWNrIiwiX3JlbGVhc2VMb2NrT25QYWdlSGlkZSIsInN1YnRsZSIsImNhY2hlTG9jYXRpb24iLCJodHRwVGltZW91dE1zIiwiaHR0cFRpbWVvdXRJblNlY29uZHMiLCJjb29raWVTdG9yYWdlIiwibGVnYWN5U2FtZVNpdGVDb29raWUiLCJvcmdIaW50Q29va2llTmFtZSIsImlzQXV0aGVudGljYXRlZENvb2tpZU5hbWUiLCJzZXNzaW9uQ2hlY2tFeHBpcnlEYXlzIiwidXNlQ29va2llc0ZvclRyYW5zYWN0aW9ucyIsInVzZVJlZnJlc2hUb2tlbnMiLCJ0cmFuc2FjdGlvbk1hbmFnZXIiLCJjYWNoZU1hbmFnZXIiLCJkb21haW5VcmwiLCJ0b2tlbklzc3VlciIsImlzc3VlciIsIndvcmtlclVybCIsIndvcmtlciIsIl91cmwiLCJfYXV0aG9yaXplVXJsIiwiX3ZlcmlmeUlkVG9rZW4iLCJfX3JhdyIsImVuY29kZWQiLCJoZWFkZXIiLCJzaWduYXR1cmUiLCJjbGFpbXMiLCJ1c2VyIiwiaXNzIiwic3ViIiwiYWxnIiwiYXVkIiwiYXpwIiwibm9uY2UiLCJtYXhfYWdlIiwiYXV0aF90aW1lIiwiZXhwIiwibGVld2F5Iiwic2V0VVRDU2Vjb25kcyIsIm5iZiIsInBhcnNlSW50Iiwib3JnYW5pemF0aW9uIiwib3JnX2lkIiwib3JnX25hbWUiLCJfcHJvY2Vzc09yZ0hpbnQiLCJfcHJlcGFyZUF1dGhvcml6ZVVybCIsIlRleHRFbmNvZGVyIiwicmVzcG9uc2VfdHlwZSIsInJlc3BvbnNlX21vZGUiLCJyZWRpcmVjdF91cmkiLCJjb2RlX2NoYWxsZW5nZSIsImNvZGVfY2hhbGxlbmdlX21ldGhvZCIsImNvZGVfdmVyaWZpZXIiLCJsb2dpbldpdGhQb3B1cCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm9wZW4iLCJzZXRJbnRlcnZhbCIsImNsb3NlZCIsImNsZWFySW50ZXJ2YWwiLCJyZXNwb25zZSIsImF1dGhvcml6ZVRpbWVvdXRJblNlY29uZHMiLCJfcmVxdWVzdFRva2VuIiwiZ3JhbnRfdHlwZSIsIm5vbmNlSW4iLCJnZXRVc2VyIiwiX2dldElkVG9rZW5Gcm9tQ2FjaGUiLCJnZXRJZFRva2VuQ2xhaW1zIiwibG9naW5XaXRoUmVkaXJlY3QiLCJmcmFnbWVudCIsImhhbmRsZVJlZGlyZWN0Q2FsbGJhY2siLCJjaGVja1Nlc3Npb24iLCJnZXRUb2tlblNpbGVudGx5IiwiY2FjaGVNb2RlIiwiX2dldFRva2VuU2lsZW50bHkiLCJkZXRhaWxlZFJlc3BvbnNlIiwiYWNjZXNzX3Rva2VuIiwiX2dldEVudHJ5RnJvbUNhY2hlIiwiX2dldFRva2VuVXNpbmdSZWZyZXNoVG9rZW4iLCJfZ2V0VG9rZW5Gcm9tSUZyYW1lIiwib2F1dGhUb2tlblNjb3BlIiwiZ2V0VG9rZW5XaXRoUG9wdXAiLCJpc0F1dGhlbnRpY2F0ZWQiLCJfYnVpbGRMb2dvdXRVcmwiLCJsb2dvdXRQYXJhbXMiLCJmZWRlcmF0ZWQiLCJsb2dvdXQiLCJwcm9tcHQiLCJjcm9zc09yaWdpbklzb2xhdGVkIiwiX3NhdmVFbnRyeUluQ2FjaGUiLCJpbml0aWFsQXV0aFN0YXRlIiwiaXNMb2FkaW5nIiwic3R1YiIsImluaXRpYWxDb250ZXh0IiwiYnVpbGRBdXRob3JpemVVcmwiLCJidWlsZExvZ291dFVybCIsImdldEFjY2Vzc1Rva2VuU2lsZW50bHkiLCJnZXRBY2Nlc3NUb2tlbldpdGhQb3B1cCIsIkF1dGgwQ29udGV4dCIsIk9BdXRoRXJyb3IiLCJfc3VwZXIiLCJfdGhpcyIsIl9fIiwiX19leHRlbmRzIiwiQ09ERV9SRSIsIlNUQVRFX1JFIiwiRVJST1JfUkUiLCJub3JtYWxpemVFcnJvckZuIiwiZmFsbGJhY2tNZXNzYWdlIiwibG9naW5FcnJvciIsInRva2VuRXJyb3IiLCJkZXByZWNhdGVSZWRpcmVjdFVyaSIsIl9hIiwicmVkaXJlY3RVcmkiLCJyZWR1Y2VyIiwiZGVmYXVsdE9uUmVkaXJlY3RDYWxsYmFjayIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJ0aXRsZSIsInJldHVyblRvIiwid2VhdGhlckZvcmVjYXN0Iiwic2V0V2VhdGhlckZvcmVjYXN0IiwiR2V0V2VhdGhlckZvcmVjYXN0QXN5bmMiLCJ0ZW1wZXJhdHVyZUMiLCJ0ZW1wZXJhdHVyZUYiLCJzdW1tYXJ5IiwiSG9tZSIsImF1dGgwIiwiV2VhdGhlckZvcmVjYXN0IiwiX3R5cGVvZiIsIm1hcFRvQ3NzTW9kdWxlcyIsImNsYXNzTmFtZSIsImNzc01vZHVsZSIsImdsb2JhbENzc01vZHVsZSIsIkVsZW1lbnQiLCJ0YWdQcm9wVHlwZSIsIlRyYW5zaXRpb25Qcm9wVHlwZUtleXMiLCJwcm9wVHlwZXMiLCJmbHVpZCIsIkNvbnRhaW5lciIsIl9wcm9wcyR0YWciLCJUYWciLCJhdHRyaWJ1dGVzIiwic291cmNlU3ltYm9sS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNvbnRhaW5lckNsYXNzIiwid3JpdGFibGUiLCJjb250YWluZXIiLCJkYXJrIiwiZXhwYW5kIiwiZml4ZWQiLCJsaWdodCIsInJvbGUiLCJzdGlja3kiLCJOYXZiYXIiLCJfY2xhc3NOYW1lcyIsIl9wcm9wcyRleHBhbmQiLCJfcHJvcHMkY29udGFpbmVyIiwiZ2V0RXhwYW5kQ2xhc3MiLCJOYXZiYXJCcmFuZCIsImVudW1lcmFibGVPbmx5Iiwic3ltYm9scyIsInN5bSIsIk5hdmJhclRvZ2dsZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9zZXRQcm90b3R5cGVPZiIsIlVOTU9VTlRFRCIsIkVYSVRFRCIsIkVOVEVSSU5HIiwiRU5URVJFRCIsIkVYSVRJTkciLCJUcmFuc2l0aW9uIiwiX1JlYWN0JENvbXBvbmVudCIsImluaXRpYWxTdGF0dXMiLCJhcHBlYXIiLCJpc01vdW50aW5nIiwiZW50ZXIiLCJhcHBlYXJTdGF0dXMiLCJpbiIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJuZXh0Q2FsbGJhY2siLCJfaW5oZXJpdHNMb29zZSIsInByZXZTdGF0ZSIsIl9wcm90byIsInVwZGF0ZVN0YXR1cyIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsImV4aXQiLCJtb3VudGluZyIsIm5vZGVSZWYiLCJmb3JjZVJlZmxvdyIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiX3RoaXMyIiwiYXBwZWFyaW5nIiwiX3JlZjIiLCJtYXliZU5vZGUiLCJtYXliZUFwcGVhcmluZyIsInRpbWVvdXRzIiwiZW50ZXJUaW1lb3V0Iiwib25FbnRlciIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJvbkVudGVyZWQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJvbkV4aXRlZCIsImNhbmNlbCIsIm5leHRTdGF0ZSIsInNldE5leHRDYWxsYmFjayIsIl90aGlzNCIsImFjdGl2ZSIsImhhbmRsZXIiLCJkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyIiwiYWRkRW5kTGlzdGVuZXIiLCJfcmVmMyIsIm1heWJlTmV4dENhbGxiYWNrIiwiX3RoaXMkcHJvcHMiLCJjaGlsZFByb3BzIiwiVHJhbnNpdGlvbkdyb3VwQ29udGV4dCIsIm5vb3AiLCJfdHJhbnNpdGlvblN0YXR1c1RvQ2wiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfZ2V0UHJvdG90eXBlT2YiLCJob3Jpem9udGFsIiwiaXNPcGVuIiwibmF2YmFyIiwiaW5uZXJSZWYiLCJ0cmFuc2l0aW9uU3RhdHVzVG9DbGFzc0hhc2giLCJDb2xsYXBzZSIsIl9Db21wb25lbnQiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfaW5oZXJpdHMiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJTdXBlciIsIk5ld1RhcmdldCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2NsYXNzQ2FsbENoZWNrIiwiZGltZW5zaW9uIiwiaXNBcHBlYXJpbmciLCJnZXROb2RlIiwiZ2V0RGltZW5zaW9uIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJvbWl0S2V5cyIsIm90aGVyUHJvcHMiLCJ0cmFuc2l0aW9uUHJvcHMiLCJwaWNrS2V5cyIsInBpY2siLCJjb2xsYXBzZUNsYXNzIiwiZ2V0VHJhbnNpdGlvbkNsYXNzIiwiTmF2SXRlbSIsIk5hdkxpbmsiLCJfdGhpcyRwcm9wcyR0YWciLCJOYXZNZW51IiwiY29sbGFwc2VkIiwidG9nZ2xlTmF2YmFyIiwiTGF5b3V0IiwiQXBwIiwiZ2V0RWxlbWVudEJ5SWQiLCJyb290IiwiUkVBQ1RfQVBQX0FVVEgwX0RPTUFJTiIsIlJFQUNUX0FQUF9BVVRIMF9DTElFTlRJRCIsIm9wdHMiLCJza2lwUmVkaXJlY3RDYWxsYmFjayIsIm9uUmVkaXJlY3RDYWxsYmFjayIsIl9iIiwiY2xpZW50T3B0cyIsIl9fcmVzdCIsImNsaWVudCIsInRvQXV0aDBDbGllbnRPcHRpb25zIiwiX2MiLCJkaWRJbml0aWFsaXNlIiwiZXJyb3JfMSIsInNlYXJjaFBhcmFtcyIsImNvbmZpZyIsImVycm9yXzIiLCJ0b2tlbiIsImVycm9yXzMiLCJlcnJvcl80IiwiZXJyb3JfNSIsImNvbnRleHRWYWx1ZSIsIl9yZWY0IiwiaGlzdG9yeVJlZiIsInY1Q29tcGF0IiwiZ2V0TG9jYXRpb24iLCJ2YWxpZGF0ZUxvY2F0aW9uIiwiZ2xvYmFsSGlzdG9yeSIsImdldEluZGV4IiwiaGFuZGxlUG9wIiwibmV4dEluZGV4IiwiZGVsdGEiLCJjcmVhdGVVUkwiLCJsaXN0ZW4iLCJmbiIsIlB1c2giLCJoaXN0b3J5U3RhdGUiLCJwdXNoU3RhdGUiLCJET01FeGNlcHRpb24iLCJSZXBsYWNlIiwiZ2V0VXJsQmFzZWRIaXN0b3J5Iiwic2V0U3RhdGVJbXBsIiwidjdfc3RhcnRUcmFuc2l0aW9uIiwibmV3U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9